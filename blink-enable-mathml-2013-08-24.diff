diff --git a/LayoutTests/mathml/EmptyMFracCrash-expected.txt b/LayoutTests/mathml/EmptyMFracCrash-expected.txt
new file mode 100644
index 0000000..0163abc
--- /dev/null
+++ b/LayoutTests/mathml/EmptyMFracCrash-expected.txt
@@ -0,0 +1,2 @@
+This test passes if it does not crash.
+
diff --git a/LayoutTests/mathml/EmptyMFracCrash.xhtml b/LayoutTests/mathml/EmptyMFracCrash.xhtml
new file mode 100644
index 0000000..cfd28cf
--- /dev/null
+++ b/LayoutTests/mathml/EmptyMFracCrash.xhtml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://www.w3.org/1998/Math/MathML" xml:lang="en">
+<head>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+</head>
+<body>
+    <math xmlns="http://www.w3.org/1998/Math/MathML"> 
+        <mtext>This test passes if it does not crash.</mtext>
+        <mrow> 
+            <mfrac></mfrac> 
+        </mrow> 
+    </math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/EmptyMunderOverCrash-expected.txt b/LayoutTests/mathml/EmptyMunderOverCrash-expected.txt
new file mode 100644
index 0000000..0163abc
--- /dev/null
+++ b/LayoutTests/mathml/EmptyMunderOverCrash-expected.txt
@@ -0,0 +1,2 @@
+This test passes if it does not crash.
+
diff --git a/LayoutTests/mathml/EmptyMunderOverCrash.xhtml b/LayoutTests/mathml/EmptyMunderOverCrash.xhtml
new file mode 100644
index 0000000..cb305be
--- /dev/null
+++ b/LayoutTests/mathml/EmptyMunderOverCrash.xhtml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://www.w3.org/1998/Math/MathML" xml:lang="en">
+<head>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+</head>
+<body>
+<math xmlns="http://www.w3.org/1998/Math/MathML"> 
+    <mtext>This test passes if it does not crash.</mtext> 
+    <mrow> 
+        <munderover></munderover> 
+    </mrow> 
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/empty-mroot-crash-expected.txt b/LayoutTests/mathml/empty-mroot-crash-expected.txt
new file mode 100644
index 0000000..0163abc
--- /dev/null
+++ b/LayoutTests/mathml/empty-mroot-crash-expected.txt
@@ -0,0 +1,2 @@
+This test passes if it does not crash.
+
diff --git a/LayoutTests/mathml/empty-mroot-crash.xhtml b/LayoutTests/mathml/empty-mroot-crash.xhtml
new file mode 100644
index 0000000..d96c478
--- /dev/null
+++ b/LayoutTests/mathml/empty-mroot-crash.xhtml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://www.w3.org/1998/Math/MathML" xml:lang="en">
+<head>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+</head>
+<body>
+<math xmlns="http://www.w3.org/1998/Math/MathML">
+    <mtext>This test passes if it does not crash.</mtext> 
+    <mroot></mroot>
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/empty-msubsup-crash-expected.txt b/LayoutTests/mathml/empty-msubsup-crash-expected.txt
new file mode 100644
index 0000000..4900486
--- /dev/null
+++ b/LayoutTests/mathml/empty-msubsup-crash-expected.txt
@@ -0,0 +1,3 @@
+This test passes if it does not crash.
+
+
diff --git a/LayoutTests/mathml/empty-msubsup-crash.html b/LayoutTests/mathml/empty-msubsup-crash.html
new file mode 100644
index 0000000..81483e1
--- /dev/null
+++ b/LayoutTests/mathml/empty-msubsup-crash.html
@@ -0,0 +1,17 @@
+<html>
+<head>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+</head>
+<body>
+
+<p>This test passes if it does not crash.</p>
+
+<math xmlns="http://www.w3.org/1998/Math/MathML">
+    <msubsup></msubsup>
+</math>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/fenced-whitespace-separators-crash-expected.txt b/LayoutTests/mathml/fenced-whitespace-separators-crash-expected.txt
new file mode 100644
index 0000000..c85cc92
--- /dev/null
+++ b/LayoutTests/mathml/fenced-whitespace-separators-crash-expected.txt
@@ -0,0 +1,3 @@
+v
+i
+
diff --git a/LayoutTests/mathml/fenced-whitespace-separators-crash.html b/LayoutTests/mathml/fenced-whitespace-separators-crash.html
new file mode 100644
index 0000000..c696bf7
--- /dev/null
+++ b/LayoutTests/mathml/fenced-whitespace-separators-crash.html
@@ -0,0 +1,21 @@
+<html>
+<head>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+</head>
+
+<body>
+<math>
+    <mfenced separators=" ">
+        <mrow>
+            <mrow>
+                <mi>v</mi>
+            </mrow>
+            <mi>i</mi>
+        </mrow>
+    </mfenced>
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/mfenced-root-layer-expected.txt b/LayoutTests/mathml/mfenced-root-layer-expected.txt
new file mode 100644
index 0000000..f4be9c3
--- /dev/null
+++ b/LayoutTests/mathml/mfenced-root-layer-expected.txt
@@ -0,0 +1,2 @@
+Bug 100764: Heap-use-after-free in WebCore::RenderLayer::paintList [MathML]
+This test passes if it does not crash.
diff --git a/LayoutTests/mathml/mfenced-root-layer.html b/LayoutTests/mathml/mfenced-root-layer.html
new file mode 100644
index 0000000..44b269d
--- /dev/null
+++ b/LayoutTests/mathml/mfenced-root-layer.html
@@ -0,0 +1,16 @@
+<!DOCTYPE html>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+
+    var mfenced = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mfenced");
+
+    var docElt = document.documentElement;
+    docElt.parentNode.removeChild(docElt);
+
+    document.appendChild(mfenced);
+
+    var e = document.createElement("div");
+    e.innerHTML = "<a href='https://bugs.webkit.org/show_bug.cgi?id=100764'>Bug 100764</a>: Heap-use-after-free in WebCore::RenderLayer::paintList [MathML]<br>This test passes if it does not crash.";
+    mfenced.appendChild(e);
+</script>
diff --git a/LayoutTests/mathml/msub-anonymous-child-render-crash-expected.txt b/LayoutTests/mathml/msub-anonymous-child-render-crash-expected.txt
new file mode 100644
index 0000000..d1ac7d5
--- /dev/null
+++ b/LayoutTests/mathml/msub-anonymous-child-render-crash-expected.txt
@@ -0,0 +1,13 @@
+This test passes if it does not crash.
+
+X
+3
+Y
+3
+X
+3
+2
+Y
+3
+2
+
diff --git a/LayoutTests/mathml/msub-anonymous-child-render-crash.html b/LayoutTests/mathml/msub-anonymous-child-render-crash.html
new file mode 100644
index 0000000..0ad7163
--- /dev/null
+++ b/LayoutTests/mathml/msub-anonymous-child-render-crash.html
@@ -0,0 +1,29 @@
+<html>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+<body>
+<p>This test passes if it does not crash.</p>
+<math xmlns="http://www.w3.org/1998/Math/MathML">
+    <msub>
+        <mi>X</mi>
+        <mtr>3</mtr>
+    </msub>
+    <msub>
+        <mi>Y</mi>
+        <mtd>3</mtd>
+    </msub>
+    <msubsup>
+        <mi>X</mi>
+        <mtr>3</mtr>
+        <mn>2</mn>
+    </msubsup>
+    <msubsup>
+        <mi>Y</mi>
+        <mtd>3</mtd>
+        <mn>2</mn>
+    </msubsup>
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/msubsup-fuzz-expected.txt b/LayoutTests/mathml/msubsup-fuzz-expected.txt
new file mode 100644
index 0000000..180d2a9
--- /dev/null
+++ b/LayoutTests/mathml/msubsup-fuzz-expected.txt
@@ -0,0 +1,4 @@
+This test passes if it does not crash.
+
+3
+
diff --git a/LayoutTests/mathml/msubsup-fuzz.html b/LayoutTests/mathml/msubsup-fuzz.html
new file mode 100644
index 0000000..0cfb29c
--- /dev/null
+++ b/LayoutTests/mathml/msubsup-fuzz.html
@@ -0,0 +1,8 @@
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+
+<p>This test passes if it does not crash.</p>
+
+<math><msubsup><mtext style="display: none"></mtext><mn>3</mn></msubsup></math>
diff --git a/LayoutTests/mathml/msubsup-no-grandchild-expected.txt b/LayoutTests/mathml/msubsup-no-grandchild-expected.txt
new file mode 100644
index 0000000..0163abc
--- /dev/null
+++ b/LayoutTests/mathml/msubsup-no-grandchild-expected.txt
@@ -0,0 +1,2 @@
+This test passes if it does not crash.
+
diff --git a/LayoutTests/mathml/msubsup-no-grandchild.xhtml b/LayoutTests/mathml/msubsup-no-grandchild.xhtml
new file mode 100644
index 0000000..315865c
--- /dev/null
+++ b/LayoutTests/mathml/msubsup-no-grandchild.xhtml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://www.w3.org/1998/Math/MathML" xml:lang="en">
+<head>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+</head>
+<body>
+<math xmlns="http://www.w3.org/1998/Math/MathML">
+    <mtext>This test passes if it does not crash.</mtext> 
+    <msubsup> 
+        <mi></mi> 
+    </msubsup> 
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/msubsup-remove-children-expected.txt b/LayoutTests/mathml/msubsup-remove-children-expected.txt
new file mode 100644
index 0000000..c4f96ff
--- /dev/null
+++ b/LayoutTests/mathml/msubsup-remove-children-expected.txt
@@ -0,0 +1,2 @@
+This test passes if the page has no other text.
+
diff --git a/LayoutTests/mathml/msubsup-remove-children.xhtml b/LayoutTests/mathml/msubsup-remove-children.xhtml
new file mode 100644
index 0000000..490cb9a
--- /dev/null
+++ b/LayoutTests/mathml/msubsup-remove-children.xhtml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns='http://www.w3.org/1999/xhtml'>
+  <head>
+    <title>Subscript and Superscripts</title>
+    <script>
+    if (window.testRunner)
+      testRunner.dumpAsText();
+    </script>
+  </head>
+  <body>
+    <math id="m1" xmlns='http://www.w3.org/1998/Math/MathML'>
+      <mtext>This test passes if the page has no other text.</mtext>
+      <msubsup id="m2">
+        <mi id="m3">Z</mi>
+        <mrow id="m4"><mi id="m5">x</mi><mo id="m6">+</mo><mi id="m7">y</mi><mo id="m8">+</mo><mi id="m9">z</mi></mrow>
+        <mi id="m10">j</mi>
+      </msubsup>
+    </math>
+    <script>
+    try {
+      document.getElementById("m2").textContent=undefined;
+    } catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+    </script>
+  </body>
+</html>
diff --git a/LayoutTests/mathml/munderover-remove-children-expected.txt b/LayoutTests/mathml/munderover-remove-children-expected.txt
new file mode 100644
index 0000000..997cce0
--- /dev/null
+++ b/LayoutTests/mathml/munderover-remove-children-expected.txt
@@ -0,0 +1,2 @@
+This test passes if this page has no other text.
+
diff --git a/LayoutTests/mathml/munderover-remove-children.html b/LayoutTests/mathml/munderover-remove-children.html
new file mode 100644
index 0000000..9ce03ab
--- /dev/null
+++ b/LayoutTests/mathml/munderover-remove-children.html
@@ -0,0 +1,57 @@
+<html xmlns='http://www.w3.org/1999/xhtml'>
+<head>
+<title>MathML munder/mover removing children test</title>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+</script>
+</head>
+<body>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+    <mtext>This test passes if this page has no other text.</mtext>
+    <munder>
+        <mi id="m1">A</mi>
+        <mi id="m2">X</mi>
+    </munder>
+    <mover>
+        <mi id="m3">B</mi>
+        <mi id="m4">Y</mi>
+    </mover>
+    <munderover>
+        <mi id="m5">C</mi>
+        <mi id="m6">Z</mi>
+        <mi id="m7">W</mi>
+    </munderover>
+</math>
+<script>
+try {
+    var elem = document.getElementById("m1");
+    elem.parentNode.removeChild(elem);
+} catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+try {
+    var elem = document.getElementById("m2");
+    elem.parentNode.removeChild(elem);
+} catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+try {
+    var elem = document.getElementById("m3");
+    elem.parentNode.removeChild(elem);
+} catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+try {
+    var elem = document.getElementById("m4");
+    elem.parentNode.removeChild(elem);
+} catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+try {
+    var elem = document.getElementById("m7");
+    elem.parentNode.removeChild(elem);
+} catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+try {
+    var elem = document.getElementById("m6");
+    elem.parentNode.removeChild(elem);
+} catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+try {
+    var elem = document.getElementById("m5");
+    elem.parentNode.removeChild(elem);
+} catch(e) {document.write("Error: " + e.name + ": " + e.message + + " for " + i);}
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/operator-hijacks-fenced-node-expected.txt b/LayoutTests/mathml/operator-hijacks-fenced-node-expected.txt
new file mode 100644
index 0000000..804a4e7
--- /dev/null
+++ b/LayoutTests/mathml/operator-hijacks-fenced-node-expected.txt
@@ -0,0 +1,3 @@
+This tests that an anonymous operator created by mfenced does not set itself as the mfenced node’s renderer.
+
+The test passes if it does not crash or cause an assertion failure.
diff --git a/LayoutTests/mathml/operator-hijacks-fenced-node.xhtml b/LayoutTests/mathml/operator-hijacks-fenced-node.xhtml
new file mode 100644
index 0000000..d40224d
--- /dev/null
+++ b/LayoutTests/mathml/operator-hijacks-fenced-node.xhtml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://www.w3.org/1998/Math/MathML">
+<body>
+    <p>
+        This tests that an anonymous operator created by mfenced does not
+        set itself as the mfenced node&#x2019;s renderer.
+    </p>
+    <p>
+        The test passes if it does not crash or cause an assertion failure.
+    </p>
+    <div id="container">
+        <m:math><span><m:mfenced id="target"><m:mo></m:mo></m:mfenced></span></m:math>
+    </div>
+    <script><![CDATA[
+        if (window.testRunner)
+            testRunner.dumpAsText();
+
+        document.body.offsetTop;
+        document.getElementById("target").parentNode.insertBefore(document.createElement("div"), document.getElementById("target"));
+        document.body.offsetTop;
+        document.getElementById("container").style.display = "none";
+    ]]></script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-background-color-expected.html b/LayoutTests/mathml/presentation/attributes-background-color-expected.html
new file mode 100644
index 0000000..408b51f
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-background-color-expected.html
@@ -0,0 +1,37 @@
+<!doctype html>
+<html>
+  <head>
+    <title>background, color</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This should just draw the blue background of the div. -->
+    <div style="background: blue;">
+      <math style="visibility: hidden;">
+        <mo mathcolor="#00F">&#x2211;</mo>
+        <mfrac mathcolor="blue"><mi>x</mi><mi>y</mi></mfrac>
+        <mn mathcolor="#00F">1</mn>
+        <msqrt mathcolor="#0000FF"><mn>2</mn></msqrt>
+      </math>
+      <math>
+        <mfrac color="blue"><mi>x</mi><mi>y</mi></mfrac>
+      </math>
+    </div>
+
+    <!-- The style attribute should have the same effect as the MathML
+         attributes for colors. --> 
+    <div>
+      <math style="background: orange">
+        <mo style="color: blue">&#x2211;</mo>
+        <mfrac style="color: blue"><mi>x</mi><mi>y</mi></mfrac>
+        <mn style="color: blue">1</mn>
+        <msqrt style="color: blue"><mn>2</mn></msqrt>
+      </math>
+      <math style="background: orange">
+        <mfrac style="color: blue"><mi>x</mi><mi>y</mi></mfrac>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-background-color.html b/LayoutTests/mathml/presentation/attributes-background-color.html
new file mode 100644
index 0000000..bd2073c
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-background-color.html
@@ -0,0 +1,41 @@
+<!doctype html>
+<html>
+  <head>
+    <title>background, color</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This verifies the effect of the mathcolor attribute and of the
+         deprecated color attribute. These MathML elements should appear in
+         blue. Since they are drawn on a blue background, they should not be
+         visible. -->
+    <div style="background: blue;">
+      <math>
+        <mo mathcolor="#00F">&#x2211;</mo>
+        <mfrac mathcolor="blue"><mi>x</mi><mi>y</mi></mfrac>
+        <mn mathcolor="#00F">1</mn>
+        <msqrt mathcolor="#0000FF"><mn>2</mn></msqrt>
+      </math>
+      <math>
+        <mfrac color="blue"><mi>x</mi><mi>y</mi></mfrac>
+      </math>
+    </div>
+
+    <!-- This verifies the effect of the mathbackground attribute and of the
+         deprecated background attribute. The following elements should appear
+         in blue on an orange background. -->
+    <div>
+      <math mathbackground="orange">
+        <mo mathcolor="#00F">&#x2211;</mo>
+        <mfrac mathcolor="blue"><mi>x</mi><mi>y</mi></mfrac>
+        <mn mathcolor="#00F">1</mn>
+        <msqrt mathcolor="#0000FF"><mn>2</mn></msqrt>
+      </math>
+      <math background="orange">
+        <mfrac color="blue"><mi>x</mi><mi>y</mi></mfrac>
+      </math>
+    </div>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-display-expected.html b/LayoutTests/mathml/presentation/attributes-display-expected.html
new file mode 100644
index 0000000..8e8e465
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-display-expected.html
@@ -0,0 +1,50 @@
+<!doctype html>
+<html>
+  <head>
+    <title>display</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This only draws the <div> elements since the math element should be
+         hidden by the red boxes. -->
+    <div style="height: 3em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em; height: 3em;
+                  background: blue;">
+      </div>
+      <div style="position: absolute; left: 0; width: 2em; height: 3em;
+                background: red;">
+      </div>
+    </div>
+
+    <!-- This only draws the <div> elements since the math element should be
+         hidden by the red boxes. -->
+    <div style="height: 3em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em; height: 3em;
+                  background: blue;">
+      </div>
+      <div style="position: absolute; left: 4em; width: 2em; height: 3em;
+                background: red;">
+      </div>
+    </div>
+
+    <!-- This only draws the black <div> covering the math element. -->
+    <div style="height: 3em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em;
+                  background: black;">
+        <span style="font-size: 1.5em;">X</span>
+      </div>
+    </div>
+
+    <!-- This only draws the black <div> covering the math element. -->
+    <div style="height: 5em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em;">
+        <div style="position: absolute; left: 0; top: 2em;
+                    width: 10em; background: black;">
+          <span style="font-size: 1.5em;">X</span>
+        </div>
+      </div>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-display.html b/LayoutTests/mathml/presentation/attributes-display.html
new file mode 100644
index 0000000..fcb78d3
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-display.html
@@ -0,0 +1,67 @@
+<!doctype html>
+<html>
+  <head>
+    <title>display</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- The <math display="inline"> should be aligned left and so covered by
+         the red rectangle. -->
+    <div style="height: 3em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em; height: 3em;
+                  background: blue;">
+        <math display="inline">
+          <mi>x</mi>
+        </math>
+      </div>
+      <div style="position: absolute; left: 0; width: 2em; height: 3em;
+                background: red;">
+      </div>
+    </div>
+
+    <!-- The <math display="block"> should be aligned centered and so
+         covered by the red rectangle. -->
+    <div style="height: 3em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em; height: 3em;
+                  background: blue;">
+        <math display="block">
+          <mi>x</mi>
+        </math>
+      </div>
+      <div style="position: absolute; left: 4em; width: 2em; height: 3em;
+                background: red;">
+      </div>
+    </div>
+
+    <!-- The <math display="inline"> should not create a new line and so
+         should be hidden by the black div. -->
+    <div style="height: 3em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em;">
+        <span style="font-size: 1.5em;">X</span>
+        <math display="inline"><mi>x</mi></math>
+        <span style="font-size: 1.5em;">X</span>
+      </div>
+      <div style="position: absolute; left: 0; width: 10em;
+                  background: black;">
+        <span style="font-size: 1.5em;">X</span>
+      </div>
+    </div>
+
+    <!-- The <math display="block"> should create a new line and so should
+         be hidden by the black div. -->
+    <div style="height: 5em; width: 10em;">
+      <div style="position: absolute; left: 0; width: 10em;">
+        <span style="display: inline-block; height: 2em;"></span>
+        <math display="block"><mi>x</mi></math>
+      </div>
+      <div style="position: absolute; left: 0; width: 10em;">
+        <div style="position: absolute; left: 0; top: 2em;
+                    width: 10em; background: black;">
+          <span style="font-size: 1.5em;">X</span>
+        </div>
+      </div>
+    </div>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-mathsize-expected.html b/LayoutTests/mathml/presentation/attributes-mathsize-expected.html
new file mode 100644
index 0000000..3868af1
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-mathsize-expected.html
@@ -0,0 +1,23 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mathsize</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- The style attribute should have the same effect as the mathsize
+         attribute. Note that the exact size for "small" and "big" is not
+         specified by the MathML specification. 0.75em and 2em are the values
+         used by WebKit. --> 
+    <div>
+      <math>
+        <mi style="font-size: 0.75em;">x</mi>
+        <mi style="font-size: 1em;">x</mi>
+        <mi style="font-size: 1.5em;">x</mi>
+        <mi style="font-size: 2em;">x</mi>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-mathsize.html b/LayoutTests/mathml/presentation/attributes-mathsize.html
new file mode 100644
index 0000000..38b7c3e
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-mathsize.html
@@ -0,0 +1,20 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mathsize</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This verifies the effect of the mathsize attribute. -->
+    <div>
+      <math>
+        <mi mathsize="small">x</mi>
+        <mi mathsize="normal">x</mi>
+        <mi mathsize="big">x</mi>
+        <mi mathsize="2em">x</mi>
+      </math>
+    </div>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-mathvariant-expected.html b/LayoutTests/mathml/presentation/attributes-mathvariant-expected.html
new file mode 100644
index 0000000..94fd8b4
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-mathvariant-expected.html
@@ -0,0 +1,39 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mathvariant</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- The style attribute should be equivalent to the mathvariant attribute.
+         Note that the mathvariant attribute is supposed to map "A" to the
+         corresponding character from the Mathematical Alphanumeric Symbols
+         Unicode block ("U+1D400 MATHEMATICAL BOLD CAPITAL",
+         "U+1D434 MATHEMATICAL ITALIC CAPITAL A" and
+         "U+1D468 MATHEMATICAL BOLD ITALIC CAPITAL A") but the WebKit
+         implementation relies on CSS style instead. See also bug 108778.
+      -->
+    <div>
+      <math>
+        <mi style="font-style: normal;">A</mi>
+        <mi style="font-style: italic;">A</mi>
+        <mtext style="font-style: italic;">A</mtext>
+        <mi style="font-style: normal; font-weight: bold;">A</mi>
+        <mi style="font-weight: bold; font-style: italic;">A</mi>
+      </math>
+    </div>
+
+    <!-- The style attribute should have the same effect as the MathML
+         attributes -->
+    <div>
+      <math>
+        <mtext style="font-size: 2em;">A</mtext>
+        <mtext style="font-family: sans-serif;">A</mtext>
+        <mtext style="font-style: italic;">A</mtext>
+        <mtext style="font-weight: bold;">A</mtext>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-mathvariant.html b/LayoutTests/mathml/presentation/attributes-mathvariant.html
new file mode 100644
index 0000000..c1d19f6
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-mathvariant.html
@@ -0,0 +1,30 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mathvariant</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This tests the mathvariant attribute. The default value is "italic" on
+         single-char <mi> elements and "normal" otherwise. -->
+    <div>
+      <math>
+        <mi mathvariant="normal">A</mi>
+        <mi>A</mi>
+        <mtext mathvariant="italic">A</mtext>
+        <mi mathvariant="bold">A</mi>
+        <mi mathvariant="bold-italic">A</mi>
+      </math>
+    </div>
+
+    <!-- This tests the deprecated font style attributes. -->
+    <math>
+      <mtext fontsize="2em">A</mtext>
+      <mtext fontfamily="sans-serif">A</mtext>
+      <mtext fontstyle="italic">A</mtext>
+      <mtext fontweight="bold">A</mtext>
+    </math>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-style-expected-mismatch.html b/LayoutTests/mathml/presentation/attributes-style-expected-mismatch.html
new file mode 100644
index 0000000..090d1c5
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-style-expected-mismatch.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html>
+  <head>
+    <title>style</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This should render without any shadow. -->
+    <math>
+      <mfrac>
+        <mn>1</mn>
+        <mn>2</mn>
+      </mfrac>
+    </math>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/attributes-style.html b/LayoutTests/mathml/presentation/attributes-style.html
new file mode 100644
index 0000000..2844560
--- /dev/null
+++ b/LayoutTests/mathml/presentation/attributes-style.html
@@ -0,0 +1,19 @@
+<!doctype html>
+<html>
+  <head>
+    <title>style</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This verifies that the style attribute works on MathML nodes. 
+         This should render with a red shadow. -->
+    <math>
+      <mfrac style="text-shadow: red .2em .2em .1em;">
+        <mn>1</mn>
+        <mn>2</mn>
+      </mfrac>
+    </math>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/bug95015-expected.html b/LayoutTests/mathml/presentation/bug95015-expected.html
new file mode 100644
index 0000000..e8b9a2b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/bug95015-expected.html
@@ -0,0 +1,33 @@
+<!doctype html>
+<html>
+  <head>
+    <title>bug 95015</title>
+    <meta charset="utf-8"/>
+  </head>    
+  <body>
+
+    
+    <!-- The msubsup should be in a supscript and so it should be hidden by the
+         red rectangle. -->
+    <div style="position: absolute; left: 10px; top: 0;">
+      <math>
+        <mrow>
+          <mspace height="50px" depth="50px"/>
+          <msup>
+            <mi>X</mi>
+            <mspace/>
+          </msup>
+        </mrow>
+      </math>
+    </div>
+    <div style="position: absolute; left: 10px; top: -.2em;">
+      <math>
+        <mrow>
+          <mspace height="50px" depth="50px"/>
+          <mspace width="100px" height="2em" depth="0" mathbackground="red"/>
+        </mrow>
+      </math>
+    </div>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/bug95015.html b/LayoutTests/mathml/presentation/bug95015.html
new file mode 100644
index 0000000..8048145
--- /dev/null
+++ b/LayoutTests/mathml/presentation/bug95015.html
@@ -0,0 +1,33 @@
+<!doctype html>
+<html>
+  <head>
+    <title>bug 95015</title>
+    <meta charset="utf-8"/>
+  </head>    
+  <body>
+
+    
+    <!-- The msubsup should be in supscript and so hidden by the red
+         rectangle. -->
+    <div style="position: absolute; left: 10px; top: 0;">
+      <math>
+        <mrow>
+          <mspace height="50px" depth="50px"/>
+          <msup>
+            <mi>X</mi>
+            <msubsup><mi>y</mi><mn>1</mn><mn>2</mn></msubsup>
+          </msup>
+        </mrow>
+      </math>
+    </div>
+    <div style="position: absolute; left: 10px; top: -.2em;">
+      <math>
+        <mrow>
+          <mspace height="50px" depth="50px"/>
+          <mspace width="100px" height="2em" depth="0" mathbackground="red"/>
+        </mrow>
+      </math>
+    </div>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/bug95404-expected.html b/LayoutTests/mathml/presentation/bug95404-expected.html
new file mode 100644
index 0000000..a938835
--- /dev/null
+++ b/LayoutTests/mathml/presentation/bug95404-expected.html
@@ -0,0 +1,38 @@
+<!doctype html>
+<html>
+  <head>
+    <title>testcase</title>
+    <meta charset="utf-8"/>
+    <style type="text/css">
+      body {
+      overflow: hidden;
+      }
+    </style>
+  </head>
+  <body>
+
+    <div style="position: absolute; top: 0; width: 100%;">
+      <div style="position: absolute; top: 0; background: red; width: 100%;">
+        <math style="visibility: hidden;">
+          <msqrt>
+            <mi>x</mi>
+            <mi>y</mi>
+          </msqrt>
+        </math>
+      </div>
+    </div>
+
+    <div style="position: absolute; top: 5em; width: 100%;">
+      <div style="position: absolute; top: 0; background: blue; width: 100%;">
+        <math style="visibility: hidden;">
+          <msup>
+            <mi>x</mi>
+            <mi>y</mi>
+          </msup>
+        </math>
+      </div>
+    </div>
+
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/bug95404.html b/LayoutTests/mathml/presentation/bug95404.html
new file mode 100644
index 0000000..cf24a89
--- /dev/null
+++ b/LayoutTests/mathml/presentation/bug95404.html
@@ -0,0 +1,58 @@
+<!doctype html>
+<html>
+  <head>
+    <title>testcase</title>
+    <meta charset="utf-8"/>
+    <style type="text/css">
+      body {
+      overflow: hidden;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- The first msqrt should not wrap and so should be hidden by the
+         red rectangle -->
+    <div style="position: absolute; top: 0; width: 100%;">
+      <div style="position: absolute; top: 0;">
+        <math>
+          <msqrt>
+            <mi style="padding-right: 50vw">x</mi>
+            <mi style="padding-right: 50vw">y</mi>
+          </msqrt>
+        </math>
+      </div>
+      <div style="position: absolute; top: 0; background: red; width: 100%;">
+        <math style="visibility: hidden;">
+          <msqrt>
+            <mi>x</mi>
+            <mi>y</mi>
+          </msqrt>
+        </math>
+      </div>
+    </div>
+
+    <!-- The first msup should not wrap and so should be hidden by the
+         blue rectangle -->
+    <div style="position: absolute; top: 5em; width: 100%;">
+      <div style="position: absolute; top: 0;">
+        <math>
+          <msup>
+            <mi style="padding-right: 50vw">x</mi>
+            <mi style="padding-right: 50vw">y</mi>
+          </msup>
+        </math>
+      </div>
+      <div style="position: absolute; top: 0; background: blue; width: 100%;">
+        <math style="visibility: hidden;">
+          <msup>
+            <mi>x</mi>
+            <mi>y</mi>
+          </msup>
+        </math>
+      </div>
+    </div>
+
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/bug97990-expected.html b/LayoutTests/mathml/presentation/bug97990-expected.html
new file mode 100644
index 0000000..081a09a
--- /dev/null
+++ b/LayoutTests/mathml/presentation/bug97990-expected.html
@@ -0,0 +1,32 @@
+<!doctype html>
+<html>
+  <head>
+    <title>bug 97990</title>
+    <meta charset="utf-8"/>
+  </head>    
+  <body>
+
+    <!-- The two x's should be aligned and so hidden by the red rectangle -->
+    <div style="position: absolute; left: 0; top: 0;">
+      <math>
+        <mrow>
+        <mspace height="5em" depth="5em"/>
+        <mi style="color: red;">x</mi>
+        <mover style="margin-top: 2px; padding-top: 4px; background-color: yellow">
+          <mi style="margin-top: 8px; padding-top: 16px; background-color: orange; color: red;">x</mi>
+          <mi>c</mi>
+        </mover>
+        </mrow>
+      </math>
+    </div>
+    <div style="position: absolute; left: -1em; top: 0;">
+      <math>
+        <mrow>
+          <mspace height="5em" depth="5em"/>
+          <mspace width="6em" height="1ex" depth="1px" mathbackground="red"/>
+        </mrow>
+      </math>
+    </div>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/bug97990.html b/LayoutTests/mathml/presentation/bug97990.html
new file mode 100644
index 0000000..b5181c6
--- /dev/null
+++ b/LayoutTests/mathml/presentation/bug97990.html
@@ -0,0 +1,32 @@
+<!doctype html>
+<html>
+  <head>
+    <title>bug 97990</title>
+    <meta charset="utf-8"/>
+  </head>    
+  <body>
+
+    <!-- The two x's should be aligned and so hidden by the red rectangle -->
+    <div style="position: absolute; left: 0; top: 0;">
+      <math>
+        <mrow>
+        <mspace height="5em" depth="5em"/>
+        <mi>x</mi>
+        <mover style="margin-top: 2px; padding-top: 4px; background-color: yellow">
+          <mi style="margin-top: 8px; padding-top: 16px; background-color: orange">x</mi>
+          <mi>c</mi>
+        </mover>
+        </mrow>
+      </math>
+    </div>
+    <div style="position: absolute; left: -1em; top: 0;">
+      <math>
+        <mrow>
+          <mspace height="5em" depth="5em"/>
+          <mspace width="6em" height="1ex" depth="1px" mathbackground="red"/>
+        </mrow>
+      </math>
+    </div>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/dynamic-expected.html b/LayoutTests/mathml/presentation/dynamic-expected.html
new file mode 100644
index 0000000..1f5e018
--- /dev/null
+++ b/LayoutTests/mathml/presentation/dynamic-expected.html
@@ -0,0 +1,7 @@
+<!DOCTYPE html>
+
+<math>
+    <mfrac id="mfrac"><mn>5</mn><mn>4</mn></mfrac>
+    
+    <msqrt id="msqrt"><mn>6</mn><mi>b</mi><mn>7</mn></msqrt>
+</math>
diff --git a/LayoutTests/mathml/presentation/dynamic.html b/LayoutTests/mathml/presentation/dynamic.html
new file mode 100644
index 0000000..1601856
--- /dev/null
+++ b/LayoutTests/mathml/presentation/dynamic.html
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+
+<math>
+    <mfrac id="mfrac"><mn>1</mn><mn>2</mn></mfrac>
+    
+    <msqrt id="msqrt"><mi>a</mi><mi>b</mi><mi>c</mi></msqrt>
+    
+    <mn id="mn4">4</mn>
+    <mn id="mn5">5</mn>
+    <mn id="mn6">6</mn>
+    <mn id="mn7">7</mn>
+</math>
+
+<script>
+    document.body.offsetTop;
+    
+    var mfrac = document.getElementById("mfrac");
+    mfrac.replaceChild(document.getElementById("mn4"), mfrac.lastChild);
+    mfrac.replaceChild(document.getElementById("mn5"), mfrac.firstChild);
+    
+    var msqrt = document.getElementById("msqrt");
+    msqrt.replaceChild(document.getElementById("mn6"), msqrt.firstChild);
+    msqrt.replaceChild(document.getElementById("mn7"), msqrt.lastChild);
+</script>
diff --git a/LayoutTests/mathml/presentation/fenced-expected.html b/LayoutTests/mathml/presentation/fenced-expected.html
new file mode 100644
index 0000000..9f8ca20
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fenced-expected.html
@@ -0,0 +1,31 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfenced</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- The <mfenced> element should be equivalent to its "expanded" form with
+         <mrow> and <mo> elements, as described in the MathML specification.
+         Note that the MathML operator dictionary defines "(" and ")" as fences,
+         so we don't need an explicit "fence" attribute on the <mo> elements.-->
+    <!-- FIXME: <mfenced> and its expanded form do not use the same spacing,
+         so -webkit-margin-start and -webkit-margin-end are currently set
+         explicitly below. See bug 118843. -->
+    <math>
+      <mrow>
+        <mo>(</mo>
+        <mrow>
+          <mspace width="48px" height="24px" depth="24px" mathbackground="#0f0"/> 
+          <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">,</mo>
+          <mspace width="48px" height="24px" depth="24px" mathbackground="#0f0"/> 
+          <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">,</mo>
+          <mspace width="48px" height="24px" depth="24px" mathbackground="#0f0"/> 
+        </mrow> 
+        <mo>)</mo>
+      </mrow>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fenced-mi-expected.html b/LayoutTests/mathml/presentation/fenced-mi-expected.html
new file mode 100644
index 0000000..19f0cb5
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fenced-mi-expected.html
@@ -0,0 +1,72 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfenced-mi</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- The <mfenced> element should be equivalent to its "expanded" form with
+         <mrow> and <mo> elements, as described in the MathML specification.
+         The MathML operator dictionary defines '(', ')', '{', '}' as fences,
+         so we don't need an explicit "fence" attribute on the <mo> elements.-->
+    <!-- FIXME: <mfenced> and its expanded form do not use the same spacing,
+         so -webkit-margin-start and -webkit-margin-end are currently set
+         explicitly below. See bug 118843. -->
+
+    <p>
+      <math>
+        <mrow>
+          <mo>(</mo>
+          <mrow>
+            <mi>x</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">,</mo>
+            <mi>y</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">,</mo>
+            <mi>z</mi>
+          </mrow>
+          <mo>)</mo>
+        </mrow>
+      </math>
+    </p>
+
+    <p>
+      <math>
+        <mrow>
+          <mo>{</mo>
+          <mrow>
+            <mi>x</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">1</mo>
+            <mi>y</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">2</mo>
+            <mi>z</mi>
+          </mrow>
+          <mo>}</mo>
+        </mrow>
+      </math>
+    </p>
+
+    <p>
+      <math>
+        <mrow>
+          <mo>(</mo>
+          <mrow>
+            <mi>x</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">1</mo>
+            <mi>y</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">2</mo>
+            <mi>z</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">3</mo>
+            <mi>u</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">3</mo>
+            <mi>v</mi>
+            <mo separator="true" style="-webkit-margin-start: 0; -webkit-margin-end: .25em;">3</mo>
+            <mi>w</mi>
+          </mrow>
+          <mo>)</mo>
+        </mrow>
+      </math>
+    </p>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fenced-mi.html b/LayoutTests/mathml/presentation/fenced-mi.html
new file mode 100644
index 0000000..0a2e4b7
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fenced-mi.html
@@ -0,0 +1,37 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfenced-mi</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- Test default attribute values. -->
+    <p>
+      <math>
+        <mfenced><mi>x</mi><mi>y</mi><mi>z</mi></mfenced>
+      </math>
+    </p>
+
+    <!-- Test for open, close and separators. The third separator '3' should
+         be ignored. -->
+    <p>    
+      <math>
+        <mfenced separators="123" open="{" close="}">
+          <mi>x</mi><mi>y</mi><mi>z</mi>
+        </mfenced>
+      </math>
+    </p>
+
+    <!-- Test for open, close and separators. The third separator '3' should
+         be repeated. -->
+    <p>    
+      <math>
+        <mfenced separators="123">
+          <mi>x</mi><mi>y</mi><mi>z</mi><mi>u</mi><mi>v</mi><mi>w</mi>
+        </mfenced>
+      </math>
+    </p>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fenced.html b/LayoutTests/mathml/presentation/fenced.html
new file mode 100644
index 0000000..2ce0b8c7a
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fenced.html
@@ -0,0 +1,19 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfenced</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- <mfenced> element with stretchy parenthesis and comma separators. -->
+    <math>
+      <mfenced>
+        <mspace width="48px" height="24px" depth="24px" mathbackground="#0f0"/> 
+        <mspace width="48px" height="24px" depth="24px" mathbackground="#0f0"/> 
+        <mspace width="48px" height="24px" depth="24px" mathbackground="#0f0"/> 
+      </mfenced>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-box-expected.html b/LayoutTests/mathml/presentation/fractions-box-expected.html
new file mode 100644
index 0000000..26e8d04
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-box-expected.html
@@ -0,0 +1,52 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions box</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 8em; height: 8em;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <table style="position: absolute; top: 0; left: 10px;">
+      <tr>
+        <td> 
+          <span style="padding-left: .1em; padding-right: .1em;">
+            <span style="visibility: hidden;">
+              <math><mn>1</mn></math><br/><math><mn>1</mn></math>
+            </span>
+          </span>
+        </td>
+        <td> 
+          <span style="padding-top: 1ex; padding-bottom: 1ex;">
+            <span style="visibility: hidden;">
+              
+              <math>
+                <mfrac>
+                  <mtext>x</mtext>
+                  <mtext>x</mtext>
+                </mfrac>
+              </math>
+            </span>
+          </span>
+        </td>
+      </tr> 
+    </table>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-box.html b/LayoutTests/mathml/presentation/fractions-box.html
new file mode 100644
index 0000000..10ad27d
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-box.html
@@ -0,0 +1,71 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions box</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 8em; height: 8em;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- The bounding box of the fraction should approximately be the one
+         of the numerator and denominator separated by a line break. Hence
+         the black rectangles in the second table should cover the elements
+         of the first table. -->
+    <table style="position: absolute; top: 0; left: 10px;">
+      <tr>
+        <td> 
+          <math>
+            <mfrac>
+              <mtext>x</mtext>
+              <mtext>x</mtext>
+            </mfrac>
+          </math>
+        </td>
+        <td> 
+          <math><mn>1</mn></math><br/><math><mn>1</mn></math>
+        </td>
+      </tr> 
+    </table>
+    <table style="position: absolute; top: 0; left: 10px;">
+      <tr>
+        <td> 
+          <span style="padding-left: .1em; padding-right: .1em;">
+            <span style="visibility: hidden;">
+              <math><mn>1</mn></math><br/><math><mn>1</mn></math>
+            </span>
+          </span>
+        </td>
+        <td> 
+          <span style="padding-top: 1ex; padding-bottom: 1ex;">
+            <span style="visibility: hidden;">
+              
+              <math>
+                <mfrac>
+                  <mtext>x</mtext>
+                  <mtext>x</mtext>
+                </mfrac>
+              </math>
+            </span>
+          </span>
+        </td>
+      </tr> 
+    </table>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-color-expected-mismatch.html b/LayoutTests/mathml/presentation/fractions-color-expected-mismatch.html
new file mode 100644
index 0000000..87edb3b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-color-expected-mismatch.html
@@ -0,0 +1,19 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions color</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This test verifies that the CSS color property applies to the fraction 
+         bar. Here, it should be painted in blue. -->
+    <math style="color: black;">
+      <mfrac style="color: blue;">
+        <mi style="color: black;">A</mi>
+        <mi style="color: black;">B</mi>
+      </mfrac>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-color.html b/LayoutTests/mathml/presentation/fractions-color.html
new file mode 100644
index 0000000..f6c12b3
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-color.html
@@ -0,0 +1,19 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions color</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This test verifies that the CSS color property applies to the fraction 
+         bar. Here, it should be painted in red. -->
+    <math style="color: black;">
+      <mfrac style="color: red;">
+        <mi style="color: black;">A</mi>
+        <mi style="color: black;">B</mi>
+      </mfrac>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-invalid-expected.html b/LayoutTests/mathml/presentation/fractions-invalid-expected.html
new file mode 100644
index 0000000..7845b4d
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-invalid-expected.html
@@ -0,0 +1,21 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions invalid</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- WebKit ignores bad markup. -->
+    <math>
+      <mfrac><mn>1</mn><mn>2</mn></mfrac>
+    </math>
+    <math>
+      <mfrac>
+        <mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow>
+        <mrow><mi>x</mi><mo>+</mo><mn>2</mn></mrow>
+      </mfrac>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-invalid.html b/LayoutTests/mathml/presentation/fractions-invalid.html
new file mode 100644
index 0000000..6354a48
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-invalid.html
@@ -0,0 +1,21 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions invalid</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- Testing invalid fractions -->
+    <math>
+      <mfrac><mn>1</mn>bad<mn>2</mn></mfrac>
+    </math>
+    <math>
+      <mfrac>
+        <mrow><mi>x</mi><mo>+</mo>bad<mn>1</mn></mrow>
+        <mrow><mi>x</mi><mo>+</mo><mn>2</mn></mrow>
+      </mfrac>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-linethickness-expected.html b/LayoutTests/mathml/presentation/fractions-linethickness-expected.html
new file mode 100644
index 0000000..5f4a7cf
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-linethickness-expected.html
@@ -0,0 +1,31 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions linethickness</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- From the MathML spec:
+         'The default value is "medium", "thin" is thinner, but visible,
+         "thick" is thicker; the exact thickness of these is left up to the
+         rendering agent.'
+         'A number without a unit is intepreted as a multiple of the default
+         value.'
+         
+         Here are the linethickness values used by WebKit:
+         
+         gLineThin = 0.33f;
+         gLineMedium = 1.f;
+         gLineThick = 3.f;
+      -->
+
+    <math mathsize="32px">
+      <mfrac linethickness="0.33px"><mn>1</mn><mn>2</mn></mfrac>
+      <mfrac linethickness="1px"><mn>1</mn><mn>2</mn></mfrac>
+      <mfrac linethickness="3px"><mn>1</mn><mn>2</mn></mfrac>
+      <mfrac linethickness="5px"><mn>1</mn><mn>2</mn></mfrac>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-linethickness.html b/LayoutTests/mathml/presentation/fractions-linethickness.html
new file mode 100644
index 0000000..2bcef16
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-linethickness.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions linethickness</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This should draw fraction bars of increasing thickness -->
+    <math mathsize="32px">
+      <mfrac linethickness="thin"><mn>1</mn><mn>2</mn></mfrac>
+      <mfrac linethickness="medium"><mn>1</mn><mn>2</mn></mfrac>
+      <mfrac linethickness="thick"><mn>1</mn><mn>2</mn></mfrac>
+      <mfrac linethickness="5"><mn>1</mn><mn>2</mn></mfrac>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-mrow-expected.html b/LayoutTests/mathml/presentation/fractions-mrow-expected.html
new file mode 100644
index 0000000..b29adf3
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-mrow-expected.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions color</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <math>
+      <mfrac>
+        <mtext><span style="display: inline-block; width: 3em; height: 1em; background: red;"></span></mtext>
+        <mtext><span style="display: inline-block; width: 5em; height: 1em; background: green;"></span></mtext>
+</mrow>
+</mfrac>
+</math>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-mrow.html b/LayoutTests/mathml/presentation/fractions-mrow.html
new file mode 100644
index 0000000..ecd2804
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-mrow.html
@@ -0,0 +1,28 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions color</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This verifies <mrow> elements can be used as the numerator/denominator. -->
+    <math>
+      <mfrac>
+        <mrow>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: red;"></span></mtext>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: red;"></span></mtext>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: red;"></span></mtext>
+        </mrow>
+        <mrow>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: green;"></span></mtext>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: green;"></span></mtext>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: green;"></span></mtext>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: green;"></span></mtext>
+          <mtext><span style="display: inline-block; width: 1em; height: 1em; background: green;"></span></mtext>
+        </mrow>
+      </mfrac>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-numalign-denomalign-expected.html b/LayoutTests/mathml/presentation/fractions-numalign-denomalign-expected.html
new file mode 100644
index 0000000..65de569
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-numalign-denomalign-expected.html
@@ -0,0 +1,59 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions numalign, denomalign</title>
+    <meta charset="utf-8"/>
+    <style>
+      span {
+      display: inline-block;
+      background: transparent;
+      border: 0;
+      margin: 0;
+      height: 1em;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- This test verifies the effect of the numalign, denomalign attributes -->
+    <math>
+      <mfrac>
+        <mtext><span style="width: 1em; background: red;"></span><span style="width: 2em;"></span></mtext>
+        <mtext><span style="width: 3em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac>
+        <mtext><span style="width: 1em;"></span><span style="width: 1em; background: red;"></span><span style="width: 1em;"></span></mtext>
+        <mtext><span style="width: 3em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac>
+        <mtext><span style="width: 2em;"></span><span style="width: 1em; background: red;"></span></mtext>
+        <mtext><span style="width: 3em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+
+    <math>
+      <mfrac>
+        <mtext><span style="width: 3em; background: red;"></span></mtext>
+        <mtext><span style="width: 1em; background: blue;"></span><span style="width: 2em;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac>
+        <mtext><span style="width: 3em; background: red;"></span></mtext>
+        <mtext><span style="width: 1em;"></span><span style="width: 1em; background: blue;"></span><span style="width: 1em;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac>
+        <mtext><span style="width: 3em; background: red;"></span></mtext>
+        <mtext><span style="width: 2em;"></span><span style="width: 1em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-numalign-denomalign.html b/LayoutTests/mathml/presentation/fractions-numalign-denomalign.html
new file mode 100644
index 0000000..eae1612
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-numalign-denomalign.html
@@ -0,0 +1,59 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions numalign, denomalign</title>
+    <meta charset="utf-8"/>
+    <style>
+      span {
+      display: inline-block;
+      background: transparent;
+      border: 0;
+      margin: 0;
+      height: 1em;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- This test verifies the effect of the numalign, denomalign attributes -->
+    <math>
+      <mfrac numalign="left">
+        <mtext><span style="width: 1em; background: red;"></span></mtext>
+        <mtext><span style="width: 3em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac numalign="center">
+        <mtext><span style="width: 1em; background: red;"></span></mtext>
+        <mtext><span style="width: 3em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac numalign="right">
+        <mtext><span style="width: 1em; background: red;"></span></mtext>
+        <mtext><span style="width: 3em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+
+    <math>
+      <mfrac denomalign="left">
+        <mtext><span style="width: 3em; background: red;"></span></mtext>
+        <mtext><span style="width: 1em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac denomalign="center">
+        <mtext><span style="width: 3em; background: red;"></span></mtext>
+        <mtext><span style="width: 1em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+    <math>
+      <mfrac denomalign="right">
+        <mtext><span style="width: 3em; background: red;"></span></mtext>
+        <mtext><span style="width: 1em; background: blue;"></span></mtext>
+      </mfrac>
+    </math>
+
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-positions-expected.html b/LayoutTests/mathml/presentation/fractions-positions-expected.html
new file mode 100644
index 0000000..d678800
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-positions-expected.html
@@ -0,0 +1,59 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions positions</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 8em; height: 8em;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td> 
+          <math>
+            <mfrac>
+              <mtext><span style="width: 2em; height: 1em;"></span></mtext>
+              <mtext><span style="width: 2em; height: 1em; background:blue;"></span></mtext>
+            </mfrac>
+          </math>
+        </td>
+        <td> 
+          <math>
+            <mfrac>
+              <mtext><span style="width: 2em; height: 1em; background:red;"></span></mtext>
+              <mtext><span style="width: 2em; height: 1em;"></span></mtext>
+            </mfrac>
+          </math>
+        </td>
+      </tr> 
+    </table>
+
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td> 
+          <span style="width: 2em; height: 2em; margin-bottom: 2em;"></span>
+        </td>
+        <td> 
+          <span style="width: 2em; height: 2em; margin-top: 2em;"></span>
+        </td>
+      </tr> 
+    </table>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-positions.html b/LayoutTests/mathml/presentation/fractions-positions.html
new file mode 100644
index 0000000..b85ceb6
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-positions.html
@@ -0,0 +1,62 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions positions</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 8em; height: 8em;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- This verifies the position of the numerator and denominator -->
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td> 
+          <math>
+            <mfrac>
+              <mtext><span style="width: 2em; height: 1em; background:red;"></span></mtext>
+              <mtext><span style="width: 2em; height: 1em; background:blue;"></span></mtext>
+            </mfrac>
+          </math>
+        </td>
+        <td> 
+          <math>
+            <mfrac>
+              <mtext><span style="width: 2em; height: 1em; background:red;"></span></mtext>
+              <mtext><span style="width: 2em; height: 1em; background:blue;"></span></mtext>
+            </mfrac>
+          </math>
+        </td>
+      </tr> 
+    </table>
+
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td> 
+          <!-- This should hide the numerator -->
+          <span style="width: 2em; height: 2em; margin-bottom: 2em;"></span>
+        </td>
+        <td> 
+          <!-- This should hide the denumerator -->
+          <span style="width: 2em; height: 2em; margin-top: 2em;"></span>
+        </td>
+      </tr> 
+    </table>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-vertical-alignment-expected.html b/LayoutTests/mathml/presentation/fractions-vertical-alignment-expected.html
new file mode 100644
index 0000000..9e05667
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-vertical-alignment-expected.html
@@ -0,0 +1,83 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions vertical aligment</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- Here the fraction bars are green but since they are hidden by the red
+         rectangle, that should not affect the rendering. -->
+    <div style="position: absolute; top: 10px; left: 10px;">
+      <math style="color: blue;">
+        <mrow>
+          <mspace height="10em" depth="10em"/>
+          <mfrac style="color: green;">
+            <mi style="color: blue;">B</mi>
+            <mi style="color: blue;">C</mi>
+          </mfrac>
+          <mo>+</mo>
+          <mfrac style="color: green;">
+            <mrow style="color: blue;">
+              <mi>B</mi>
+              <mo>+</mo>
+              <mfrac>
+                <mi>D</mi>
+                <mi>E</mi>
+              </mfrac>
+            </mrow>
+            <mi style="color: blue;">C</mi>
+          </mfrac>
+          <mo>+</mo>
+          <mfrac style="color: green;">
+            <mrow style="color: blue;">
+              <mi>B</mi>
+              <mo>+</mo>
+              <mfrac>
+                <mrow>
+                  <mi>D</mi>
+                  <mo>+</mo>
+                  <mfrac>
+                    <mi>F</mi>
+                    <mi>G</mi>
+                  </mfrac>
+                </mrow>
+                <mi>E</mi>
+              </mfrac>
+            </mrow>
+            <mi style="color: blue;">C</mi>
+          </mfrac>
+          <mo>+</mo>
+          <mfrac style="color: green;">
+            <mi style="color: blue;">B</mi>
+            <mrow style="color: blue;">
+              <mi>C</mi>
+              <mo>+</mo>
+              <mfrac>
+                <mi>D</mi>
+                <mrow>
+                  <mi>E</mi>
+                  <mo>+</mo>
+                  <mfrac>
+                    <mi>F</mi>
+                    <mi>G</mi>
+                  </mfrac>
+                </mrow>
+              </mfrac>
+            </mrow>
+          </mfrac>
+        </mrow> 
+      </math>
+    </div>
+
+    <div style="position: absolute; top: 10px; left: -1em;">
+      <math>
+        <mrow>
+          <mspace height="10em" depth="10em"/>
+          <mspace width="26em" height="1ex" depth="0" mathbackground="red"/>
+        </mrow>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/fractions-vertical-alignment.html b/LayoutTests/mathml/presentation/fractions-vertical-alignment.html
new file mode 100644
index 0000000..670e0f2
--- /dev/null
+++ b/LayoutTests/mathml/presentation/fractions-vertical-alignment.html
@@ -0,0 +1,83 @@
+<!doctype html>
+<html>
+  <head>
+    <title>fractions vertical aligment</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- The fraction bars should be vertically aligned and covered by the
+         red rectangle. -->
+    <div style="position: absolute; top: 10px; left: 10px;">
+      <math style="color: blue;">
+        <mrow>
+          <mspace height="10em" depth="10em"/>
+          <mfrac>
+            <mi>B</mi>
+            <mi>C</mi>
+          </mfrac>
+          <mo>+</mo>
+          <mfrac>
+            <mrow>
+              <mi>B</mi>
+              <mo>+</mo>
+              <mfrac>
+                <mi>D</mi>
+                <mi>E</mi>
+              </mfrac>
+            </mrow>
+            <mi>C</mi>
+          </mfrac>
+          <mo>+</mo>
+          <mfrac>
+            <mrow>
+              <mi>B</mi>
+              <mo>+</mo>
+              <mfrac>
+                <mrow>
+                  <mi>D</mi>
+                  <mo>+</mo>
+                  <mfrac>
+                    <mi>F</mi>
+                    <mi>G</mi>
+                  </mfrac>
+                </mrow>
+                <mi>E</mi>
+              </mfrac>
+            </mrow>
+            <mi>C</mi>
+          </mfrac>
+          <mo>+</mo>
+          <mfrac>
+            <mi>B</mi>
+            <mrow>
+              <mi>C</mi>
+              <mo>+</mo>
+              <mfrac>
+                <mi>D</mi>
+                <mrow>
+                  <mi>E</mi>
+                  <mo>+</mo>
+                  <mfrac>
+                    <mi>F</mi>
+                    <mi>G</mi>
+                  </mfrac>
+                </mrow>
+              </mfrac>
+            </mrow>
+          </mfrac>
+        </mrow> 
+      </math>
+    </div>
+
+    <div style="position: absolute; top: 10px; left: -1em;">
+      <math>
+        <mrow>
+          <mspace height="10em" depth="10em"/>
+          <mspace width="26em" height="1ex" depth="0" mathbackground="red"/>
+        </mrow>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfenced-add-child1-expected.html b/LayoutTests/mathml/presentation/mfenced-add-child1-expected.html
new file mode 100644
index 0000000..1bf1121
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfenced-add-child1-expected.html
@@ -0,0 +1,9 @@
+<html>
+<body>
+<p>For <a href="https://bugs.webkit.org/show_bug.cgi?id=84891">Bug 84891</a> -
+mfenced add/remove child confusion.</p>
+
+<p>This test passes if the mfenced is completely removed from the render tree,
+so e.g. no parentheses or commas are showing after this paragraph.</p>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfenced-add-child1.html b/LayoutTests/mathml/presentation/mfenced-add-child1.html
new file mode 100644
index 0000000..67b89ac
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfenced-add-child1.html
@@ -0,0 +1,30 @@
+<html>
+<body>
+<p>For <a href="https://bugs.webkit.org/show_bug.cgi?id=84891">Bug 84891</a> -
+mfenced add/remove child confusion.</p>
+
+<p>This test passes if the mfenced is completely removed from the render tree,
+so e.g. no parentheses or commas are showing after this paragraph.</p>
+
+<math>
+  <mfenced id="mfenced">
+    <mi id="mi1">b</mi>
+    <mi id="mi2">c</mi>
+  </mfenced>
+</math>
+</body>
+
+<script>
+var mfenced = document.getElementById("mfenced");
+
+document.getElementById("mi1").appendChild(document.createElement("div"));
+mfenced.appendChild(document.createElement("span"));
+
+var head = document.getElementsByTagName("head")[0];
+var style = document.createElement("style");
+style.appendChild(document.createTextNode("script{}"));
+head.appendChild(style);
+
+mfenced.parentNode.removeChild(mfenced);
+</script>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfenced-add-child2-expected.html b/LayoutTests/mathml/presentation/mfenced-add-child2-expected.html
new file mode 100644
index 0000000..8ff784d
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfenced-add-child2-expected.html
@@ -0,0 +1,16 @@
+<!DOCTYPE html>
+<html>
+<body>
+<p>For <a href="https://bugs.webkit.org/show_bug.cgi?id=84891">Bug 84891</a> -
+mfenced add/remove child confusion.</p>
+
+<p>This test passes if the math element is changed to (x1y).</p>
+
+<math>
+  <mfenced id="mfenced" separators="1">
+    <mi id="mi1">x</mi>
+    <mi id="mi2">y</mi>
+  </mfenced>
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfenced-add-child2.html b/LayoutTests/mathml/presentation/mfenced-add-child2.html
new file mode 100644
index 0000000..00e1262
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfenced-add-child2.html
@@ -0,0 +1,22 @@
+<!DOCTYPE html>
+<html>
+<body>
+<p>For <a href="https://bugs.webkit.org/show_bug.cgi?id=84891">Bug 84891</a> -
+mfenced add/remove child confusion.</p>
+
+<p>This test passes if the math element is changed to (x1y).</p>
+
+<math>
+  <mfenced id="mfenced" separators="12"></mfenced>
+  <mi id="mi1">x</mi>
+  <mi id="mi2">y</mi>
+</math>
+
+<script>
+var mfenced = document.getElementById("mfenced");
+var mi1 = document.getElementById("mi1"), mi2 = document.getElementById("mi2");
+mfenced.appendChild(mi2);
+mfenced.insertBefore(mi1, mi2);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfrac-linethickness1-expected-mismatch.html b/LayoutTests/mathml/presentation/mfrac-linethickness1-expected-mismatch.html
new file mode 100644
index 0000000..5f3c944
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-linethickness1-expected-mismatch.html
@@ -0,0 +1,11 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfrac linethickness</title>
+  </head>
+  <body>
+
+  <div style="position: absolute; top: 0; left: 0; width: 500px; height: 150px; background: blue;"></div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfrac-linethickness1.html b/LayoutTests/mathml/presentation/mfrac-linethickness1.html
new file mode 100644
index 0000000..ac591db
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-linethickness1.html
@@ -0,0 +1,21 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfrac linethickness</title>
+  </head>
+  <body>
+
+  <!-- This mfrac should be tall enough, or it will be hidden by the blue rectangle -->
+  <div style="position: absolute; top: 0; left: 0;">
+    <math>
+      <mfrac linethickness="200px">
+        <mi>x</mi>
+        <mi>y</mi>
+      </mfrac>
+    </math>
+  </div>
+
+  <div style="position: absolute; top: 0; left: 0; width: 500px; height: 150px; background: blue;"></div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfrac-linethickness2-expected.html b/LayoutTests/mathml/presentation/mfrac-linethickness2-expected.html
new file mode 100644
index 0000000..2f66d6f
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-linethickness2-expected.html
@@ -0,0 +1,30 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfrac linethickness</title>
+  </head>
+  <body>
+
+  <math>
+    <mfrac>
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  <math>
+    <mfrac linethickness="5">
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  <math>
+    <mfrac linethickness="0.388888889em">
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfrac-linethickness2.html b/LayoutTests/mathml/presentation/mfrac-linethickness2.html
new file mode 100644
index 0000000..05ea97c
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-linethickness2.html
@@ -0,0 +1,33 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfrac linethickness</title>
+  </head>
+  <body>
+
+  <!-- The linethickness should be ignored -->
+  <math>
+    <mfrac linethickness="-1.23em">
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  <!-- The linethickness should be 5 times the default value -->
+  <math>
+    <mfrac linethickness="500%">
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  <!-- The linethickness should be ~7/18em -->
+  <math>
+    <mfrac linethickness="veryverythickmathspace">
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfrac-linethickness3-expected-mismatch.html b/LayoutTests/mathml/presentation/mfrac-linethickness3-expected-mismatch.html
new file mode 100644
index 0000000..a962da1
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-linethickness3-expected-mismatch.html
@@ -0,0 +1,16 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfrac linethickness</title>
+  </head>
+  <body>
+
+  <math>
+    <mfrac>
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfrac-linethickness3.html b/LayoutTests/mathml/presentation/mfrac-linethickness3.html
new file mode 100644
index 0000000..4bf7fe0
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-linethickness3.html
@@ -0,0 +1,17 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mfrac linethickness</title>
+  </head>
+  <body>
+
+  <!-- The fraction bar should not be visible -->
+  <math>
+    <mfrac linethickness="0">
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mfrac-nested-expected.txt b/LayoutTests/mathml/presentation/mfrac-nested-expected.txt
new file mode 100644
index 0000000..7aa7147
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-nested-expected.txt
@@ -0,0 +1,12 @@
+This test passes if it does not time out.
+
+a
+b
+c
+d
+e
+f
+g
+h
+i
+
diff --git a/LayoutTests/mathml/presentation/mfrac-nested.html b/LayoutTests/mathml/presentation/mfrac-nested.html
new file mode 100644
index 0000000..be3907b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mfrac-nested.html
@@ -0,0 +1,44 @@
+<!DOCTYPE html>
+<html>
+<head>
+<script>
+if (window.testRunner)
+    testRunner.dumpAsText();
+</script>
+</head>
+<body>
+<p>This test passes if it does not time out.</p>
+<math display="block">
+<mrow>
+<mfrac>
+    <mi>a</mi>
+    <mfrac>
+        <mi>b</mi>
+        <mfrac>
+            <mi>c</mi>
+            <mfrac>
+                <mi>d</mi>
+                <mfrac>
+                    <mi>e</mi>
+                    <mfrac>
+                        <mi>f</mi>
+                        <mfrac>
+                            <mi>g</mi>
+                            <mfrac>
+                                <mi>h</mi>
+                                <mfrac>
+                                    <mi>i</mi>
+                                    <mo>j</mo>
+                                </mfrac>
+                            </mfrac>
+                        </mfrac>
+                    </mfrac>
+                </mfrac>
+            </mfrac>
+        </mfrac>
+    </mfrac>
+</mfrac>
+</mrow>
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mo.xhtml b/LayoutTests/mathml/presentation/mo.xhtml
new file mode 100644
index 0000000..d934e6b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mo.xhtml
@@ -0,0 +1,92 @@
+<html xmlns='http://www.w3.org/1999/xhtml'>
+<head>
+<title>Operator</title>
+<style type='text/css'>
+</style>
+</head>
+<body>
+<p id='t1'>operator: 
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='small'>&#x2211;</mo>
+</math>
+, operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='small'>B</mo>
+</math>
+, minus operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='small'>-</mo>
+</math>
+</p>
+<p id='t2'>operator: 
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='normal'>&#x2211;</mo>
+</math>
+, operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='normal'>B</mo>
+</math>
+, minus operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='normal'>-</mo>
+</math>
+</p>
+<p id='t3'>operator: 
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='big'>&#x2211;</mo>
+</math>
+, operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='big'>B</mo>
+</math>
+, minus operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='big'>-</mo>
+</math>
+</p>
+<p id='t4'>operator: 
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='small'>&#x2211;</mo>
+<mo mathsize='normal'>&#x2211;</mo>
+<mo mathsize='big'>&#x2211;</mo>
+</math>
+, operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='small'>B</mo>
+<mo mathsize='normal'>B</mo>
+<mo mathsize='big'>B</mo>
+</math>
+, minus operator:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo mathsize='small'>-</mo>
+<mo mathsize='normal'>-</mo>
+<mo mathsize='big'>-</mo>
+</math>
+</p>
+<p id='t5'>operator: 
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mo>|</mo>
+<mo>∫</mo>
+<mo>{</mo>
+<mo>[</mo>
+<mtext style='font-size: 50px'>
+<div style="display: inline-block; height: 50px; width: 50px; vertical-align: -33%; border: 1px solid black; margin-left: 2px; margin-right: 2px;"/>
+</mtext>
+<mo>]</mo>
+<mo>}</mo>
+</math>
+</p>
+
+<p id='t6'>
+    <math xmlns='http://www.w3.org/1998/Math/MathML' style='font-size: 3em'>
+        <mo>|</mo>
+        <mfrac>
+            <mi>f</mi>
+            <mi>g</mi>
+        </mfrac>
+        <mo>|</mo>
+    </math>
+</p>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mroot-pref-width-expected.html b/LayoutTests/mathml/presentation/mroot-pref-width-expected.html
new file mode 100644
index 0000000..8f42693
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mroot-pref-width-expected.html
@@ -0,0 +1,26 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mroot-pref-width</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- Use an <mphantom> so that the <mroot> element is always invisible. -->
+    <math>
+      <mtable>
+        <mtr>
+          <mtd style="border: solid 1px red; background: black;">
+            <mphantom>
+              <mroot>
+                <mi>x</mi>
+                <mn>1234567890</mn>
+              </mroot>
+            </mphantom>
+          </mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mroot-pref-width.html b/LayoutTests/mathml/presentation/mroot-pref-width.html
new file mode 100644
index 0000000..b164ac9
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mroot-pref-width.html
@@ -0,0 +1,26 @@
+<!doctype html>
+<html>
+  <head>
+    <title>mroot-pref-width</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This verifies whether the pref width of the <mroot> element is large
+         enough. If not, the width of the cell will not be large enough and
+         the left part of the <mroot> element will be visible. -->
+    <math>
+      <mtable>
+        <mtr>
+          <mtd style="border: solid 1px red; background: black;">
+            <mroot>
+              <mi>x</mi>
+              <mn>1234567890</mn>
+            </mroot>
+          </mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mspace-expected.html b/LayoutTests/mathml/presentation/mspace-expected.html
new file mode 100644
index 0000000..3a9e9d4
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mspace-expected.html
@@ -0,0 +1,27 @@
+<!DOCTYPE html>
+<html>
+
+<head>
+    <title>mspace</title>
+</head>
+
+<body>
+
+  <div style="position: absolute;
+	      top: 0; left: 0;
+	      width: 50px; height: 6em;
+	      background: red;"></div>
+
+  <div style="position: absolute;
+	      top: 2em; left: 50px;
+	      width: 40px; height: 3em;
+	      background: green;"></div>
+
+  <div style="position: absolute;
+	      top: 1em; left: 90px;
+	      width: 30px; height: 3em;
+	      background: blue;"></div>
+
+</body>
+
+</html>
diff --git a/LayoutTests/mathml/presentation/mspace-prefered-width-expected.html b/LayoutTests/mathml/presentation/mspace-prefered-width-expected.html
new file mode 100644
index 0000000..bdbe98b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mspace-prefered-width-expected.html
@@ -0,0 +1,25 @@
+<!doctype html>
+<html>
+<head>
+  <style type="text/css">
+    td {
+      border: 1px solid black;
+    }
+  </style>
+</head>
+<body>
+<table>
+  <tr>
+    <td>
+	 <span style="display: inline-block; width: 50px; height: 10px; background:green;"></span>
+	</td>
+    <td>
+	 <span style="display: inline-block; width: 50px; height: 10px; background:green; margin-right: 50px;"></span>
+	</td>
+    <td>
+	 <span style="display: inline-block; width: 50px; height: 10px; background:green; margin-right: -40px;"></span>
+	</td>
+  </tr>
+</table>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mspace-prefered-width.html b/LayoutTests/mathml/presentation/mspace-prefered-width.html
new file mode 100644
index 0000000..f4eb92d
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mspace-prefered-width.html
@@ -0,0 +1,35 @@
+<!doctype html>
+<html>
+<head>
+  <style type="text/css">
+    td {
+      border: 1px solid black;
+    }
+
+    math {
+        padding: 0px;
+    }
+  </style>
+</head>
+<body>
+<table>
+  <tr>
+    <td>
+	  <math>
+	    <mspace width="50px" height="10px" mathbackground="green"/>
+	  </math>
+	</td>
+    <td>
+	  <math>
+	    <mspace style="width: 100px;" width="50px" height="10px" mathbackground="green"/>
+	  </math>
+	</td>
+    <td>
+	  <math>
+	    <mspace style="width: 10px;" width="50px" height="10px" mathbackground="green"/>
+	  </math>
+	</td>
+  </tr>
+</table>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/mspace-units-expected.html b/LayoutTests/mathml/presentation/mspace-units-expected.html
new file mode 100644
index 0000000..751cbbf
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mspace-units-expected.html
@@ -0,0 +1,68 @@
+<!DOCTYPE html>
+<html>
+
+<head>
+    <title>mspace</title>
+</head>
+
+<body>
+
+  <math style="position: absolute; top: 0; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 5em; height: 10px;
+		   background:red;"></span>
+    </mtext>
+  </math>
+
+  <math style="position: absolute; top: 10px; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 60pt; height: 10px;
+		   background:green;"></span>
+    </mtext>
+  </math>
+
+  <math style="position: absolute; top: 20px; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 5pc; height: 10px;
+		   background:blue;"></span>
+    </mtext>
+  </math>
+
+  <math style="position: absolute; top: 30px; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 10ex; height: 10px;
+		   background:red;"></span>
+    </mtext>
+  </math>
+
+  <math style="position: absolute; top: 40px; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 50px; height: 10px;
+		   background:green;"></span>
+    </mtext>
+  </math>
+
+  <math style="position: absolute; top: 50px; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 1in; height: 10px;
+		   background:blue;"></span>
+    </mtext>
+  </math>
+
+  <math style="position: absolute; top: 60px; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 2.54cm; height: 10px;
+		   background:red;"></span>
+    </mtext>
+  </math>
+
+  <math style="position: absolute; top: 70px; left: 0; margin: 0; padding: 0;">
+    <mtext>
+      <span style="display: inline-block; width: 25.4mm; height: 10px;
+		   background:green;"></span>
+    </mtext>
+  </math>
+
+</body>
+
+</html>
diff --git a/LayoutTests/mathml/presentation/mspace-units.html b/LayoutTests/mathml/presentation/mspace-units.html
new file mode 100644
index 0000000..b2dc987
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mspace-units.html
@@ -0,0 +1,44 @@
+<!DOCTYPE html>
+<html>
+
+<head>
+    <title>mspace</title>
+</head>
+
+<body>
+
+  <math style="position: absolute; top: 0; left: 0; margin: 0; padding: 0;">
+    <mspace width="5em" height="10px" mathbackground="red"/>
+  </math>
+
+  <math style="position: absolute; top: 10px; left: 0; margin: 0; padding: 0;">
+    <mspace width="60pt" height="10px" mathbackground="green"/>
+  </math>
+
+  <math style="position: absolute; top: 20px; left: 0; margin: 0; padding: 0;">
+    <mspace width="5pc" height="10px" mathbackground="blue"/>
+  </math>
+
+  <math style="position: absolute; top: 30px; left: 0; margin: 0; padding: 0;">
+    <mspace width="10ex" height="10px" mathbackground="red"/>
+  </math>
+
+  <math style="position: absolute; top: 40px; left: 0; margin: 0; padding: 0;">
+    <mspace width="50px" height="10px" mathbackground="green"/>
+  </math>
+
+  <math style="position: absolute; top: 50px; left: 0; margin: 0; padding: 0;">
+    <mspace width="1in" height="10px" mathbackground="blue"/>
+  </math>
+
+  <math style="position: absolute; top: 60px; left: 0; margin: 0; padding: 0;">
+    <mspace width="2.54cm" height="10px" mathbackground="red"/>
+  </math>
+
+  <math style="position: absolute; top: 70px; left: 0; margin: 0; padding: 0;">
+    <mspace width="25.4mm" height="10px" mathbackground="green"/>
+  </math>
+
+</body>
+
+</html>
diff --git a/LayoutTests/mathml/presentation/mspace.html b/LayoutTests/mathml/presentation/mspace.html
new file mode 100644
index 0000000..76d76a9
--- /dev/null
+++ b/LayoutTests/mathml/presentation/mspace.html
@@ -0,0 +1,18 @@
+<!DOCTYPE html>
+<html>
+
+<head>
+    <title>mspace</title>
+</head>
+
+<body>
+
+  <math style="position: absolute; top: 0; left: 0; margin: 0; padding: 0;">
+    <mspace width="50px" height="3em" depth="3em" mathbackground="red"/>
+    <mspace width="40px" height="1em" depth="2em" mathbackground="green"/>
+    <mspace width="30px" height="2em" depth="1em" mathbackground="blue"/>
+  </math>
+
+</body>
+
+</html>
diff --git a/LayoutTests/mathml/presentation/msub-base-changed-expected.html b/LayoutTests/mathml/presentation/msub-base-changed-expected.html
new file mode 100644
index 0000000..3fa0dba
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msub-base-changed-expected.html
@@ -0,0 +1,6 @@
+<!DOCTYPE html>
+<p> 
+<math> 
+<msub id="sub"><mi>y</mi><mn>1</mn></msub> 
+</math> 
+</p> 
diff --git a/LayoutTests/mathml/presentation/msub-base-changed.xhtml b/LayoutTests/mathml/presentation/msub-base-changed.xhtml
new file mode 100644
index 0000000..5fff321
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msub-base-changed.xhtml
@@ -0,0 +1,19 @@
+<html xmlns='http://www.w3.org/1999/xhtml'> 
+<head> 
+<title>msub javascript base change test</title> 
+</head> 
+<body> 
+<p> 
+<math xmlns='http://www.w3.org/1998/Math/MathML'> 
+<msub id="sub"><mi>x</mi><mn>1</mn></msub> 
+</math> 
+</p> 
+<script type='text/javascript'>
+var msub = document.getElementById("sub");
+msub.removeChild(msub.firstChild);
+var base = document.createElementNS("http://www.w3.org/1998/Math/MathML","mi");
+base.appendChild(document.createTextNode("y"));
+msub.insertBefore(base,msub.firstChild);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/msub-sub-changed-expected.html b/LayoutTests/mathml/presentation/msub-sub-changed-expected.html
new file mode 100644
index 0000000..646546e
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msub-sub-changed-expected.html
@@ -0,0 +1,6 @@
+<!DOCTYPE html>
+<p> 
+<math> 
+<msub id="sub"><mi>x</mi><mn>2</mn></msub> 
+</math> 
+</p> 
diff --git a/LayoutTests/mathml/presentation/msub-sub-changed.xhtml b/LayoutTests/mathml/presentation/msub-sub-changed.xhtml
new file mode 100644
index 0000000..4811b43
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msub-sub-changed.xhtml
@@ -0,0 +1,19 @@
+<html xmlns='http://www.w3.org/1999/xhtml'> 
+<head> 
+<title>msub javascript subscript change test</title> 
+</head> 
+<body> 
+<p> 
+<math xmlns='http://www.w3.org/1998/Math/MathML'> 
+<msub id="sub"><mi>x</mi><mn>1</mn></msub> 
+</math> 
+</p> 
+<script type='text/javascript'>
+var msub = document.getElementById("sub");
+msub.removeChild(msub.firstChild.nextSibling);
+var sub = document.createElementNS("http://www.w3.org/1998/Math/MathML","mn");
+sub.appendChild(document.createTextNode("2"));
+msub.appendChild(sub);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/msubsup-base-changed-expected.html b/LayoutTests/mathml/presentation/msubsup-base-changed-expected.html
new file mode 100644
index 0000000..41577b9
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msubsup-base-changed-expected.html
@@ -0,0 +1,6 @@
+<!DOCTYPE html>
+<p> 
+<math> 
+<msubsup><mi>y</mi><mn>1</mn><mi>k</mi></msubsup> 
+</math> 
+</p> 
diff --git a/LayoutTests/mathml/presentation/msubsup-base-changed.xhtml b/LayoutTests/mathml/presentation/msubsup-base-changed.xhtml
new file mode 100644
index 0000000..a8e0c74
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msubsup-base-changed.xhtml
@@ -0,0 +1,19 @@
+<html xmlns='http://www.w3.org/1999/xhtml'> 
+<head> 
+<title>msubsup javascript base change test</title> 
+</head> 
+<body> 
+<p> 
+<math xmlns='http://www.w3.org/1998/Math/MathML'> 
+<msubsup id="subsup"><mi>x</mi><mn>1</mn><mi>k</mi></msubsup> 
+</math> 
+</p> 
+<script type='text/javascript'>
+var msubsup = document.getElementById("subsup");
+msubsup.removeChild(msubsup.firstChild);
+var base = document.createElementNS("http://www.w3.org/1998/Math/MathML","mi");
+base.appendChild(document.createTextNode("y"));
+msubsup.insertBefore(base,msubsup.firstChild);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/msubsup-sub-changed-expected.html b/LayoutTests/mathml/presentation/msubsup-sub-changed-expected.html
new file mode 100644
index 0000000..044046e
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msubsup-sub-changed-expected.html
@@ -0,0 +1,6 @@
+<!DOCTYPE html>
+<p> 
+<math> 
+<msubsup><mi>x</mi><mn>2</mn><mi>k</mi></msubsup> 
+</math> 
+</p> 
diff --git a/LayoutTests/mathml/presentation/msubsup-sub-changed.xhtml b/LayoutTests/mathml/presentation/msubsup-sub-changed.xhtml
new file mode 100644
index 0000000..6f66a35
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msubsup-sub-changed.xhtml
@@ -0,0 +1,19 @@
+<html xmlns='http://www.w3.org/1999/xhtml'> 
+<head> 
+<title>msubsup javascript subscript change test</title> 
+</head> 
+<body> 
+<p> 
+<math xmlns='http://www.w3.org/1998/Math/MathML'> 
+<msubsup id="subsup"><mi>x</mi><mn>1</mn><mi>k</mi></msubsup> 
+</math> 
+</p> 
+<script type='text/javascript'>
+var msubsup = document.getElementById("subsup");
+msubsup.removeChild(msubsup.firstChild.nextSibling);
+var sub = document.createElementNS("http://www.w3.org/1998/Math/MathML","mn");
+sub.appendChild(document.createTextNode("2"));
+msubsup.insertBefore(sub,msubsup.firstChild.nextSibling);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/msubsup-sup-changed-expected.html b/LayoutTests/mathml/presentation/msubsup-sup-changed-expected.html
new file mode 100644
index 0000000..8c9cb5f
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msubsup-sup-changed-expected.html
@@ -0,0 +1,6 @@
+<!DOCTYPE html>
+<p> 
+<math> 
+<msubsup><mi>x</mi><mn>1</mn><mi>j</mi></msubsup> 
+</math> 
+</p> 
diff --git a/LayoutTests/mathml/presentation/msubsup-sup-changed.xhtml b/LayoutTests/mathml/presentation/msubsup-sup-changed.xhtml
new file mode 100644
index 0000000..0a69740
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msubsup-sup-changed.xhtml
@@ -0,0 +1,19 @@
+<html xmlns='http://www.w3.org/1999/xhtml'> 
+<head> 
+<title>msubsup javascript superscript change test</title> 
+</head> 
+<body> 
+<p> 
+<math xmlns='http://www.w3.org/1998/Math/MathML'> 
+<msubsup id="subsup"><mi>x</mi><mn>1</mn><mi>k</mi></msubsup> 
+</math> 
+</p> 
+<script type='text/javascript'>
+var msubsup = document.getElementById("subsup");
+msubsup.removeChild(msubsup.firstChild.nextSibling.nextSibling);
+var sup = document.createElementNS("http://www.w3.org/1998/Math/MathML","mi");
+sup.appendChild(document.createTextNode("j"));
+msubsup.appendChild(sup);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/msup-base-changed-expected.html b/LayoutTests/mathml/presentation/msup-base-changed-expected.html
new file mode 100644
index 0000000..56d7e5f
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msup-base-changed-expected.html
@@ -0,0 +1,6 @@
+<!DOCTYPE html>
+<p> 
+<math> 
+<msup><mi>y</mi><mn>1</mn></msub> 
+</math> 
+</p> 
diff --git a/LayoutTests/mathml/presentation/msup-base-changed.xhtml b/LayoutTests/mathml/presentation/msup-base-changed.xhtml
new file mode 100644
index 0000000..88cc4f9
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msup-base-changed.xhtml
@@ -0,0 +1,19 @@
+<html xmlns='http://www.w3.org/1999/xhtml'> 
+<head> 
+<title>msup javascript base change test</title> 
+</head> 
+<body> 
+<p> 
+<math xmlns='http://www.w3.org/1998/Math/MathML'> 
+<msup id="sup"><mi>x</mi><mn>1</mn></msup> 
+</math> 
+</p> 
+<script type='text/javascript'>
+var msup = document.getElementById("sup");
+msup.removeChild(msup.firstChild);
+var base = document.createElementNS("http://www.w3.org/1998/Math/MathML","mi");
+base.appendChild(document.createTextNode("y"));
+msup.insertBefore(base,msup.firstChild);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/msup-sup-changed-expected.html b/LayoutTests/mathml/presentation/msup-sup-changed-expected.html
new file mode 100644
index 0000000..b3362c8
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msup-sup-changed-expected.html
@@ -0,0 +1,6 @@
+<!DOCTYPE html>
+<p> 
+<math> 
+<msup><mi>x</mi><mn>2</mn></msub> 
+</math> 
+</p> 
diff --git a/LayoutTests/mathml/presentation/msup-sup-changed.xhtml b/LayoutTests/mathml/presentation/msup-sup-changed.xhtml
new file mode 100644
index 0000000..3287654
--- /dev/null
+++ b/LayoutTests/mathml/presentation/msup-sup-changed.xhtml
@@ -0,0 +1,19 @@
+<html xmlns='http://www.w3.org/1999/xhtml'> 
+<head> 
+<title>msup javascript superscript change test</title> 
+</head> 
+<body> 
+<p> 
+<math xmlns='http://www.w3.org/1998/Math/MathML'> 
+<msup id="sup"><mi>x</mi><mn>1</mn></msup> 
+</math> 
+</p> 
+<script type='text/javascript'>
+var msup = document.getElementById("sup");
+msup.removeChild(msup.firstChild.nextSibling);
+var sup = document.createElementNS("http://www.w3.org/1998/Math/MathML","mn");
+sup.appendChild(document.createTextNode("2"));
+msup.appendChild(sup);
+</script>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/phantom-expected.html b/LayoutTests/mathml/presentation/phantom-expected.html
new file mode 100644
index 0000000..38745b9
--- /dev/null
+++ b/LayoutTests/mathml/presentation/phantom-expected.html
@@ -0,0 +1,31 @@
+<!doctype html>
+<html>
+  <head>
+    <title>phantom</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body style="background: white;">
+
+    <math>
+      <mfrac>
+        <mtext>mphantom</mtext>
+        <mrow>
+          <mo>[</mo>
+          <mphantom style="color: white;">
+            <mo>(</mo>
+            <mn>2</mn>
+            <mo>+</mo>
+            <msqrt>
+              <mfrac>
+                <mi>x</mi>
+                <mi>y</mi>
+              </mfrac>
+            </msqrt>
+          </mphantom>
+          <mo>]</mo>
+        </mrow>
+      </mfrac>
+    </math>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/phantom.html b/LayoutTests/mathml/presentation/phantom.html
new file mode 100644
index 0000000..60843c6
--- /dev/null
+++ b/LayoutTests/mathml/presentation/phantom.html
@@ -0,0 +1,33 @@
+<!doctype html>
+<html>
+  <head>
+    <title>phantom</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body style="background: white;">
+
+    <!-- The <mphantom> element should be invisible but should have the size
+         of its content. -->
+    <math>
+      <mfrac>
+        <mtext>mphantom</mtext>
+        <mrow>
+          <mo>[</mo>
+          <mphantom>
+            <mo>(</mo>
+            <mn>2</mn>
+            <mo>+</mo>
+            <msqrt>
+              <mfrac>
+                <mi>x</mi>
+                <mi>y</mi>
+              </mfrac>
+            </msqrt>
+          </mphantom>
+          <mo>]</mo>
+        </mrow>
+      </mfrac>
+    </math>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/positive-namedspace-expected.html b/LayoutTests/mathml/presentation/positive-namedspace-expected.html
new file mode 100644
index 0000000..c362b85
--- /dev/null
+++ b/LayoutTests/mathml/presentation/positive-namedspace-expected.html
@@ -0,0 +1,53 @@
+<html>	
+  <head></head>
+  <body>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="0.0555555556em"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="0.111111111em"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="0.166666667em"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="0.222222222em"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="0.277777778em"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="0.333333333em"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="0.388888889em"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>	
+  </body>	    
+</html>
diff --git a/LayoutTests/mathml/presentation/positive-namedspace.html b/LayoutTests/mathml/presentation/positive-namedspace.html
new file mode 100644
index 0000000..bc8b60b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/positive-namedspace.html
@@ -0,0 +1,54 @@
+<html>	
+  <head></head>
+  <body>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="veryverythinmathspace"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="verythinmathspace"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="thinmathspace"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="mediummathspace"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="thickmathspace"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="verythickmathspace"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+    <p>
+      <math>
+	<mrow>
+	  <mi>x</mi> <mspace width="veryverythickmathspace"></mspace> <mi>y</mi> 
+	</mrow>
+      </math>
+    </p>
+  </body>	    
+</html>
diff --git a/LayoutTests/mathml/presentation/row.xhtml b/LayoutTests/mathml/presentation/row.xhtml
new file mode 100644
index 0000000..4a94d6f
--- /dev/null
+++ b/LayoutTests/mathml/presentation/row.xhtml
@@ -0,0 +1,127 @@
+<html xmlns='http://www.w3.org/1999/xhtml'>
+<head>
+<title>Rows and Operators</title>
+<style type="text/css">
+mo {
+   background-color: rgb(200,200,200);
+}
+.box {
+   display: inline-block; vertical-align: -33%; height: 1em; width: 1em; background-color: rgb(0,255,0)
+}
+body {
+   overflow: hidden;
+}
+</style>
+</head>
+<body>
+<p>
+<math xmlns='http://www.w3.org/1998/Math/MathML'><mi>x</mi><mo>+</mo><mn>1</mn></math>
+</p>
+<p id='t1'>
+16px:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow>
+<mo>{</mo><mi>x</mi><mtext style='font-size: 16px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>}</mo>
+</mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>[</mo><mi>x</mi><mtext style='font-size: 16px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>]</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>(</mo><mi>x</mi><mtext style='font-size: 16px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>)</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>|</mo><mi>x</mi><mtext style='font-size: 16px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>|</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>&#x222b;</mo><mi>x</mi><mtext style='font-size: 16px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext></mrow>
+</math>
+</p>
+<p id='t2'>
+24px:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>{</mo><mi>x</mi><mtext style='font-size: 24px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>}</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>[</mo><mi>x</mi><mtext style='font-size: 24px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>]</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>(</mo><mi>x</mi><mtext style='font-size: 24px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>)</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>|</mo><mi>x</mi><mtext style='font-size: 24px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>|</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>&#x222b;</mo><mi>x</mi><mtext style='font-size: 24px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext></mrow>
+</math>
+</p>
+<p id='t3'>
+32px:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>{</mo><mi>x</mi><mtext style='font-size: 32px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>}</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>[</mo><mi>x</mi><mtext style='font-size: 32px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>]</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>(</mo><mi>x</mi><mtext style='font-size: 32px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>)</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>|</mo><mi>x</mi><mtext style='font-size: 32px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>|</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>&#x222b;</mo><mi>x</mi><mtext style='font-size: 32px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext></mrow>
+</math>
+</p>
+<p id='t4'>
+48px:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>{</mo><mi>x</mi><mtext style='font-size: 48px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>}</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>[</mo><mi>x</mi><mtext style='font-size: 48px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>]</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>(</mo><mi>x</mi><mtext style='font-size: 48px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>)</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>|</mo><mi>x</mi><mtext style='font-size: 48px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext><mo>|</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>&#x222b;</mo><mi>x</mi><mtext style='font-size: 48px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext></mrow>
+</math>
+</p>
+<p id='t1'>
+120px:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>{</mo><mi>x</mi><mtext style='font-size: 120px'><div xmlns='http://www.w3.org/1999/xhtml' class='box' style='width: 48px'/></mtext><mo>}</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>[</mo><mi>x</mi><mtext style='font-size: 120px'><div xmlns='http://www.w3.org/1999/xhtml' class='box' style='width: 48px'/></mtext><mo>]</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>(</mo><mi>x</mi><mtext style='font-size: 120px'><div xmlns='http://www.w3.org/1999/xhtml' class='box' style='width: 48px'/></mtext><mo>)</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>|</mo><mi>x</mi><mtext style='font-size: 120px'><div xmlns='http://www.w3.org/1999/xhtml' class='box' style='width: 48px'/></mtext><mo>|</mo></mrow>
+</math>
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow><mo>&#x222b;</mo><mi>x</mi><mtext style='font-size: 120px'><div xmlns='http://www.w3.org/1999/xhtml' class='box' style='width: 48px'/></mtext></mrow>
+</math>
+</p>
+<p id='t5'>
+40px:
+<math xmlns='http://www.w3.org/1998/Math/MathML'>
+<mrow>
+<mo>(</mo><mi>x</mi><mo>,</mo>
+<mtext style='font-size: 40px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext>
+<mo>,</mo>
+<mtext style='font-size: 40px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext>
+<mo>,</mo>
+<mtext style='font-size: 40px'><div xmlns='http://www.w3.org/1999/xhtml' class='box'/></mtext>
+<mo>)</mo>
+</mrow>
+</math>
+</p>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-font-size-expected-mismatch.html b/LayoutTests/mathml/presentation/scripts-font-size-expected-mismatch.html
new file mode 100644
index 0000000..8d4ba2e
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-font-size-expected-mismatch.html
@@ -0,0 +1,17 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-font-size</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <math>
+      <munder>
+        <mi>A</mi>
+        <mi>B</mi>
+      </munder>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-font-size.html b/LayoutTests/mathml/presentation/scripts-font-size.html
new file mode 100644
index 0000000..3fda4e8
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-font-size.html
@@ -0,0 +1,19 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-font-size</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This test verifies that the font-size in scripts is indeed changed.
+         Forcing it to 1em should not be like the default. -->
+    <math>
+      <munder>
+        <mi>A</mi>
+        <mi style="font-size: 1em !important">B</mi>
+      </munder>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-height-expected.html b/LayoutTests/mathml/presentation/scripts-height-expected.html
new file mode 100644
index 0000000..fa7cbc9
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-height-expected.html
@@ -0,0 +1,94 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-height</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 100px; height: 100px;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      padding: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- base with large height: the script are shifted to the top/bottom
+         of the cell and should be hidden by the black rectangles -->
+    <div style="position: absolute; top: 10px; left: 10px;">
+      <table>
+        <tr>
+          <td>
+            <math>
+              <msubsup>
+                <mspace height="40px" depth="40px"/>
+                <mspace width="10px" height="5px" depth="5px"/>
+                <mspace width="10px" height="5px" depth="5px"/>
+              </msubsup>
+            </math>
+          </td>
+        </tr>
+      </table>
+    </div>
+    <div style="position: absolute; top: 10px; left: 10px;">
+      <table>
+        <tr>
+          <td style="vertical-align: top">
+            <span style="width: 20px; height: 20px;"></span>
+          </td>
+        </tr>
+      </table>
+    </div>
+    <div  style="position: absolute; top: 10px; left: 10px;">
+      <table>
+        <tr>
+          <td style="vertical-align: bottom">
+            <span style="width: 20px; height: 20px;"></span>
+          </td>
+        </tr>
+      </table>
+    </div>
+
+    <!-- scripts of different heights: they should all be aligned in the
+         middle of the cell -->
+    <div style="position: absolute; top: 10px; left: 120px;">
+      <table>
+        <tr>
+          <td style="width: 14em; height: 14em;">
+            <math>
+              <mspace height="7em" depth="7em"/>
+              <mi>x</mi>
+              <msubsup>
+                <mi>x</mi>
+                <mspace/>
+                <mspace/>
+              </msubsup>
+              <msubsup>
+                <mi>x</mi>
+                <mspace/>
+                <mspace/>
+              </msubsup>
+              <msubsup>
+                <mi>x</mi>
+                <mspace/>
+                <mspace/>
+              </msubsup>
+            </math>
+          </td>
+        </tr>
+      </table>
+    </div>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-height.html b/LayoutTests/mathml/presentation/scripts-height.html
new file mode 100644
index 0000000..1f74caa
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-height.html
@@ -0,0 +1,96 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-height</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 100px; height: 100px;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      padding: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- base with large height: the script are shifted to the top/bottom
+         of the cell and should be hidden by the black rectangles -->
+    <div style="position: absolute; top: 10px; left: 10px;">
+      <table>
+        <tr>
+          <td>
+            <math>
+              <msubsup>
+                <mspace height="40px" depth="40px"/>
+                <mspace width="10px" height="5px" depth="5px"
+                        mathbackground="red"/>
+                <mspace width="10px" height="5px" depth="5px"
+                        mathbackground="blue"/>
+              </msubsup>
+            </math>
+          </td>
+        </tr>
+      </table>
+    </div>
+    <div style="position: absolute; top: 10px; left: 10px;">
+      <table>
+        <tr>
+          <td style="vertical-align: top">
+            <span style="width: 20px; height: 20px;"></span>
+          </td>
+        </tr>
+      </table>
+    </div>
+    <div  style="position: absolute; top: 10px; left: 10px;">
+      <table>
+        <tr>
+          <td style="vertical-align: bottom">
+            <span style="width: 20px; height: 20px;"></span>
+          </td>
+        </tr>
+      </table>
+    </div>
+
+    <!-- scripts of different heights: they should all be aligned in the
+         middle of the cell -->
+    <div style="position: absolute; top: 10px; left: 120px;">
+      <table>
+        <tr>
+          <td style="width: 14em; height: 14em;">
+            <math>
+              <mspace height="7em" depth="7em"/>
+              <mi>x</mi>
+              <msubsup>
+                <mi>x</mi>
+                <mspace height="4em"/>
+                <mspace height="1em"/>
+              </msubsup>
+              <msubsup>
+                <mi>x</mi>
+                <mspace height="1em"/>
+                <mspace height="4em"/>
+              </msubsup>
+              <msubsup>
+                <mi>x</mi>
+                <mspace height="4em"/>
+                <mspace height="4em"/>
+              </msubsup>
+            </math>
+          </td>
+        </tr>
+      </table>
+    </div>
+    
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-mrow-expected.html b/LayoutTests/mathml/presentation/scripts-mrow-expected.html
new file mode 100644
index 0000000..f8e56e0
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-mrow-expected.html
@@ -0,0 +1,53 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-mrow</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- Wrapping msubsup in an mrow should not affect the rendering -->
+    <p>
+      <math>
+        <msubsup><mi>x</mi><mn>1</mn><mi>k</mi></msubsup>
+      </math>
+    </p>
+
+    <!-- Using mrow to group sub/sup scripts: three mspaces of width 10px
+         should render the same as one of width 30px -->
+    <p>
+      <math>
+          <msubsup>
+            <mn>1</mn>
+            <mspace width="30px" height="10px" depth="10px"
+                      mathbackground="red"/>
+            <mspace width="10px" height="10px" depth="10px"
+                    mathbackground="green"/>
+          </msubsup>
+      </math>
+    </p>
+    <p>
+      <math>
+          <msubsup>
+            <mn>2</mn>
+            <mspace width="10px" height="10px" depth="10px"
+                    mathbackground="red"/>
+            <mspace width="30px" height="10px" depth="10px"
+                    mathbackground="green"/>
+          </msubsup>
+      </math>
+    </p>
+    <p>
+      <math>
+          <msubsup>
+            <mn>3</mn>
+            <mspace width="30px" height="10px" depth="10px"
+                    mathbackground="red"/>
+            <mspace width="30px" height="10px" depth="10px"
+                    mathbackground="green"/>
+          </msubsup>
+      </math>
+    </p>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-mrow.html b/LayoutTests/mathml/presentation/scripts-mrow.html
new file mode 100644
index 0000000..e08f522
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-mrow.html
@@ -0,0 +1,79 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-mrow</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- Wrapping msubsup in an mrow should not affect the rendering -->
+    <p>
+      <math>
+        <mrow>
+          <msubsup><mi>x</mi><mn>1</mn><mi>k</mi></msubsup>
+        </mrow>
+      </math>
+    </p>
+
+    <!-- Using mrow to group sub/sup scripts: three mspaces of width 10px
+         should render the same as one of width 30px -->
+    <p>
+      <math>
+          <msubsup>
+            <mn>1</mn>
+            <mrow>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+            </mrow>
+            <mspace width="10px" height="10px" depth="10px"
+                    mathbackground="green"/>
+          </msubsup>
+      </math>
+    </p>
+    <p>
+      <math>
+          <msubsup>
+            <mn>2</mn>
+            <mspace width="10px" height="10px" depth="10px"
+                    mathbackground="red"/>
+            <mrow>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="green"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="green"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="green"/>
+            </mrow>
+          </msubsup>
+      </math>
+    </p>
+    <p>
+      <math>
+          <msubsup>
+            <mn>3</mn>
+            <mrow>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+            </mrow>
+            <mrow>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="green"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="green"/>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="green"/>
+            </mrow>
+          </msubsup>
+      </math>
+    </p>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-subsup-expected.html b/LayoutTests/mathml/presentation/scripts-subsup-expected.html
new file mode 100644
index 0000000..2db7737
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-subsup-expected.html
@@ -0,0 +1,145 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 100px; height: 100px;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- The sub/sup scripts should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <math>
+            <msub>
+              <mtext>X</mtext>
+              <mtext style="visibility: hidden;">X</mtext>
+            </msub>
+          </math>
+        </td>
+        <td style="text-align: left;">
+          <math>
+            <msubsup>
+              <mtext>X</mtext>
+              <mtext style="visibility: hidden;">X</mtext>
+              <mtext style="visibility: hidden;">X</mtext>
+            </msubsup>
+          </math>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <math>
+            <msup>
+              <mtext>X</mtext>
+              <mtext style="visibility: hidden;">X</mtext>
+            </msup>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <span style="visibility: hidden;">X</span><span style="vertical-align: -25%;">X</span>
+        </td>
+        <td style="text-align: left;">
+          <span style="visibility: hidden;">X</span><span>X<br/>X</span>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <span style="visibility: hidden;">X</span><span style="vertical-align: +25%;">X</span>
+        </td>
+      </tr>
+    </table>
+
+    <!-- The bases should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <math>
+            <msub>
+              <mtext style="visibility: hidden;">X</mtext>
+              <mtext>X</mtext>
+            </msub>
+          </math>
+        </td>
+        <td style="text-align: left;">
+          <math>
+            <msubsup>
+              <mtext style="visibility: hidden;">X</mtext>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+            </msubsup>
+          </math>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <math>
+            <msup>
+              <mtext style="visibility: hidden;">X</mtext>
+              <mtext>X</mtext>
+            </msup>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <span>X</span>
+        </td>
+        <td style="text-align: left;">
+          <span>X</span>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <span>X</span>
+        </td>
+      </tr>
+    </table>
+
+    <div style="position: absolute; top: 250px; left: 10px;">
+      <math>
+        <msub>
+          <mi>A</mi>
+          <mi>B</mi>
+        </msub>
+        <msup>
+          <mi>A</mi>
+          <mi>B</mi>
+        </msup>
+        <msubsup>
+          <mi>A</mi>
+          <mi>B</mi>
+          <mi>C</mi>
+        </msubsup>
+      </math>
+      <math>
+        <msub>
+          <mi>A</mi>
+          <mi>B</mi>
+        </msub>
+        <msup>
+          <mi>A</mi>
+          <mi>B</mi>
+        </msup>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-subsup.html b/LayoutTests/mathml/presentation/scripts-subsup.html
new file mode 100644
index 0000000..b305c5b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-subsup.html
@@ -0,0 +1,154 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 100px; height: 100px;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- The sub/sup scripts should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <math>
+            <msub>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+            </msub>
+          </math>
+        </td>
+        <td style="text-align: left;">
+          <math>
+            <msubsup>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+            </msubsup>
+          </math>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <math>
+            <msup>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+            </msup>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <span style="visibility: hidden;">X</span><span style="vertical-align: -25%;">X</span>
+        </td>
+        <td style="text-align: left;">
+          <span style="visibility: hidden;">X</span><span>X<br/>X</span>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <span style="visibility: hidden;">X</span><span style="vertical-align: +25%;">X</span>
+        </td>
+      </tr>
+    </table>
+
+    <!-- The bases should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <math>
+            <msub>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+            </msub>
+          </math>
+        </td>
+        <td style="text-align: left;">
+          <math>
+            <msubsup>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+            </msubsup>
+          </math>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <math>
+            <msup>
+              <mtext>X</mtext>
+              <mtext>X</mtext>
+            </msup>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="text-align: left; vertical-align: top;">
+          <span>X</span>
+        </td>
+        <td style="text-align: left;">
+          <span>X</span>
+        </td>
+        <td style="text-align: left; vertical-align: bottom;">
+          <span>X</span>
+        </td>
+      </tr>
+    </table>
+
+    <div style="position: absolute; top: 250px; left: 10px;">
+      <!-- This verifies that the scripts are drawn smaller. Note: WebKit does
+           not currently implement scriptlevel and only sets the size to
+           0.75em. See bug 118738. -->
+      <math>
+        <msub>
+          <mi>A</mi>
+          <mi style="font-size: 0.75em !important">B</mi>
+        </msub>
+        <msup>
+          <mi>A</mi>
+          <mi style="font-size: 0.75em !important">B</mi>
+        </msup>
+        <msubsup>
+          <mi>A</mi>
+          <mi style="font-size: 0.75em !important">B</mi>
+          <mi style="font-size: 0.75em !important">C</mi>
+        </msubsup>
+      </math>
+
+      <!-- This verifies that <msubsup> with an empty script is
+           equivalent to the corresponding constructions with only one script.
+        -->
+      <math>
+        <msubsup>
+          <mi>A</mi>
+          <mi>B</mi>
+          <mspace/>
+        </msubsup>
+        <msubsup>
+          <mi>A</mi>
+          <mspace/>
+          <mi>B</mi>
+        </msubsup>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-underover-expected.html b/LayoutTests/mathml/presentation/scripts-underover-expected.html
new file mode 100644
index 0000000..00e0b22
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-underover-expected.html
@@ -0,0 +1,145 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 100px; height: 100px;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- The under/over scripts should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <math>
+            <munder>
+              <mspace width="20px" height="20px" depth="0px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px"/>
+            </munder>
+          </math>
+        </td>
+        <td>
+          <math>
+            <munderover>
+              <mspace width="20px" height="10px" depth="10px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px"/>
+              <mspace width="10px" height="5px" depth="5px"/>
+            </munderover>
+          </math>
+        </td>
+        <td  style="vertical-align: bottom;">
+          <math>
+            <mover>
+              <mspace width="20px" height="20px" depth="0px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px"/>
+            </mover>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <span style="width: 12px; height: 50px;"></span>
+        </td>
+        <td>
+          <span style="width: 12px; height: 50px;"></span>
+        </td>
+        <td  style="vertical-align: bottom;">
+          <span style="width: 12px; height: 50px;"></span>
+        </td>
+      </tr>
+    </table>
+
+    <!-- The bases should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <math>
+            <munder>
+              <mspace width="20px" height="20px" depth="0px"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="green"/>
+            </munder>
+          </math>
+        </td>
+        <td>
+          <math>
+            <munderover>
+              <mspace width="20px" height="10px" depth="10px"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="green"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="blue"/>
+            </munderover>
+          </math>
+        </td>
+        <td  style="vertical-align: bottom;">
+          <math>
+            <mover>
+              <mspace width="20px" height="20px" depth="0px"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="blue"/>
+            </mover>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <span style="width: 25px; height: 25px;"></span>
+        </td>
+        <td>
+          <span style="width: 25px; height: 25px;"></span>
+        </td>
+        <td style="vertical-align: bottom;">
+          <span style="width: 25px; height: 25px;"></span>
+        </td>
+      </tr>
+    </table>
+
+    <div style="position: absolute; top: 250px; left: 10px;">
+      <math>
+        <munder>
+          <mi>A</mi>
+          <mi>B</mi>
+        </munder>
+        <mover>
+          <mi>A</mi>
+          <mi>B</mi>
+        </mover>
+        <munderover>
+          <mi>A</mi>
+          <mi>B</mi>
+          <mi>C</mi>
+        </munderover>
+      </math>
+      <math>
+        <munder>
+          <mi>A</mi>
+          <mi>B</mi>
+        </munder>
+        <mover>
+          <mi>A</mi>
+          <mi>B</mi>
+        </mover>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-underover.html b/LayoutTests/mathml/presentation/scripts-underover.html
new file mode 100644
index 0000000..4755a0d
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-underover.html
@@ -0,0 +1,154 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts</title>
+    <meta charset="utf-8"/>
+    <style>
+      math {
+      padding: 0;
+      border: 0;
+      }
+      td {
+      border: 1px solid black;
+      text-align: center; width: 100px; height: 100px;
+      vertical-align: middle;
+      }
+      span {
+      display: inline-block;
+      background: black;
+      border: 0;
+      margin: 0;
+      }
+    </style>
+  </head>
+  <body>
+
+    <!-- The under/over scripts should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <math>
+            <munder>
+              <mspace width="20px" height="20px" depth="0px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="green"/>
+            </munder>
+          </math>
+        </td>
+        <td>
+          <math>
+            <munderover>
+              <mspace width="20px" height="10px" depth="10px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="green"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="blue"/>
+            </munderover>
+          </math>
+        </td>
+        <td  style="vertical-align: bottom;">
+          <math>
+            <mover>
+              <mspace width="20px" height="20px" depth="0px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="green"/>
+            </mover>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 10px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <span style="width: 12px; height: 50px;"></span>
+        </td>
+        <td>
+          <span style="width: 12px; height: 50px;"></span>
+        </td>
+        <td  style="vertical-align: bottom;">
+          <span style="width: 12px; height: 50px;"></span>
+        </td>
+      </tr>
+    </table>
+
+    <!-- The bases should be hidden by the black rectangles -->
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <math>
+            <munder>
+              <mspace width="20px" height="20px" depth="0px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="green"/>
+            </munder>
+          </math>
+        </td>
+        <td>
+          <math>
+            <munderover>
+              <mspace width="20px" height="10px" depth="10px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="green"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="blue"/>
+            </munderover>
+          </math>
+        </td>
+        <td  style="vertical-align: bottom;">
+          <math>
+            <mover>
+              <mspace width="20px" height="20px" depth="0px" mathbackground="red"/>
+              <mspace width="10px" height="5px" depth="5px" mathbackground="blue"/>
+            </mover>
+          </math>
+        </td>
+      </tr>
+    </table>
+
+    <table style="position: absolute; top: 120px; left: 10px;">
+      <tr>
+        <td style="vertical-align: top;">
+          <span style="width: 25px; height: 25px;"></span>
+        </td>
+        <td>
+          <span style="width: 25px; height: 25px;"></span>
+        </td>
+        <td style="vertical-align: bottom;">
+          <span style="width: 25px; height: 25px;"></span>
+        </td>
+      </tr>
+    </table>
+
+    <div style="position: absolute; top: 250px; left: 10px;">
+      <!-- This verifies that the scripts are drawn smaller. Note: WebKit does
+           not currently implement scriptlevel and only sets the size to
+           0.75em. See bug 118738. -->
+      <math>
+        <munder>
+          <mi>A</mi>
+          <mi style="font-size: 0.75em !important">B</mi>
+        </munder>
+        <mover>
+          <mi>A</mi>
+          <mi style="font-size: 0.75em !important">B</mi>
+        </mover>
+        <munderover>
+          <mi>A</mi>
+          <mi style="font-size: 0.75em !important">B</mi>
+          <mi style="font-size: 0.75em !important">C</mi>
+        </munderover>
+      </math>
+
+      <!-- This verifies that <munderscript> with an empty script is
+           equivalent to the corresponding constructions with only one script.
+        -->
+      <math>
+        <munderover>
+          <mi>A</mi>
+          <mi>B</mi>
+          <mspace/>
+        </munderover>
+        <munderover>
+          <mi>A</mi>
+          <mspace/>
+          <mi>B</mi>
+        </munderover>
+      </math>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-width-expected.html b/LayoutTests/mathml/presentation/scripts-width-expected.html
new file mode 100644
index 0000000..f85fdb3
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-width-expected.html
@@ -0,0 +1,41 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-width</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- sub/sup scripts of different widths: they should align left. -->
+    <p>
+        <math>
+          <msubsup>
+            <mspace/>
+            <mrow>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+              <mspace width="20px"/>
+            </mrow>
+            <mspace width="30px" height="10px" depth="10px"
+                    mathbackground="green"/>
+          </msubsup>
+        </math>
+    </p>
+    <p>
+        <math>
+          <msubsup>
+            <mspace/>
+            <mspace width="30px" height="10px" depth="10px"
+                    mathbackground="green"/>
+            <mrow>
+              <mspace width="10px" height="10px" depth="10px"
+                      mathbackground="red"/>
+              <mspace width="20px"/>
+            </mrow>
+          </msubsup>
+        </math>
+    </p>
+
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/scripts-width.html b/LayoutTests/mathml/presentation/scripts-width.html
new file mode 100644
index 0000000..bcdddf5
--- /dev/null
+++ b/LayoutTests/mathml/presentation/scripts-width.html
@@ -0,0 +1,34 @@
+<!doctype html>
+<html>
+  <head>
+    <title>scripts-width</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- sub/sup scripts of different widths: they should align left. -->
+    <p>
+        <math>
+          <msubsup>
+            <mspace/>
+            <mspace width="10px" height="10px" depth="10px"
+                    mathbackground="red"/>
+            <mspace width="30px" height="10px" depth="10px"
+                    mathbackground="green"/>
+          </msubsup>
+        </math>
+    </p>
+    <p>
+        <math>
+          <msubsup>
+            <mspace/>
+            <mspace width="30px" height="10px" depth="10px"
+                    mathbackground="green"/>
+            <mspace width="10px" height="10px" depth="10px"
+                    mathbackground="red"/>
+          </msubsup>
+        </math>
+    </p>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/style-border-padding-background-expected.html b/LayoutTests/mathml/presentation/style-border-padding-background-expected.html
new file mode 100644
index 0000000..094c2cd
--- /dev/null
+++ b/LayoutTests/mathml/presentation/style-border-padding-background-expected.html
@@ -0,0 +1,14 @@
+<!doctype html>
+<html>
+  <head>
+    <title>style: border, padding, background</title>
+    <meta charset="utf-8"/>
+
+  </head>
+
+  <body>
+
+    <div style="position: absolute; top: 0; left: 0; color: green; background: yellow; padding: 3px 6px 9px 12px; border: solid; border-width: 1px 2px 3px 4px;"><div style="width: 10px; height: 10px; background: red;"></div></div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/style-border-padding-background.html b/LayoutTests/mathml/presentation/style-border-padding-background.html
new file mode 100644
index 0000000..1d51dd6
--- /dev/null
+++ b/LayoutTests/mathml/presentation/style-border-padding-background.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html>
+  <head>
+    <title>style: border, padding, background</title>
+    <meta charset="utf-8"/>
+  </head>
+
+  <body>
+
+    <!-- This verifies border, padding and background on a MathML element -->
+    <math style="position: absolute; top: 0; left: 0; border: 0; padding: 0; margin: 0;">
+      <mrow style="color: green; background-color: yellow; padding: 3px 6px 9px 12px; border: solid; border-width: 1px 2px 3px 4px;">
+        <mspace width="10px" height="10px" mathbackground="red"/>
+      </mrow>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/style-changed-expected.html b/LayoutTests/mathml/presentation/style-changed-expected.html
new file mode 100644
index 0000000..0289813
--- /dev/null
+++ b/LayoutTests/mathml/presentation/style-changed-expected.html
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html>
+<body style="font-size: 36pt; color: green">
+
+<math style="font-family: sans-serif">
+    <mo>*</mo>
+    <mfenced>
+        <mfrac>
+            <msubsup>
+                <mi>x</mi>
+                <mn>1</mn>
+                <mn>2</mn>
+            </msubsup>
+            <munderover>
+                <mi>z</mi>
+                <mn>3</mn>
+                <mn>4</mn>
+            </munderover>
+        </mfrac>
+    </mfenced>
+</math>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/style-changed.html b/LayoutTests/mathml/presentation/style-changed.html
new file mode 100644
index 0000000..40ac3ba
--- /dev/null
+++ b/LayoutTests/mathml/presentation/style-changed.html
@@ -0,0 +1,32 @@
+<!DOCTYPE html>
+<html>
+<body>
+
+<math style="font-family: sans-serif">
+    <mo>*</mo>
+    <mfenced>
+        <mfrac>
+            <msubsup>
+                <mi>x</mi>
+                <mn>1</mn>
+                <mn>2</mn>
+            </msubsup>
+            <munderover>
+                <mi>z</mi>
+                <mn>3</mn>
+                <mn>4</mn>
+            </munderover>
+        </mfrac>
+    </mfenced>
+</math>
+
+<script>
+    window.addEventListener("load", function() {
+        document.body.offsetTop;
+        document.body.style.fontSize = "36pt";
+        document.body.style.color = "green";
+    }, false);
+</script>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/style-color-sqrt-expected-mismatch.html b/LayoutTests/mathml/presentation/style-color-sqrt-expected-mismatch.html
new file mode 100644
index 0000000..f0a77a9
--- /dev/null
+++ b/LayoutTests/mathml/presentation/style-color-sqrt-expected-mismatch.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html>
+  <head>
+    <title>style: color sqrt</title>
+    <meta charset="utf-8"/>
+  </head>
+
+  <body style="color: black;">
+
+    <!-- This verifies that the color property has an effect on the radical symbol -->
+    <math>
+      <msqrt style="color: red; background-color: yellow;">
+        <mn style="color: black">2</mn>
+      </msqrt>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/style-color-sqrt.html b/LayoutTests/mathml/presentation/style-color-sqrt.html
new file mode 100644
index 0000000..86907a3
--- /dev/null
+++ b/LayoutTests/mathml/presentation/style-color-sqrt.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html>
+  <head>
+    <title>style: color sqrt</title>
+    <meta charset="utf-8"/>
+  </head>
+
+  <body style="color: black;">
+
+    <!-- This verifies that the color property has an effect on the radical symbol -->
+    <math>
+      <msqrt style="color: green; background-color: yellow;">
+        <mn style="color: black;">2</mn>
+      </msqrt>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/sup-nested-expected.txt b/LayoutTests/mathml/presentation/sup-nested-expected.txt
new file mode 100644
index 0000000..d58d2e8
--- /dev/null
+++ b/LayoutTests/mathml/presentation/sup-nested-expected.txt
@@ -0,0 +1,9 @@
+This test passes if it does not time out.
+
+a
+b
+c
+d
+e
+f
+
diff --git a/LayoutTests/mathml/presentation/sup-nested.html b/LayoutTests/mathml/presentation/sup-nested.html
new file mode 100644
index 0000000..9ee9836
--- /dev/null
+++ b/LayoutTests/mathml/presentation/sup-nested.html
@@ -0,0 +1,33 @@
+<!DOCTYPE html>
+<html>
+<head>
+<script>
+if (window.testRunner)
+    testRunner.dumpAsText();
+</script>
+</head>
+<body>
+<p>This test passes if it does not time out.</p>
+<math>
+  <msup>
+    <mi>a</mi>
+    <msup>
+      <mi>b</mi>
+      <msup>
+        <mi>c</mi>
+        <msup>
+          <mi>d</mi>
+          <msup>
+            <mi>e</mi>
+            <msup>
+              <mi>f</mi>
+              <mo>g</mo>
+            </msup>
+          </msup>
+        </msup>
+      </msup>
+    </msup>
+  </msup>
+</math>
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-columnalign-expected.html b/LayoutTests/mathml/presentation/tables-columnalign-expected.html
new file mode 100644
index 0000000..e10800b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-columnalign-expected.html
@@ -0,0 +1,58 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table simple</title>
+    <meta charset="utf-8"/>
+  </head>
+  <style>
+    div {
+    position: absolute;
+    width: 2em; height: 2em;
+    }
+  </style>
+  <body>
+
+    <div style="position: absolute; top: 0; left: 0;">
+      <div style="top: 0; left: 0; background: red"></div>
+      <div style="top: 0; left: 6em; background: green"></div>
+      <div style="top: 0; left: 12em; background: blue"></div>
+
+      <div style="top: 2em; left: 0; width: 4em; background: yellow"></div>
+      <div style="top: 2em; left: 6em; width: 4em; background: magenta"></div>
+      <div style="top: 2em; left: 12em; width: 4em; background: cyan"></div>
+
+      <div style="top: 4em; left: 0; width: 6em; background: #eee"></div>
+      <div style="top: 4em; left: 6em; width: 6em; background: grey"></div>
+      <div style="top: 4em; left: 12em; width: 6em; background: black"></div>
+    </div>
+
+    <div style="position: absolute; top: 10em; left: 0;">
+      <div style="top: 0; left: 2em; background: red"></div>
+      <div style="top: 0; left: 8em; background: green"></div>
+      <div style="top: 0; left: 14em; background: blue"></div>
+
+      <div style="top: 2em; left: 1em; width: 4em; background: yellow"></div>
+      <div style="top: 2em; left: 7em; width: 4em; background: magenta"></div>
+      <div style="top: 2em; left: 13em; width: 4em; background: cyan"></div>
+
+      <div style="top: 4em; left: 0; width: 6em; background: #eee"></div>
+      <div style="top: 4em; left: 6em; width: 6em; background: grey"></div>
+      <div style="top: 4em; left: 12em; width: 6em; background: black"></div>
+    </div>
+
+    <div style="position: absolute; top: 20em; left: 0;">
+      <div style="top: 0; left: 4em; background: red"></div>
+      <div style="top: 0; left: 10em; background: green"></div>
+      <div style="top: 0; left: 16em; background: blue"></div>
+
+      <div style="top: 2em; left: 2em; width: 4em; background: yellow"></div>
+      <div style="top: 2em; left: 8em; width: 4em; background: magenta"></div>
+      <div style="top: 2em; left: 14em; width: 4em; background: cyan"></div>
+
+      <div style="top: 4em; left: 0; width: 6em; background: #eee"></div>
+      <div style="top: 4em; left: 6em; width: 6em; background: grey"></div>
+      <div style="top: 4em; left: 12em; width: 6em; background: black"></div>
+    </div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-columnalign.html b/LayoutTests/mathml/presentation/tables-columnalign.html
new file mode 100644
index 0000000..a66c979
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-columnalign.html
@@ -0,0 +1,78 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table simple</title>
+    <meta charset="utf-8"/>
+  </head>
+  <style>
+    mtd {
+    padding: 0;
+    }
+  </style>
+  <body>
+
+    <!-- Testing columnalign="left" -->
+    <math>
+      <mtable style="position: absolute; left: 0; top: 0;" columnalign="left">
+        <mtr>
+          <mtd><mspace width="2em" height="2em" mathbackground="red"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="green"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="blue"/></mtd>
+        </mtr>
+        <mtr>
+          <mtd><mspace width="4em" height="2em" mathbackground="yellow"/></mtd> 
+          <mtd><mspace width="4em" height="2em" mathbackground="magenta"/></mtd>
+          <mtd><mspace width="4em" height="2em" mathbackground="cyan"/></mtd>
+        </mtr>
+        <mtr> 
+          <mtd><mspace width="6em" height="2em" mathbackground="#eee"/></mtd> 
+          <mtd><mspace width="6em" height="2em" mathbackground="grey"/></mtd>
+          <mtd><mspace width="6em" height="2em" mathbackground="black"/></mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+    <!-- Testing columnalign="center" (default) -->
+    <math>
+      <mtable style="position: absolute; left: 0; top: 10em;">
+        <mtr>
+          <mtd><mspace width="2em" height="2em" mathbackground="red"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="green"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="blue"/></mtd>
+        </mtr>
+        <mtr>
+          <mtd><mspace width="4em" height="2em" mathbackground="yellow"/></mtd> 
+          <mtd><mspace width="4em" height="2em" mathbackground="magenta"/></mtd>
+          <mtd><mspace width="4em" height="2em" mathbackground="cyan"/></mtd>
+        </mtr>
+        <mtr> 
+          <mtd><mspace width="6em" height="2em" mathbackground="#eee"/></mtd> 
+          <mtd><mspace width="6em" height="2em" mathbackground="grey"/></mtd>
+          <mtd><mspace width="6em" height="2em" mathbackground="black"/></mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+    <!-- Testing columnalign="right" -->
+    <math>
+      <mtable style="position: absolute; left: 0; top: 20em;" columnalign="right">
+        <mtr>
+          <mtd><mspace width="2em" height="2em" mathbackground="red"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="green"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="blue"/></mtd>
+        </mtr>
+        <mtr>
+          <mtd><mspace width="4em" height="2em" mathbackground="yellow"/></mtd> 
+          <mtd><mspace width="4em" height="2em" mathbackground="magenta"/></mtd>
+          <mtd><mspace width="4em" height="2em" mathbackground="cyan"/></mtd>
+        </mtr>
+        <mtr> 
+          <mtd><mspace width="6em" height="2em" mathbackground="#eee"/></mtd> 
+          <mtd><mspace width="6em" height="2em" mathbackground="grey"/></mtd>
+          <mtd><mspace width="6em" height="2em" mathbackground="black"/></mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-simple-expected.html b/LayoutTests/mathml/presentation/tables-simple-expected.html
new file mode 100644
index 0000000..928382b5
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-simple-expected.html
@@ -0,0 +1,28 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table simple</title>
+    <meta charset="utf-8"/>
+  </head>
+  <style>
+    div {
+    position: absolute;
+    width: 2em; height: 2em;
+    }
+  </style>
+  <body>
+
+    <div style="top: 0; left: 0; background: red"></div>
+    <div style="top: 0; left: 2em; background: green"></div>
+    <div style="top: 0; left: 4em; background: blue"></div>
+
+    <div style="top: 2em; left: 0; background: yellow"></div>
+    <div style="top: 2em; left: 2em; background: magenta"></div>
+    <div style="top: 2em; left: 4em; background: cyan"></div>
+
+    <div style="top: 4em; left: 0; background: #eee"></div>
+    <div style="top: 4em; left: 2em; background: grey"></div>
+    <div style="top: 4em; left: 4em; background: black"></div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-simple.html b/LayoutTests/mathml/presentation/tables-simple.html
new file mode 100644
index 0000000..65b2ad1
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-simple.html
@@ -0,0 +1,35 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table simple</title>
+    <meta charset="utf-8"/>
+  </head>
+  <style>
+    mtd {
+    padding: 0;
+    }
+  </style>
+  <body>
+
+    <math>
+      <mtable style="position: absolute; left: 0; top: 0;">
+        <mtr>
+          <mtd><mspace width="2em" height="2em" mathbackground="red"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="green"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="blue"/></mtd>
+        </mtr>
+        <mtr>
+          <mtd><mspace width="2em" height="2em" mathbackground="yellow"/></mtd> 
+          <mtd><mspace width="2em" height="2em" mathbackground="magenta"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="cyan"/></mtd>
+        </mtr>
+        <mtr>
+          <mtd><mspace width="2em" height="2em" mathbackground="#eee"/></mtd> 
+          <mtd><mspace width="2em" height="2em" mathbackground="grey"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="black"/></mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-spans-dynamic-expected.html b/LayoutTests/mathml/presentation/tables-spans-dynamic-expected.html
new file mode 100644
index 0000000..0b4dacb
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-spans-dynamic-expected.html
@@ -0,0 +1,27 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table rowspan colspan dynamic</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <math>
+      <mtable>
+        <mtr>
+          <mtd id="mtd22" rowspan="2" columnspan="2"><msub><mi>a</mi><mn>1</mn></msub></mtd>
+          <mtd><msub><mi>a</mi><mn>13</mn></msub></mtd>
+        </mtr>
+        <mtr>
+          <mtd><msub><mi>b</mi><mn>23</mn></msub></mtd>
+        </mtr>
+        <mtr>
+          <mtd><msub><mi>c</mi><mn>31</mn></msub></mtd>
+          <mtd><msub><mi>c</mi><mn>32</mn></msub></mtd>
+          <mtd><msub><mi>c</mi><mn>3</mn></msub></mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-spans-dynamic.html b/LayoutTests/mathml/presentation/tables-spans-dynamic.html
new file mode 100644
index 0000000..619b39c
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-spans-dynamic.html
@@ -0,0 +1,40 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table rowspan colspan dynamic</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+
+    <!-- This sets the rowspan and columnspan attributes on an mtable cell
+         via Javascript. It should render the same if the attributes are
+         directly specified in the source code. -->
+    <math>
+      <mtable>
+        <mtr>
+          <mtd id="mtd22"><msub><mi>a</mi><mn>1</mn></msub></mtd>
+          <mtd><msub><mi>a</mi><mn>13</mn></msub></mtd>
+        </mtr>
+        <mtr>
+          <mtd><msub><mi>b</mi><mn>23</mn></msub></mtd>
+        </mtr>
+        <mtr>
+          <mtd><msub><mi>c</mi><mn>31</mn></msub></mtd>
+          <mtd><msub><mi>c</mi><mn>32</mn></msub></mtd>
+          <mtd><msub><mi>c</mi><mn>3</mn></msub></mtd>
+        </mtr>
+      </mtable>
+    </math>
+
+    <script>
+      window.addEventListener("load", function() {
+      document.body.offsetTop;
+      
+      var mtd22 = document.getElementById("mtd22");
+      mtd22.setAttribute("rowspan", 2);
+      mtd22.setAttribute("columnspan", 2);
+      }, false);
+    </script>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-spans-expected.html b/LayoutTests/mathml/presentation/tables-spans-expected.html
new file mode 100644
index 0000000..cf4d923
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-spans-expected.html
@@ -0,0 +1,28 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table simple</title>
+    <meta charset="utf-8"/>
+  </head>
+  <style>
+    div {
+    position: absolute;
+    width: 2em; height: 2em;
+    }
+  </style>
+  <body>
+
+    <div style="top: 0; left: 0; background: red"></div>
+    <div style="top: 0; left: 2em; background: green"></div>
+    <div style="top: 0; left: 4em; background: blue"></div>
+
+    <div style="top: 2em; left: 0; background: red"></div>
+    <div style="top: 2em; left: 2em; background: magenta"></div>
+    <div style="top: 2em; left: 4em; background: cyan"></div>
+
+    <div style="top: 4em; left: 0; background: #eee"></div>
+    <div style="top: 4em; left: 2em; background: #eee"></div>
+    <div style="top: 4em; left: 4em; background: #eee"></div>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tables-spans.html b/LayoutTests/mathml/presentation/tables-spans.html
new file mode 100644
index 0000000..def5f1f
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tables-spans.html
@@ -0,0 +1,35 @@
+<!doctype html>
+<html>
+  <head>
+    <title>table rowspan colspan</title>
+    <meta charset="utf-8"/>
+  </head>
+  <style>
+    mtd {
+    padding: 0;
+    }
+  </style>
+  <body>
+
+    <!-- This test verifies support for the rowspan and colspan MathML
+         attributes (corresponding to the rowspan and columnspan attributes
+         in HTML tables). -->
+    <math>
+      <mtable style="position: absolute; left: 0; top: 0;">
+        <mtr>
+          <mtd rowspan="2"><mspace width="2em" height="2em" depth="2em" mathbackground="red"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="green"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="blue"/></mtd>
+        </mtr>
+        <mtr>
+          <mtd><mspace width="2em" height="2em" mathbackground="magenta"/></mtd>
+          <mtd><mspace width="2em" height="2em" mathbackground="cyan"/></mtd>
+        </mtr>
+        <mtr>
+          <mtd columnspan="3"><mspace width="6em" height="2em" mathbackground="#eee"/></mtd> 
+        </mtr>
+      </mtable>
+    </math>
+
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/text-indent-expected.html b/LayoutTests/mathml/presentation/text-indent-expected.html
new file mode 100644
index 0000000..5c0959c
--- /dev/null
+++ b/LayoutTests/mathml/presentation/text-indent-expected.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html>
+<body style="text-indent: 2em">
+
+  <math style="text-indent: 0">
+    <mn>2</mn>
+    <mo>+</mo>
+    <mfrac>
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/text-indent.html b/LayoutTests/mathml/presentation/text-indent.html
new file mode 100644
index 0000000..6d1497b
--- /dev/null
+++ b/LayoutTests/mathml/presentation/text-indent.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html>
+<body style="text-indent: 2em">
+
+  <math>
+    <mn>2</mn>
+    <mo>+</mo>
+    <mfrac>
+      <mi>x</mi>
+      <mi>y</mi>
+    </mfrac>
+  </math>
+
+</body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tokenElements-mathvariant-expected.html b/LayoutTests/mathml/presentation/tokenElements-mathvariant-expected.html
new file mode 100644
index 0000000..5540a2c
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tokenElements-mathvariant-expected.html
@@ -0,0 +1,22 @@
+<!doctype html>
+<html>
+  <head>
+    <title>Token elements</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+    <p>Following elements should use a regular font: 
+      <math>
+        <mn style="font-style: normal; font-weight: normal;">1</mn>
+        <mo style="font-style: normal; font-weight: normal;">&#x2207;</mo>
+        <mtext style="font-style: normal; font-weight: normal;">text</mtext>
+        <ms style="font-style: normal; font-weight: normal;">&amp;</ms>
+      </math>
+    </p>
+    <p>Following element should be in italic: 
+      <math>
+        <mi style="font-style: italic;">x</mi>
+      </math>
+    </p>
+  </body>
+</html>
diff --git a/LayoutTests/mathml/presentation/tokenElements-mathvariant.html b/LayoutTests/mathml/presentation/tokenElements-mathvariant.html
new file mode 100644
index 0000000..a75cbef
--- /dev/null
+++ b/LayoutTests/mathml/presentation/tokenElements-mathvariant.html
@@ -0,0 +1,22 @@
+<!doctype html>
+<html>
+  <head>
+    <title>Token elements</title>
+    <meta charset="utf-8"/>
+  </head>
+  <body>
+    <p>Following elements should use a regular font: 
+      <math>
+        <mn>1</mn>
+        <mo>&#x2207;</mo>
+        <mtext>text</mtext>
+        <ms>&amp;</ms>
+      </math>
+    </p>
+    <p>Following element should be in italic: 
+      <math>
+        <mi>x</mi>
+      </math>
+    </p>
+  </body>
+</html>
diff --git a/LayoutTests/mathml/wbr-in-mroot-crash-expected.txt b/LayoutTests/mathml/wbr-in-mroot-crash-expected.txt
new file mode 100644
index 0000000..4217e68
--- /dev/null
+++ b/LayoutTests/mathml/wbr-in-mroot-crash-expected.txt
@@ -0,0 +1,3 @@
+This test shouldn't crash.
+
+
diff --git a/LayoutTests/mathml/wbr-in-mroot-crash.html b/LayoutTests/mathml/wbr-in-mroot-crash.html
new file mode 100644
index 0000000..8b7c56d9
--- /dev/null
+++ b/LayoutTests/mathml/wbr-in-mroot-crash.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html>
+<script>
+if (window.testRunner)
+    testRunner.dumpAsText();
+</script>
+<body>
+<p>This test shouldn't crash.</p>
+<p><math><mroot><mrow><mroot><mrow><mroot><mrow><mroot><mrow><mroot><mrow><mroot><mrow><mroot><mrow id="insertion-point"></mrow></mroot></mrow></mroot></mrow></mroot></mrow></mroot></mrow></mroot></mrow></mroot></mrow></mroot></math></p></body></html>
+<script>
+var elem = document.getElementById("insertion-point"); 
+var parent = elem.parentNode;
+var wbr = document.createElement("wbr");
+parent.insertBefore(wbr, elem);
+</script>
diff --git a/Source/core/accessibility/AccessibilityNodeObject.cpp b/Source/core/accessibility/AccessibilityNodeObject.cpp
index 5f30849..88ae918 100644
--- a/Source/core/accessibility/AccessibilityNodeObject.cpp
+++ b/Source/core/accessibility/AccessibilityNodeObject.cpp
@@ -29,6 +29,7 @@
 #include "config.h"
 #include "core/accessibility/AccessibilityNodeObject.h"
 
+#include "MathMLNames.h"
 #include "core/accessibility/AXObjectCache.h"
 #include "core/dom/NodeTraversal.h"
 #include "core/dom/Text.h"
@@ -1077,6 +1078,11 @@ String AccessibilityNodeObject::accessibilityDescription() const
             return alt;
     }
 
+#if ENABLE(MATHML)
+    if (m_node && m_node->isElementNode() && toElement(m_node)->isMathMLElement())
+        return getAttribute(MathMLNames::alttextAttr);
+#endif
+
     // An element's descriptive text is comprised of title() (what's visible on the screen) and accessibilityDescription() (other descriptive text).
     // Both are used to generate what a screen reader speaks.
     // If this point is reached (i.e. there's no accessibilityDescription) and there's no title(), we should fallback to using the title attribute.
@@ -1542,6 +1548,14 @@ void AccessibilityNodeObject::alternativeText(Vector<AccessibilityText>& textOrd
         if (!alt.isNull())
             textOrder.append(AccessibilityText(alt, AlternativeText));
     }
+
+    Node* node = this->node();
+    if (!node)
+        return;
+#if ENABLE(MATHML)
+    if (node->isElementNode() && toElement(node)->isMathMLElement())
+        textOrder.append(AccessibilityText(getAttribute(MathMLNames::alttextAttr), AlternativeText));
+#endif
 }
 
 void AccessibilityNodeObject::ariaLabeledByText(Vector<AccessibilityText>& textOrder) const
diff --git a/Source/core/accessibility/AccessibilityObject.h b/Source/core/accessibility/AccessibilityObject.h
index 2f74dd6..d2cbbc8 100644
--- a/Source/core/accessibility/AccessibilityObject.h
+++ b/Source/core/accessibility/AccessibilityObject.h
@@ -534,6 +534,53 @@ public:
     static AccessibilityRole ariaRoleToWebCoreRole(const String&);
     static IntRect boundingBoxForQuads(RenderObject*, const Vector<FloatQuad>&);
 
+    // All math elements return true for isMathElement().
+    virtual bool isMathElement() const { return false; }
+    virtual bool isMathFraction() const { return false; }
+    virtual bool isMathFenced() const { return false; }
+    virtual bool isMathSubscriptSuperscript() const { return false; }
+    virtual bool isMathRow() const { return false; }
+    virtual bool isMathUnderOver() const { return false; }
+    virtual bool isMathRoot() const { return false; }
+    virtual bool isMathSquareRoot() const { return false; }
+    virtual bool isMathText() const { return false; }
+    virtual bool isMathNumber() const { return false; }
+    virtual bool isMathOperator() const { return false; }
+    virtual bool isMathFenceOperator() const { return false; }
+    virtual bool isMathSeparatorOperator() const { return false; }
+    virtual bool isMathIdentifier() const { return false; }
+    virtual bool isMathTable() const { return false; }
+    virtual bool isMathTableRow() const { return false; }
+    virtual bool isMathTableCell() const { return false; }
+    virtual bool isMathMultiscript() const { return false; }
+
+    // Root components.
+    virtual AccessibilityObject* mathRadicandObject() { return 0; }
+    virtual AccessibilityObject* mathRootIndexObject() { return 0; }
+    
+    // Under over components.
+    virtual AccessibilityObject* mathUnderObject() { return 0; }
+    virtual AccessibilityObject* mathOverObject() { return 0; }
+
+    // Fraction components.
+    virtual AccessibilityObject* mathNumeratorObject() { return 0; }
+    virtual AccessibilityObject* mathDenominatorObject() { return 0; }
+
+    // Subscript/superscript components.
+    virtual AccessibilityObject* mathBaseObject() { return 0; }
+    virtual AccessibilityObject* mathSubscriptObject() { return 0; }
+    virtual AccessibilityObject* mathSuperscriptObject() { return 0; }
+    
+    // Fenced components.
+    virtual String mathFencedOpenString() const { return String(); }
+    virtual String mathFencedCloseString() const { return String(); }
+    virtual int mathLineThickness() const { return 0; }
+    
+    // Multiscripts components.
+    typedef Vector<pair<AccessibilityObject*, AccessibilityObject*> > AccessibilityMathMultiscriptPairs;
+    virtual void mathPrescripts(AccessibilityMathMultiscriptPairs&) { }
+    virtual void mathPostscripts(AccessibilityMathMultiscriptPairs&) { }
+
 protected:
     AXID m_id;
     AccessibilityChildrenVector m_children;
diff --git a/Source/core/accessibility/AccessibilityRenderObject.cpp b/Source/core/accessibility/AccessibilityRenderObject.cpp
index 8910ae0..bc58374 100644
--- a/Source/core/accessibility/AccessibilityRenderObject.cpp
+++ b/Source/core/accessibility/AccessibilityRenderObject.cpp
@@ -51,6 +51,7 @@
 #include "core/loader/ProgressTracker.h"
 #include "core/page/Page.h"
 #include "core/platform/LocalizedStrings.h"
+#include "MathMLNames.h"
 #include "core/rendering/HitTestResult.h"
 #include "core/rendering/RenderFieldset.h"
 #include "core/rendering/RenderFileUploadControl.h"
@@ -60,6 +61,9 @@
 #include "core/rendering/RenderLayer.h"
 #include "core/rendering/RenderListMarker.h"
 #include "core/rendering/RenderMenuList.h"
+#include "core/rendering/mathml/RenderMathMLBlock.h"
+#include "core/rendering/mathml/RenderMathMLFraction.h"
+#include "core/rendering/mathml/RenderMathMLOperator.h"
 #include "core/rendering/RenderTextControlSingleLine.h"
 #include "core/rendering/RenderTextFragment.h"
 #include "core/rendering/RenderWidget.h"
@@ -114,6 +118,14 @@ static inline RenderObject* firstChildConsideringContinuation(RenderObject* rend
 static inline RenderInline* startOfContinuations(RenderObject* r)
 {
     if (r->isInlineElementContinuation()) {
+#if ENABLE(MATHML)
+        // MathML elements make anonymous RenderObjects, then set their node to the parent's node.
+        // This makes it so that the renderer() != renderer()->node()->renderer()
+        // (which is what isInlineElementContinuation() uses as a determinant).
+        if (r->node()->isElementNode() && toElement(r->node())->isMathMLElement())
+            return 0;
+#endif
+
         return toRenderInline(r->node()->renderer());
     }
 
@@ -391,6 +403,15 @@ AccessibilityRole AccessibilityRenderObject::determineAccessibilityRole()
     if (m_renderer->isSVGRoot())
         return SVGRootRole;
 
+#if ENABLE(MATHML)
+    if (node && node->hasTagName(MathMLNames::mathTag))
+        return DocumentMathRole;
+#endif
+    // It's not clear which role a platform should choose for a math element.
+    // Declaring a math element role should give flexibility to platforms to choose.
+    if (isMathElement())
+        return MathElementRole;
+
     if (node && node->hasTagName(ddTag))
         return DescriptionListDetailRole;
 
@@ -748,6 +769,15 @@ bool AccessibilityRenderObject::computeAccessibilityIsIgnored() const
     if (supportsARIAAttributes())
         return false;
 
+#if ENABLE(MATHML)
+    // First check if this is a special case within the math tree that needs to be ignored.
+    if (isIgnoredElementWithinMathTree())
+        return true;
+    // Otherwise all other math elements are in the tree.
+    if (isMathElement())
+        return false;
+#endif
+
     // <span> tags are inline tags and not meant to convey information if they have no other aria
     // information on them. If we don't ignore them, they may emit signals expected to come from
     // their parent. In addition, because included spans are GroupRole objects, and GroupRole
@@ -824,6 +854,11 @@ bool AccessibilityRenderObject::computeAccessibilityIsIgnored() const
     if (!ariaAccessibilityDescription().isEmpty())
         return false;
 
+#if ENABLE(MATHML)
+    if (!getAttribute(MathMLNames::alttextAttr).isEmpty())
+        return false;
+#endif
+
     // By default, objects should be ignored so that the AX hierarchy is not
     // filled with unnecessary items.
     return true;
@@ -1238,6 +1273,17 @@ String AccessibilityRenderObject::textUnderElement() const
     if (m_renderer->isFileUploadControl())
         return toRenderFileUploadControl(m_renderer)->buttonValue();
 
+#if ENABLE(MATHML)
+    // Math operators create RenderText nodes on the fly that are not tied into the DOM in a reasonable way,
+    // so rangeOfContents does not work for them (nor does regular text selection).
+    if (m_renderer->isText() && isMathElement()) {
+        for (RenderObject* parent = m_renderer->parent(); parent; parent = parent->parent()) {
+            if (parent->isRenderMathMLBlock() && toRenderMathMLBlock(parent)->isRenderMathMLOperator())
+                return toRenderText(m_renderer)->text();
+        }
+    }
+#endif
+
     if (m_renderer->isText()) {
         // If possible, use a text iterator to get the text, so that whitespace
         // is handled consistently.
@@ -2522,4 +2568,390 @@ LayoutRect AccessibilityRenderObject::computeElementRect() const
     return result;
 }
 
+#if ENABLE(MATHML)
+bool AccessibilityRenderObject::isMathElement() const
+{
+    Node* node = this->node();
+    if (!m_renderer || !node)
+        return false;
+    
+    return node->isElementNode() && toElement(node)->isMathMLElement();
+}
+
+bool AccessibilityRenderObject::isMathFraction() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    return toRenderMathMLBlock(m_renderer)->isRenderMathMLFraction();
+}
+
+bool AccessibilityRenderObject::isMathFenced() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    return toRenderMathMLBlock(m_renderer)->isRenderMathMLFenced();
+}
+
+bool AccessibilityRenderObject::isMathSubscriptSuperscript() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    return toRenderMathMLBlock(m_renderer)->isRenderMathMLSubSup();
+}
+
+bool AccessibilityRenderObject::isMathRow() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    return toRenderMathMLBlock(m_renderer)->isRenderMathMLRow();
+}
+
+bool AccessibilityRenderObject::isMathUnderOver() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    return toRenderMathMLBlock(m_renderer)->isRenderMathMLUnderOver();
+}
+
+bool AccessibilityRenderObject::isMathSquareRoot() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    return toRenderMathMLBlock(m_renderer)->isRenderMathMLSquareRoot();
+}
+    
+bool AccessibilityRenderObject::isMathRoot() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    return toRenderMathMLBlock(m_renderer)->isRenderMathMLRoot();
+}
+
+bool AccessibilityRenderObject::isMathOperator() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    // Ensure that this is actually a render MathML operator because
+    // MathML will create MathMLBlocks and use the original node as the node
+    // of this new block that is not tied to the DOM.
+    if (!toRenderMathMLBlock(m_renderer)->isRenderMathMLOperator())
+        return false;
+    
+    return isMathElement() && node()->hasTagName(MathMLNames::moTag);
+}
+
+bool AccessibilityRenderObject::isMathFenceOperator() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    if (!toRenderMathMLBlock(m_renderer)->isRenderMathMLOperator())
+        return false;
+    
+    RenderMathMLOperator* mathOperator = toRenderMathMLOperator(toRenderMathMLBlock(m_renderer));
+    return mathOperator->operatorType() == RenderMathMLOperator::Fence;
+}
+
+bool AccessibilityRenderObject::isMathSeparatorOperator() const
+{
+    if (!m_renderer || !m_renderer->isRenderMathMLBlock())
+        return false;
+    
+    if (!toRenderMathMLBlock(m_renderer)->isRenderMathMLOperator())
+        return false;
+    
+    RenderMathMLOperator* mathOperator = toRenderMathMLOperator(toRenderMathMLBlock(m_renderer));
+    return mathOperator->operatorType() == RenderMathMLOperator::Separator;
+}
+    
+bool AccessibilityRenderObject::isMathText() const
+{
+    return node() && node()->hasTagName(MathMLNames::mtextTag);
+}
+
+bool AccessibilityRenderObject::isMathNumber() const
+{
+    return node() && node()->hasTagName(MathMLNames::mnTag);
+}
+
+bool AccessibilityRenderObject::isMathIdentifier() const
+{
+    return node() && node()->hasTagName(MathMLNames::miTag);
+}
+
+bool AccessibilityRenderObject::isMathMultiscript() const
+{
+    return node() && node()->hasTagName(MathMLNames::mmultiscriptsTag);
+}
+    
+bool AccessibilityRenderObject::isMathTable() const
+{
+    return node() && node()->hasTagName(MathMLNames::mtableTag);
+}
+
+bool AccessibilityRenderObject::isMathTableRow() const
+{
+    return node() && node()->hasTagName(MathMLNames::mtrTag);
+}
+
+bool AccessibilityRenderObject::isMathTableCell() const
+{
+    return node() && node()->hasTagName(MathMLNames::mtdTag);
+}
+    
+bool AccessibilityRenderObject::isIgnoredElementWithinMathTree() const
+{
+    if (!m_renderer)
+        return true;
+    
+    // Ignore items that were created for layout purposes only.
+    if (m_renderer->isRenderMathMLBlock() && toRenderMathMLBlock(m_renderer)->ignoreInAccessibilityTree())
+        return true;
+
+    // Ignore anonymous renderers inside math blocks.
+    if (m_renderer->isAnonymous()) {
+        for (AccessibilityObject* parent = parentObject(); parent; parent = parent->parentObject()) {
+            if (parent->isMathElement())
+                return true;
+        }
+    }
+
+    // Only math elements that we explicitly recognize should be included
+    // We don't want things like <mstyle> to appear in the tree.
+    if (isMathElement()) {
+        if (isMathFraction() || isMathFenced() || isMathSubscriptSuperscript() || isMathRow()
+            || isMathUnderOver() || isMathRoot() || isMathText() || isMathNumber()
+            || isMathOperator() || isMathFenceOperator() || isMathSeparatorOperator()
+            || isMathIdentifier() || isMathTable() || isMathTableRow() || isMathTableCell() || isMathMultiscript())
+            return false;
+        return true;
+    }
+
+    return false;
+}
+
+AccessibilityObject* AccessibilityRenderObject::mathRadicandObject()
+{
+    if (!isMathRoot())
+        return 0;
+    
+    AccessibilityObject::AccessibilityChildrenVector children = this->children();
+    if (children.size() < 1)
+        return 0;
+    
+    // The radicand is the value being rooted and must be listed first.
+    return children[0].get();
+}
+
+AccessibilityObject* AccessibilityRenderObject::mathRootIndexObject()
+{
+    if (!isMathRoot())
+        return 0;
+    
+    AccessibilityObject::AccessibilityChildrenVector children = this->children();
+    if (children.size() != 2)
+        return 0;
+
+    // The index in a root is the value which determines if it's a square, cube, etc, root
+    // and must be listed second.
+    return children[1].get();
+}
+
+AccessibilityObject* AccessibilityRenderObject::mathNumeratorObject()
+{
+    if (!isMathFraction())
+        return 0;
+    
+    AccessibilityObject::AccessibilityChildrenVector children = this->children();
+    if (children.size() != 2)
+        return 0;
+    
+    return children[0].get();
+}
+    
+AccessibilityObject* AccessibilityRenderObject::mathDenominatorObject()
+{
+    if (!isMathFraction())
+        return 0;
+
+    AccessibilityObject::AccessibilityChildrenVector children = this->children();
+    if (children.size() != 2)
+        return 0;
+    
+    return children[1].get();
+}
+    
+AccessibilityObject* AccessibilityRenderObject::mathUnderObject()
+{
+    if (!isMathUnderOver() || !node())
+        return 0;
+    
+    AccessibilityChildrenVector children = this->children();
+    if (children.size() < 2)
+        return 0;
+    
+    if (node()->hasTagName(MathMLNames::munderTag) || node()->hasTagName(MathMLNames::munderoverTag))
+        return children[1].get();
+    
+    return 0;
+}
+
+AccessibilityObject* AccessibilityRenderObject::mathOverObject()
+{
+    if (!isMathUnderOver() || !node())
+        return 0;
+    
+    AccessibilityChildrenVector children = this->children();
+    if (children.size() < 2)
+        return 0;
+    
+    if (node()->hasTagName(MathMLNames::moverTag))
+        return children[1].get();
+    if (node()->hasTagName(MathMLNames::munderoverTag))
+        return children[2].get();
+
+    return 0;
+}
+
+AccessibilityObject* AccessibilityRenderObject::mathBaseObject()
+{
+    if (!isMathSubscriptSuperscript() && !isMathUnderOver() && !isMathMultiscript())
+        return 0;
+    
+    AccessibilityChildrenVector children = this->children();
+    // The base object in question is always the first child.
+    if (children.size() > 0)
+        return children[0].get();
+
+    return 0;
+}
+
+AccessibilityObject* AccessibilityRenderObject::mathSubscriptObject()
+{
+    if (!isMathSubscriptSuperscript() || !node())
+        return 0;
+    
+    AccessibilityChildrenVector children = this->children();
+    if (children.size() < 2)
+        return 0;
+
+    if (node()->hasTagName(MathMLNames::msubTag) || node()->hasTagName(MathMLNames::msubsupTag))
+        return children[1].get();
+    
+    return 0;
+}
+
+AccessibilityObject* AccessibilityRenderObject::mathSuperscriptObject()
+{
+    if (!isMathSubscriptSuperscript() || !node())
+        return 0;
+    
+    AccessibilityChildrenVector children = this->children();
+    if (children.size() < 2)
+        return 0;
+    
+    if (node()->hasTagName(MathMLNames::msupTag))
+        return children[1].get();
+    if (node()->hasTagName(MathMLNames::msubsupTag))
+        return children[2].get();
+    
+    return 0;
+}
+    
+String AccessibilityRenderObject::mathFencedOpenString() const
+{
+    if (!isMathFenced())
+        return String();
+    
+    return getAttribute(MathMLNames::openAttr);
+}
+
+String AccessibilityRenderObject::mathFencedCloseString() const
+{
+    if (!isMathFenced())
+        return String();
+    
+    return getAttribute(MathMLNames::closeAttr);
+}
+    
+void AccessibilityRenderObject::mathPrescripts(AccessibilityMathMultiscriptPairs& prescripts)
+{
+    if (!isMathMultiscript() || !node())
+        return;
+    
+    bool foundPrescript = false;
+    pair<AccessibilityObject*, AccessibilityObject*> prescriptPair;
+    for (Node* child = node()->firstChild(); child; child = child->nextSibling()) {
+        if (foundPrescript) {
+            AccessibilityObject* axChild = axObjectCache()->getOrCreate(child);
+            if (axChild && axChild->isMathElement()) {
+                if (!prescriptPair.first)
+                    prescriptPair.first = axChild;
+                else {
+                    prescriptPair.second = axChild;
+                    prescripts.append(prescriptPair);
+                    prescriptPair.first = 0;
+                    prescriptPair.second = 0;
+                }
+            }
+        } else if (child->hasTagName(MathMLNames::mprescriptsTag))
+            foundPrescript = true;
+    }
+    
+    // Handle the odd number of pre scripts case.
+    if (prescriptPair.first)
+        prescripts.append(prescriptPair);
+}
+
+void AccessibilityRenderObject::mathPostscripts(AccessibilityMathMultiscriptPairs& postscripts)
+{
+    if (!isMathMultiscript() || !node())
+        return;
+
+    // In Multiscripts, the post-script elements start after the first element (which is the base)
+    // and continue until a <mprescripts> tag is found
+    pair<AccessibilityObject*, AccessibilityObject*> postscriptPair;
+    bool foundBaseElement = false;
+    for (Node* child = node()->firstChild(); child; child = child->nextSibling()) {
+        if (child->hasTagName(MathMLNames::mprescriptsTag))
+            break;
+
+        AccessibilityObject* axChild = axObjectCache()->getOrCreate(child);
+        if (axChild && axChild->isMathElement()) {
+            if (!foundBaseElement)
+                foundBaseElement = true;
+            else if (!postscriptPair.first)
+                postscriptPair.first = axChild;
+            else {
+                postscriptPair.second = axChild;
+                postscripts.append(postscriptPair);
+                postscriptPair.first = 0;
+                postscriptPair.second = 0;
+            }
+        }
+    }
+
+    // Handle the odd number of post scripts case.
+    if (postscriptPair.first)
+        postscripts.append(postscriptPair);
+}
+
+int AccessibilityRenderObject::mathLineThickness() const
+{
+    if (!isMathFraction())
+        return -1;
+    
+    return toRenderMathMLFraction(m_renderer)->lineThickness();
+}
+
+#endif
+
 } // namespace WebCore
diff --git a/Source/core/accessibility/AccessibilityRenderObject.h b/Source/core/accessibility/AccessibilityRenderObject.h
index 66847f8..5803c85 100644
--- a/Source/core/accessibility/AccessibilityRenderObject.h
+++ b/Source/core/accessibility/AccessibilityRenderObject.h
@@ -235,6 +235,57 @@ private:
     String stringForRange(const PlainTextRange&) const;
     AccessibilityObject* correspondingControlForLabelElement() const;
     int indexForVisiblePosition(const VisiblePosition&) const;
+#if ENABLE(MATHML)
+    // All math elements return true for isMathElement().
+    virtual bool isMathElement() const;
+    virtual bool isMathFraction() const;
+    virtual bool isMathFenced() const;
+    virtual bool isMathSubscriptSuperscript() const;
+    virtual bool isMathRow() const;
+    virtual bool isMathUnderOver() const;
+    virtual bool isMathRoot() const;
+    virtual bool isMathSquareRoot() const;
+    virtual bool isMathText() const;
+    virtual bool isMathNumber() const;
+    virtual bool isMathOperator() const;
+    virtual bool isMathFenceOperator() const;
+    virtual bool isMathSeparatorOperator() const;
+    virtual bool isMathIdentifier() const;
+    virtual bool isMathTable() const;
+    virtual bool isMathTableRow() const;
+    virtual bool isMathTableCell() const;
+    virtual bool isMathMultiscript() const;
+    
+    // Generic components.
+    virtual AccessibilityObject* mathBaseObject();
+    
+    // Root components.
+    virtual AccessibilityObject* mathRadicandObject();
+    virtual AccessibilityObject* mathRootIndexObject();
+    
+    // Fraction components.
+    virtual AccessibilityObject* mathNumeratorObject();
+    virtual AccessibilityObject* mathDenominatorObject();
+
+    // Under over components.
+    virtual AccessibilityObject* mathUnderObject();
+    virtual AccessibilityObject* mathOverObject();
+    
+    // Subscript/superscript components.
+    virtual AccessibilityObject* mathSubscriptObject();
+    virtual AccessibilityObject* mathSuperscriptObject();
+    
+    // Fenced components.
+    virtual String mathFencedOpenString() const;
+    virtual String mathFencedCloseString() const;
+    virtual int mathLineThickness() const;
+
+    // Multiscripts components.
+    virtual void mathPrescripts(AccessibilityMathMultiscriptPairs&);
+    virtual void mathPostscripts(AccessibilityMathMultiscriptPairs&);
+    
+    bool isIgnoredElementWithinMathTree() const;
+#endif
 };
 
 inline AccessibilityRenderObject* toAccessibilityRenderObject(AccessibilityObject* object)
diff --git a/Source/core/core.gyp b/Source/core/core.gyp
index 3ec89a6..bac3313 100644
--- a/Source/core/core.gyp
+++ b/Source/core/core.gyp
@@ -248,6 +248,7 @@
         'inspector',
         'page',
         'svg',
+        'mathml',
       ],
       'sources': [
         # These files include all the .cpp files generated from the .idl files
@@ -312,6 +313,10 @@
         '<(SHARED_INTERMEDIATE_DIR)/blink/SVGElementFactory.cpp',
         '<(SHARED_INTERMEDIATE_DIR)/blink/V8SVGElementWrapperFactory.cpp',
 
+        # Additional .cpp files for MathML.
+        '<(SHARED_INTERMEDIATE_DIR)/blink/MathMLElementFactory.cpp',
+        '<(SHARED_INTERMEDIATE_DIR)/blink/V8MathMLElementWrapperFactory.cpp',
+
         # Generated from make_style_shorthands.py
         '<(SHARED_INTERMEDIATE_DIR)/blink/StylePropertyShorthand.cpp',
 
diff --git a/Source/core/core.gypi b/Source/core/core.gypi
index 67655aa..f56722c 100644
--- a/Source/core/core.gypi
+++ b/Source/core/core.gypi
@@ -237,6 +237,14 @@
             'inspector/InspectorOverlayHost.idl',
             'inspector/JavaScriptCallFrame.idl',
             'loader/appcache/ApplicationCache.idl',
+            'mathml/MathMLElement.cpp',
+            'mathml/MathMLElement.h',
+            'mathml/MathMLInlineContainerElement.cpp',
+            'mathml/MathMLInlineContainerElement.h',
+            'mathml/MathMLMathElement.cpp',
+            'mathml/MathMLMathElement.h',
+            'mathml/MathMLTextElement.cpp',
+            'mathml/MathMLTextElement.h',
             'page/BarProp.idl',
             'page/Console.idl',
             'page/EventSource.idl',
@@ -1508,6 +1516,28 @@
             'rendering/VerticalPositionCache.h',
             'rendering/break_lines.cpp',
             'rendering/break_lines.h',
+            'rendering/mathml/RenderMathMLBlock.cpp',
+            'rendering/mathml/RenderMathMLBlock.h',
+            'rendering/mathml/RenderMathMLFenced.cpp',
+            'rendering/mathml/RenderMathMLFenced.h',
+            'rendering/mathml/RenderMathMLFraction.cpp',
+            'rendering/mathml/RenderMathMLFraction.h',
+            'rendering/mathml/RenderMathMLMath.cpp',
+            'rendering/mathml/RenderMathMLMath.h',
+            'rendering/mathml/RenderMathMLOperator.cpp',
+            'rendering/mathml/RenderMathMLOperator.h',
+            'rendering/mathml/RenderMathMLRoot.cpp',
+            'rendering/mathml/RenderMathMLRoot.h',
+            'rendering/mathml/RenderMathMLRow.cpp',
+            'rendering/mathml/RenderMathMLRow.h',
+            'rendering/mathml/RenderMathMLSpace.cpp',
+            'rendering/mathml/RenderMathMLSpace.h',
+            'rendering/mathml/RenderMathMLSquareRoot.cpp',
+            'rendering/mathml/RenderMathMLSquareRoot.h',
+            'rendering/mathml/RenderMathMLSubSup.cpp',
+            'rendering/mathml/RenderMathMLSubSup.h',
+            'rendering/mathml/RenderMathMLUnderOver.cpp',
+            'rendering/mathml/RenderMathMLUnderOver.h',
             'rendering/shapes/PolygonShape.cpp',
             'rendering/shapes/PolygonShape.h',
             'rendering/shapes/RasterShape.cpp',
diff --git a/Source/core/core_derived_sources.gyp b/Source/core/core_derived_sources.gyp
index e89bab6..f653757 100644
--- a/Source/core/core_derived_sources.gyp
+++ b/Source/core/core_derived_sources.gyp
@@ -420,6 +420,10 @@
           'outputs': [
             '<(SHARED_INTERMEDIATE_DIR)/blink/MathMLNames.cpp',
             '<(SHARED_INTERMEDIATE_DIR)/blink/MathMLNames.h',
+            '<(SHARED_INTERMEDIATE_DIR)/blink/MathMLElementFactory.cpp',
+            '<(SHARED_INTERMEDIATE_DIR)/blink/MathMLElementFactory.h',
+            '<(SHARED_INTERMEDIATE_DIR)/blink/V8MathMLElementWrapperFactory.cpp',
+            '<(SHARED_INTERMEDIATE_DIR)/blink/V8MathMLElementWrapperFactory.h',
           ],
           'action': [
             'python',
@@ -450,6 +454,7 @@
               'css/themeWin.css',
               'css/themeWinQuirks.css',
               'css/svg.css',
+              'css/mathml.css',
               'css/mediaControls.css',
               'css/mediaControlsAndroid.css',
               'css/fullscreen.css',
diff --git a/Source/core/css/CSSDefaultStyleSheets.cpp b/Source/core/css/CSSDefaultStyleSheets.cpp
index e8848b5..c969b89 100644
--- a/Source/core/css/CSSDefaultStyleSheets.cpp
+++ b/Source/core/css/CSSDefaultStyleSheets.cpp
@@ -168,6 +168,16 @@ void CSSDefaultStyleSheets::ensureDefaultStyleSheetsForElement(Element* element,
         changedDefaultStyle = true;
     }
 
+#if ENABLE(MATHML)
+    if (element->isMathMLElement() && !mathMLStyleSheet) {
+        // MathML rules.
+        mathMLStyleSheet = parseUASheet(mathmlUserAgentStyleSheet, sizeof(mathmlUserAgentStyleSheet));
+        defaultStyle->addRulesFromSheet(mathMLStyleSheet, screenEval());
+        defaultPrintStyle->addRulesFromSheet(mathMLStyleSheet, printEval());
+        changedDefaultStyle = true;
+    }
+#endif
+
     if (!mediaControlsStyleSheet && (isHTMLVideoElement(element) || element->hasTagName(audioTag))) {
         String mediaRules = String(mediaControlsUserAgentStyleSheet, sizeof(mediaControlsUserAgentStyleSheet)) + RenderTheme::themeForPage(element->document()->page())->extraMediaControlsStyleSheet();
         mediaControlsStyleSheet = parseUASheet(mediaRules);
diff --git a/Source/core/css/mathml.css b/Source/core/css/mathml.css
new file mode 100644
index 0000000..92d1029
--- /dev/null
+++ b/Source/core/css/mathml.css
@@ -0,0 +1,239 @@
+@namespace "http://www.w3.org/1998/Math/MathML";
+
+math {
+    -webkit-line-box-contain: glyphs replaced;
+    line-height: 0;
+    text-indent: 0;
+}
+mtext {
+    line-height: 1.0;
+}
+
+/* Keep font-family and other defaults here consistent with http://mxr.mozilla.org/mozilla-central/source/layout/mathml/mathml.css and feedback from www-math. */
+math, mfenced > * {
+    font-family: MathJax_Main, STIXGeneral, "DejaVu Serif", Cambria, "Cambria Math", Times, serif;
+}
+mo, mfenced {
+    font-family: MathJax_Main, STIXGeneral, STIXSizeOneSym, "DejaVu Sans", "DejaVu Serif", Cambria, "Cambria Math",
+        "Lucida Sans Unicode", "Arial Unicode MS", "Lucida Grande", OpenSymbol, "Standard Symbols L", sans-serif;
+}
+
+math {
+    display: -webkit-inline-flex !important;
+    padding-left: 1px;
+    padding-right: 1px;
+}
+
+math[display="block"] {
+    display: -webkit-flex !important;
+    -webkit-justify-content: center;
+    page-break-inside: avoid;
+    /* -webkit-margin-before: 1em; -- FIXME: Ask www-math for a default MathML stylesheet, including this (or margin-top). */
+    -webkit-margin-after: 1em;
+}
+
+mo, mrow, mfenced, mfrac, msub, msup, msubsup, munder, mover, munderover, msqrt, mroot {
+    display: -webkit-inline-flex !important;
+}
+
+msup {
+    -webkit-align-items: flex-start;
+}
+
+msub {
+    -webkit-align-items: flex-end;
+}
+
+math, mrow, mfenced, msqrt, mroot {
+    -webkit-align-items: baseline;
+}
+msqrt > * { /* This rule is needed because of <msqrt>'s anonymous <mrow>. */
+    -webkit-align-self: baseline;
+}
+
+mo, mfrac, munder, mover, munderover {
+    -webkit-flex-direction: column;
+}
+
+munder, mover, munderover {
+    -webkit-align-items: center;
+}
+
+mfrac > * {
+    -webkit-align-self: center;
+}
+mfrac[numalign="left"] > :first-child {
+    -webkit-align-self: flex-start;
+}
+mfrac[numalign="right"] > :first-child {
+    -webkit-align-self: flex-end;
+}
+mfrac[denomalign="left"] > :last-child {
+    -webkit-align-self: flex-start;
+}
+mfrac[denomalign="right"] > :last-child {
+    -webkit-align-self: flex-end;
+}
+mfrac > :first-child {
+    -webkit-margin-after: 0.2em;
+}
+mfrac > :last-child {
+    -webkit-margin-before: 0.2em;
+}
+mfrac {
+    -webkit-margin-start: 1px;
+    -webkit-margin-end: 1px;
+}
+
+msubsup > :last-child, mover > :last-child, munderover > :last-child {
+    -webkit-order: -1;
+}
+
+msub > * + *, msup > * + *, msubsup > * + *, munder > * + *, mover > * + *, munderover > * + * {
+    font-size: 0.75em; /* FIXME: MathML standard is 0.71em */
+}
+
+mi {
+    font-style: italic;
+    -webkit-padding-end: 0.1em;
+}
+msub > mi:first-child, msubsup > mi:first-child {
+    -webkit-padding-end: 0;
+}
+msubsup > mi:first-child + * + * {
+    -webkit-margin-start: 0.14em; /* This is larger than 0.1em because the child's font-size is smaller than the <msubsup>'s. */
+}
+
+/* FIXME: For a RenderMathMLOperator's margin-start and margin-end, or for a MathML "embellished operator", check the operator's lspace and rspace attributes,
+   and the MathML operator dictionary. */
+math > mo, mrow > mo, msqrt > mo, mtd > mo {
+    -webkit-margin-start: 0.2em;
+    -webkit-margin-end: 0.2em;
+}
+math > mo:first-child, mrow > mo:first-child, msqrt > mo:first-child, mtd > mo:first-child,
+math > mo:last-child, mrow > mo:last-child, msqrt > mo:last-child, mtd > mo:last-child {
+    -webkit-margin-start: 0.1em;
+    -webkit-margin-end: 0.1em;
+}
+
+mroot {
+    position: relative;
+}
+mroot > * + * {
+    font-size: 0.75em;
+    position: absolute;
+    left: 0;
+    top: 0;
+    padding-right: 0.4em;
+    padding-left: 0.2em;
+    padding-bottom: 0.35em;
+}
+
+math[mathvariant="normal"], mstyle[mathvariant="normal"], mo[mathvariant="normal"], mn[mathvariant="normal"], mi[mathvariant="normal"], mtext[mathvariant="normal"], mspace[mathvariant="normal"], ms[mathvariant="normal"] {
+    font-style: normal;
+    font-weight: normal;
+}
+
+math[mathvariant="bold"], mstyle[mathvariant="bold"], mo[mathvariant="bold"], mn[mathvariant="bold"], mi[mathvariant="bold"], mtext[mathvariant="bold"], mspace[mathvariant="bold"], ms[mathvariant="bold"] {
+    font-style: normal;
+    font-weight: bold;
+}
+
+math[mathvariant="italic"], mstyle[mathvariant="italic"], mo[mathvariant="italic"], mn[mathvariant="italic"], mi[mathvariant="italic"], mtext[mathvariant="italic"], mspace[mathvariant="italic"], ms[mathvariant="italic"] {
+    font-style: italic;
+    font-weight: normal;
+}
+
+math[mathvariant="bold-italic"], mstyle[mathvariant="bold-italic"], mo[mathvariant="bold-italic"], mn[mathvariant="bold-italic"], mi[mathvariant="bold-italic"], mtext[mathvariant="bold-italic"], mspace[mathvariant="bold-italic"], ms[mathvariant="bold-italic"] {
+    font-weight: bold;
+    font-style: italic;
+}
+
+math[mathsize="small"], mstyle[mathsize="small"], mo[mathsize="small"], mn[mathsize="small"], mi[mathsize="small"], mtext[mathsize="small"], mspace[mathsize="small"], ms[mathsize="small"] {
+    font-size: 0.75em;
+}
+
+math[mathsize="normal"], mstyle[mathsize="normal"], mo[mathsize="normal"], mn[mathsize="normal"], mi[mathsize="normal"], mtext[mathsize="normal"], mspace[mathsize="normal"], ms[mathsize="normal"] {
+    font-size: 1em;
+}
+
+math[mathsize="big"], mstyle[mathsize="big"], mo[mathsize="big"], mn[mathsize="big"], mi[mathsize="big"], mtext[mathsize="big"], mspace[mathsize="big"], ms[mathsize="big"] {
+    font-size: 1.5em;
+}
+ 
+annotation, annotation-xml {
+    display: none;
+}
+
+mphantom {
+    visibility: hidden;
+}
+
+merror {
+    outline: solid thin red;
+    font-weight: bold;
+    font-family: sans-serif;
+    background-color: lightYellow;
+}
+
+mtable {
+    display: inline-table;
+    text-align: center;
+}
+
+mtr {
+    display: table-row;
+}
+
+mtd {
+    display: table-cell;
+    padding: 0.5ex;
+}
+
+mtable[columnalign="left"], mtr[columnalign="left"], mtd[columnalign="left"] {
+    text-align: left;
+}
+
+mtable[columnalign="right"], mtr[columnalign="right"], mtd[columnalign="right"] {
+    text-align: right;
+}
+
+mtable[rowalign="top"] mtd, mtable mtr[rowalign="top"] mtd, mtable mtr mtd[rowalign="top"] {
+    vertical-align: top;
+}
+
+mtable[rowalign="bottom"] mtd, mtable mtr[rowalign="bottom"] mtd, mtable mtr mtd[rowalign="bottom"] {
+    vertical-align: bottom;
+}
+
+mtable[rowalign="center"] mtd, mtable mtr[rowalign="center"] mtd, mtable mtr mtd[rowalign="center"] {
+    vertical-align: middle;
+}
+
+mtable[frame="solid"] {
+    border: solid thin;
+}
+
+mtable[frame="dashed"] {
+    border: dashed thin;
+}
+
+mtable[rowlines="solid"], mtable[rowlines="dashed"], mtable[columnlines="solid"], mtable[columnlines="dashed"] {
+    border-collapse: collapse;
+}
+
+mtable[rowlines="solid"] > mtr + mtr {
+    border-top: solid thin;
+}
+
+mtable[rowlines="dashed"] > mtr + mtr {
+    border-top: dashed thin;
+}
+
+mtable[columnlines="solid"] > mtr > mtd + mtd {
+    border-left: solid thin;
+}
+
+mtable[columnlines="dashed"] > mtr > mtd + mtd {
+    border-left: dashed thin;
+}
diff --git a/Source/core/dom/Document.cpp b/Source/core/dom/Document.cpp
index 888dce0d..4a8d03b 100644
--- a/Source/core/dom/Document.cpp
+++ b/Source/core/dom/Document.cpp
@@ -178,6 +178,12 @@
 #include "wtf/UnusedParam.h"
 #include "wtf/text/StringBuffer.h"
 
+#if ENABLE(MATHML)
+#include "core/mathml/MathMLElement.h"
+#include "MathMLElementFactory.h"
+#include "MathMLNames.h"
+#endif
+
 using namespace std;
 using namespace WTF;
 using namespace Unicode;
@@ -999,6 +1005,10 @@ PassRefPtr<Element> Document::createElement(const QualifiedName& qName, bool cre
         e = HTMLElementFactory::createHTMLElement(qName, this, 0, createdByParser);
     else if (qName.namespaceURI() == SVGNames::svgNamespaceURI)
         e = SVGElementFactory::createSVGElement(qName, this, createdByParser);
+#if ENABLE(MATHML)
+    else if (qName.namespaceURI() == MathMLNames::mathmlNamespaceURI)
+        e = MathMLElementFactory::createMathMLElement(qName, this, createdByParser);
+#endif
 
     if (e)
         m_sawElementsInKnownNamespaces = true;
diff --git a/Source/core/dom/Element.h b/Source/core/dom/Element.h
index 9179307..a79ea66 100644
--- a/Source/core/dom/Element.h
+++ b/Source/core/dom/Element.h
@@ -554,7 +554,12 @@ public:
 
     DOMStringMap* dataset();
 
+#if ENABLE(MATHML)
+    virtual bool isMathMLElement() const { return false; }
+#else
     static bool isMathMLElement() { return false; }
+#endif
+
     virtual bool isMediaElement() const { return false; }
 
 #if ENABLE(INPUT_SPEECH)
diff --git a/Source/core/dom/QualifiedName.cpp b/Source/core/dom/QualifiedName.cpp
index 1495d92..9658237 100644
--- a/Source/core/dom/QualifiedName.cpp
+++ b/Source/core/dom/QualifiedName.cpp
@@ -35,9 +35,16 @@
 #include "wtf/HashSet.h"
 #include "wtf/StaticConstructors.h"
 
+#if ENABLE(MATHML)
+#include "MathMLNames.h"
+#endif
+
 namespace WebCore {
 
 static const int staticQualifiedNamesCount = HTMLNames::HTMLTagsCount + HTMLNames::HTMLAttrsCount
+#if ENABLE(MATHML)
+    + MathMLNames::MathMLTagsCount + MathMLNames::MathMLAttrsCount
+#endif
     + SVGNames::SVGTagsCount + SVGNames::SVGAttrsCount
     + XLinkNames::XLinkAttrsCount
     + XMLNSNames::XMLNSAttrsCount
diff --git a/Source/core/features.gypi b/Source/core/features.gypi
index 40a89de..df687a2 100644
--- a/Source/core/features.gypi
+++ b/Source/core/features.gypi
@@ -37,6 +37,7 @@
       'ENABLE_CSS_REGIONS=1',
       'ENABLE_CUSTOM_SCHEME_HANDLER=0',
       'ENABLE_ENCRYPTED_MEDIA_V2=1',
+      'ENABLE_MATHML=1',
       'ENABLE_SVG_FONTS=1',
       'ENABLE_TOUCH_ICON_LOADING=<(enable_touch_icon_loading)',
       'ENABLE_GDI_FONTS_ON_WINDOWS=1',
diff --git a/Source/core/mathml/MathMLElement.cpp b/Source/core/mathml/MathMLElement.cpp
new file mode 100644
index 0000000..6ffcb39
--- /dev/null
+++ b/Source/core/mathml/MathMLElement.cpp
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ * Copyright (C) 2010 François Sausset (sausset@gmail.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "MathMLElement.h"
+
+#include "MathMLNames.h"
+#include "core/rendering/RenderObject.h"
+#include "core/rendering/RenderTableCell.h"
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+    
+MathMLElement::MathMLElement(const QualifiedName& tagName, Document* document)
+    : StyledElement(tagName, document, CreateStyledElement)
+{
+}
+    
+PassRefPtr<MathMLElement> MathMLElement::create(const QualifiedName& tagName, Document* document)
+{
+    return adoptRef(new MathMLElement(tagName, document));
+}
+
+int MathMLElement::colSpan() const
+{
+    if (!hasTagName(mtdTag))
+        return 1;
+    const AtomicString& colSpanValue = fastGetAttribute(columnspanAttr);
+    return std::max(1, colSpanValue.toInt());
+}
+
+int MathMLElement::rowSpan() const
+{
+    if (!hasTagName(mtdTag))
+        return 1;
+    const AtomicString& rowSpanValue = fastGetAttribute(rowspanAttr);
+    return std::max(1, rowSpanValue.toInt());
+}
+
+void MathMLElement::parseAttribute(const QualifiedName& name, const AtomicString& value)
+{
+    if (name == rowspanAttr) {
+        if (renderer() && renderer()->isTableCell() && hasTagName(mtdTag))
+            toRenderTableCell(renderer())->colSpanOrRowSpanChanged();
+    } else if (name == columnspanAttr) {
+        if (renderer() && renderer()->isTableCell() && hasTagName(mtdTag))
+            toRenderTableCell(renderer())->colSpanOrRowSpanChanged();
+    } else
+        StyledElement::parseAttribute(name, value);
+}
+
+bool MathMLElement::isPresentationAttribute(const QualifiedName& name) const
+{
+    if (name == mathbackgroundAttr || name == mathsizeAttr || name == mathcolorAttr || name == fontsizeAttr || name == backgroundAttr || name == colorAttr || name == fontstyleAttr || name == fontweightAttr || name == fontfamilyAttr)
+        return true;
+    return StyledElement::isPresentationAttribute(name);
+}
+
+void MathMLElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomicString& value, MutableStylePropertySet* style)
+{
+    if (name == mathbackgroundAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyBackgroundColor, value);
+    else if (name == mathsizeAttr) {
+        // The following three values of mathsize are handled in WebCore/css/mathml.css
+        if (value != "normal" && value != "small" && value != "big")
+            addPropertyToPresentationAttributeStyle(style, CSSPropertyFontSize, value);
+    } else if (name == mathcolorAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyColor, value);
+    // FIXME: deprecated attributes that should loose in a conflict with a non deprecated attribute
+    else if (name == fontsizeAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyFontSize, value);
+    else if (name == backgroundAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyBackgroundColor, value);
+    else if (name == colorAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyColor, value);
+    else if (name == fontstyleAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyFontStyle, value);
+    else if (name == fontweightAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyFontWeight, value);
+    else if (name == fontfamilyAttr)
+        addPropertyToPresentationAttributeStyle(style, CSSPropertyFontFamily, value);
+    else {
+        ASSERT(!isPresentationAttribute(name));
+        StyledElement::collectStyleForPresentationAttribute(name, value
+        , style);
+    }
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/mathml/MathMLElement.h b/Source/core/mathml/MathMLElement.h
new file mode 100644
index 0000000..7e183e3
--- /dev/null
+++ b/Source/core/mathml/MathMLElement.h
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ * Copyright (C) 2010 François Sausset (sausset@gmail.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef MathMLElement_h
+#define MathMLElement_h
+
+#if ENABLE(MATHML)
+#include "core/dom/Element.h"
+
+namespace WebCore {
+
+class MathMLElement : public Element {
+public:
+    static PassRefPtr<MathMLElement> create(const QualifiedName& tagName, Document*);
+
+    int colSpan() const;
+    int rowSpan() const;
+
+protected:
+    MathMLElement(const QualifiedName& tagName, Document*);
+
+    virtual void parseAttribute(const QualifiedName&, const AtomicString&) OVERRIDE;
+
+private:    
+    virtual bool isMathMLElement() const { return true; }
+
+    virtual bool isPresentationAttribute(const QualifiedName&) const OVERRIDE;
+    virtual void collectStyleForPresentationAttribute(const QualifiedName&, const AtomicString&, MutableStylePropertySet*) OVERRIDE;
+};
+
+inline MathMLElement* toMathMLElement(Node* node)
+{
+    ASSERT_WITH_SECURITY_IMPLICATION(!node || (node->isElementNode() && toElement(node)->isMathMLElement()));
+    return static_cast<MathMLElement*>(node);
+}
+
+}
+
+#endif // ENABLE(MATHML)
+#endif // MathMLElement_h
diff --git a/Source/core/mathml/MathMLInlineContainerElement.cpp b/Source/core/mathml/MathMLInlineContainerElement.cpp
new file mode 100644
index 0000000..e71b9ea
--- /dev/null
+++ b/Source/core/mathml/MathMLInlineContainerElement.cpp
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "MathMLInlineContainerElement.h"
+
+#include "MathMLNames.h"
+#include "RenderMathMLBlock.h"
+#include "RenderMathMLFenced.h"
+#include "RenderMathMLFraction.h"
+#include "RenderMathMLRoot.h"
+#include "RenderMathMLRow.h"
+#include "RenderMathMLSquareRoot.h"
+#include "RenderMathMLSubSup.h"
+#include "RenderMathMLUnderOver.h"
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+
+MathMLInlineContainerElement::MathMLInlineContainerElement(const QualifiedName& tagName, Document* document)
+    : MathMLElement(tagName, document)
+{
+}
+
+PassRefPtr<MathMLInlineContainerElement> MathMLInlineContainerElement::create(const QualifiedName& tagName, Document* document)
+{
+    return adoptRef(new MathMLInlineContainerElement(tagName, document));
+}
+
+RenderObject* MathMLInlineContainerElement::createRenderer(RenderArena* arena, RenderStyle*)
+{
+    if (hasLocalName(mrowTag))
+        return new (arena) RenderMathMLRow(this);
+    if (hasLocalName(msubTag))
+        return new (arena) RenderMathMLSubSup(this);
+    if (hasLocalName(msupTag))
+        return new (arena) RenderMathMLSubSup(this);
+    if (hasLocalName(msubsupTag))
+        return new (arena) RenderMathMLSubSup(this);
+    if (hasLocalName(moverTag))
+        return new (arena) RenderMathMLUnderOver(this);
+    if (hasLocalName(munderTag))
+        return new (arena) RenderMathMLUnderOver(this);
+    if (hasLocalName(munderoverTag))
+        return new (arena) RenderMathMLUnderOver(this);
+    if (hasLocalName(mfracTag))
+        return new (arena) RenderMathMLFraction(this);
+    if (hasLocalName(msqrtTag))
+        return new (arena) RenderMathMLSquareRoot(this);
+    if (hasLocalName(mrootTag))
+        return new (arena) RenderMathMLRoot(this);
+    if (hasLocalName(mfencedTag))
+        return new (arena) RenderMathMLFenced(this);
+    if (hasLocalName(mtableTag))
+        return new (arena) RenderMathMLTable(this);
+
+    return new (arena) RenderMathMLBlock(this);
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/mathml/MathMLInlineContainerElement.h b/Source/core/mathml/MathMLInlineContainerElement.h
new file mode 100644
index 0000000..4e80e36
--- /dev/null
+++ b/Source/core/mathml/MathMLInlineContainerElement.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef MathMLInlineContainerElement_h
+#define MathMLInlineContainerElement_h
+
+#if ENABLE(MATHML)
+#include "MathMLElement.h"
+
+namespace WebCore {
+    
+class MathMLInlineContainerElement : public MathMLElement {
+public:
+    static PassRefPtr<MathMLInlineContainerElement> create(const QualifiedName& tagName, Document*);
+
+protected:
+    MathMLInlineContainerElement(const QualifiedName& tagName, Document*);
+
+private:
+    virtual RenderObject* createRenderer(RenderArena*, RenderStyle*);
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+#endif // MathMLInlineContainerElement_h
diff --git a/Source/core/mathml/MathMLMathElement.cpp b/Source/core/mathml/MathMLMathElement.cpp
new file mode 100644
index 0000000..bc50d9b
--- /dev/null
+++ b/Source/core/mathml/MathMLMathElement.cpp
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "MathMLMathElement.h"
+#include "RenderMathMLMath.h"
+
+namespace WebCore {
+
+inline MathMLMathElement::MathMLMathElement(const QualifiedName& tagName, Document* document)
+    : MathMLInlineContainerElement(tagName, document)
+{
+}
+
+PassRefPtr<MathMLMathElement> MathMLMathElement::create(const QualifiedName& tagName, Document* document)
+{
+    return adoptRef(new MathMLMathElement(tagName, document));
+}
+
+Node::InsertionNotificationRequest MathMLMathElement::insertedInto(ContainerNode* insertionPoint)
+{
+    // There are sibling rules in the MathML default style.
+    if (insertionPoint->inDocument())
+        document()->styleSheetCollection()->setUsesSiblingRulesOverride(true);
+    return MathMLInlineContainerElement::insertedInto(insertionPoint);
+}
+
+RenderObject* MathMLMathElement::createRenderer(RenderArena* arena, RenderStyle*)
+{
+    return new (arena) RenderMathMLMath(this);
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/mathml/MathMLMathElement.h b/Source/core/mathml/MathMLMathElement.h
new file mode 100644
index 0000000..b37db3d
--- /dev/null
+++ b/Source/core/mathml/MathMLMathElement.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef MathMLMathElement_h
+#define MathMLMathElement_h
+
+#if ENABLE(MATHML)
+#include "MathMLInlineContainerElement.h"
+
+namespace WebCore {
+
+class MathMLMathElement : public MathMLInlineContainerElement {
+public:
+    static PassRefPtr<MathMLMathElement> create(const QualifiedName& tagName, Document*);
+
+private:
+    MathMLMathElement(const QualifiedName& tagName, Document*);
+
+    virtual InsertionNotificationRequest insertedInto(ContainerNode*) OVERRIDE;
+    virtual RenderObject* createRenderer(RenderArena*, RenderStyle*);
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+#endif // MathMLMathElement_h
diff --git a/Source/core/mathml/MathMLTextElement.cpp b/Source/core/mathml/MathMLTextElement.cpp
new file mode 100644
index 0000000..7f32875
--- /dev/null
+++ b/Source/core/mathml/MathMLTextElement.cpp
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "MathMLTextElement.h"
+
+#include "MathMLNames.h"
+#include "RenderMathMLOperator.h"
+#include "RenderMathMLSpace.h"
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+
+inline MathMLTextElement::MathMLTextElement(const QualifiedName& tagName, Document* document)
+    : MathMLElement(tagName, document)
+{
+}
+
+PassRefPtr<MathMLTextElement> MathMLTextElement::create(const QualifiedName& tagName, Document* document)
+{
+    return adoptRef(new MathMLTextElement(tagName, document));
+}
+
+RenderObject* MathMLTextElement::createRenderer(RenderArena* arena, RenderStyle* style)
+{
+    if (hasLocalName(MathMLNames::moTag))
+        return new (arena) RenderMathMLOperator(this);
+    if (hasLocalName(MathMLNames::mspaceTag))
+        return new (arena) RenderMathMLSpace(this);
+
+    return MathMLElement::createRenderer(arena, style);
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/mathml/MathMLTextElement.h b/Source/core/mathml/MathMLTextElement.h
new file mode 100644
index 0000000..3af93d5
--- /dev/null
+++ b/Source/core/mathml/MathMLTextElement.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef MathMLTextElement_h
+#define MathMLTextElement_h
+
+#if ENABLE(MATHML)
+#include "MathMLElement.h"
+
+namespace WebCore {
+    
+class MathMLTextElement : public MathMLElement {
+public:
+    static PassRefPtr<MathMLTextElement> create(const QualifiedName& tagName, Document*);
+
+private:
+    MathMLTextElement(const QualifiedName& tagName, Document*);
+
+    virtual RenderObject* createRenderer(RenderArena*, RenderStyle*);
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+#endif // MathMLTextElement_h
diff --git a/Source/core/mathml/mathattrs.in b/Source/core/mathml/mathattrs.in
index 45a6e3a..4b7c230 100644
--- a/Source/core/mathml/mathattrs.in
+++ b/Source/core/mathml/mathattrs.in
@@ -1,5 +1,6 @@
 namespace="MathML"
 namespaceURI="http://www.w3.org/1998/Math/MathML"
+guardFactoryWith="ENABLE(MATHML)"
 attrsNullNamespace
 
 alttext
@@ -9,11 +10,13 @@ color
 columnspan
 definitionURL
 denomalign
+depth
 encoding
 fontfamily
 fontsize
 fontstyle
 fontweight
+height
 linethickness
 mathbackground
 mathcolor
@@ -24,3 +27,4 @@ open
 rowspan
 separators
 stretchy
+width
diff --git a/Source/core/mathml/mathtags.in b/Source/core/mathml/mathtags.in
index 95688e1..805c15c 100644
--- a/Source/core/mathml/mathtags.in
+++ b/Source/core/mathml/mathtags.in
@@ -1,11 +1,31 @@
 namespace="MathML"
 namespaceURI="http://www.w3.org/1998/Math/MathML"
+guardFactoryWith="ENABLE(MATHML)"
+fallbackInterfaceName="MathMLElement"
 
 math
-mi
-mn
-mo
-mtext
+mfrac interfaceName=MathMLInlineContainerElement
+mfenced interfaceName=MathMLInlineContainerElement
+msubsup interfaceName=MathMLInlineContainerElement
+mrow interfaceName=MathMLInlineContainerElement
+mover interfaceName=MathMLInlineContainerElement
+munder interfaceName=MathMLInlineContainerElement
+munderover interfaceName=MathMLInlineContainerElement
+msqrt interfaceName=MathMLInlineContainerElement
+mroot interfaceName=MathMLInlineContainerElement
+mi interfaceName=MathMLTextElement
+mn interfaceName=MathMLTextElement
+mo interfaceName=MathMLTextElement
+mtext interfaceName=MathMLTextElement
+mspace interfaceName=MathMLTextElement
+msub interfaceName=MathMLInlineContainerElement
+msup interfaceName=MathMLInlineContainerElement
+mtable interfaceName=MathMLInlineContainerElement
+mtr interfaceName=MathMLElement
+mtd interfaceName=MathMLElement
+mmultiscripts interfaceName=MathMLInlineContainerElement
+mprescripts interfaceName=MathMLElement
+none interfaceName=MathMLElement
 
 #if 0 // Curently only for MathMLNames used by HTMLTreeBuilder.
 ms
diff --git a/Source/core/rendering/RenderObject.h b/Source/core/rendering/RenderObject.h
index 6dff553..4aa1a87 100644
--- a/Source/core/rendering/RenderObject.h
+++ b/Source/core/rendering/RenderObject.h
@@ -427,6 +427,10 @@ public:
 
     virtual bool requiresForcedStyleRecalcPropagation() const { return false; }
 
+#if ENABLE(MATHML)
+    virtual bool isRenderMathMLBlock() const { return false; }
+#endif // ENABLE(MATHML)
+
     // FIXME: Until all SVG renders can be subclasses of RenderSVGModelObject we have
     // to add SVG renderer methods to RenderObject with an ASSERT_NOT_REACHED() default implementation.
     virtual bool isSVGRoot() const { return false; }
@@ -498,7 +502,11 @@ public:
         // are not RenderBlocks and will return false. See https://bugs.webkit.org/show_bug.cgi?id=56709.
         return isAnonymous() && (style()->display() == BLOCK || style()->display() == BOX) && style()->styleType() == NOPSEUDO && isRenderBlock() && !isListMarker() && !isRenderFlowThread()
             && !isRenderFullScreen()
-            && !isRenderFullScreenPlaceholder();
+            && !isRenderFullScreenPlaceholder()
+#if ENABLE(MATHML)
+            && !isRenderMathMLBlock()
+#endif
+          ;
     }
     bool isAnonymousColumnsBlock() const { return style()->specifiesColumns() && isAnonymousBlock(); }
     bool isAnonymousColumnSpanBlock() const { return style()->columnSpan() && isAnonymousBlock(); }
diff --git a/Source/core/rendering/RenderTableCell.cpp b/Source/core/rendering/RenderTableCell.cpp
index 25ae144..df85152 100644
--- a/Source/core/rendering/RenderTableCell.cpp
+++ b/Source/core/rendering/RenderTableCell.cpp
@@ -37,6 +37,11 @@
 #include "core/rendering/SubtreeLayoutScope.h"
 #include "core/rendering/style/CollapsedBorderValue.h"
 
+#if ENABLE(MATHML)
+#include "core/mathml/MathMLElement.h"
+#include "MathMLNames.h"
+#endif
+
 using namespace std;
 
 namespace WebCore {
@@ -76,6 +81,10 @@ unsigned RenderTableCell::parseColSpanFromDOM() const
     ASSERT(node());
     if (node()->hasTagName(tdTag) || node()->hasTagName(thTag))
         return min<unsigned>(toHTMLTableCellElement(node())->colSpan(), maxColumnIndex);
+#if ENABLE(MATHML)
+    if (node()->hasTagName(MathMLNames::mtdTag))
+        return min<unsigned>(toMathMLElement(node())->colSpan(), maxColumnIndex);
+#endif
     return 1;
 }
 
@@ -84,6 +93,10 @@ unsigned RenderTableCell::parseRowSpanFromDOM() const
     ASSERT(node());
     if (node()->hasTagName(tdTag) || node()->hasTagName(thTag))
         return min<unsigned>(toHTMLTableCellElement(node())->rowSpan(), maxRowIndex);
+#if ENABLE(MATHML)
+    if (node()->hasTagName(MathMLNames::mtdTag))
+        return min<unsigned>(toMathMLElement(node())->rowSpan(), maxRowIndex);
+#endif
     return 1;
 }
 
@@ -98,7 +111,11 @@ void RenderTableCell::updateColAndRowSpanFlags()
 void RenderTableCell::colSpanOrRowSpanChanged()
 {
     ASSERT(node());
+#if ENABLE(MATHML)
+    ASSERT(node()->hasTagName(tdTag) || node()->hasTagName(thTag) || node()->hasTagName(MathMLNames::mtdTag));
+#else
     ASSERT(node()->hasTagName(tdTag) || node()->hasTagName(thTag));
+#endif
 
     updateColAndRowSpanFlags();
 
diff --git a/Source/core/rendering/RenderTreeAsText.cpp b/Source/core/rendering/RenderTreeAsText.cpp
index fc0982c..d6b156f 100644
--- a/Source/core/rendering/RenderTreeAsText.cpp
+++ b/Source/core/rendering/RenderTreeAsText.cpp
@@ -333,6 +333,23 @@ void RenderTreeAsText::writeRenderObject(TextStream& ts, const RenderObject& o,
 
             ts << "]";
         }
+
+#if ENABLE(MATHML)
+        // We want to show any layout padding, both CSS padding and intrinsic padding, so we can't just check o.style()->hasPadding().
+        if (o.isRenderMathMLBlock() && (box.paddingTop() || box.paddingRight() || box.paddingBottom() || box.paddingLeft())) {
+            ts << " [";
+            LayoutUnit cssTop = box.computedCSSPaddingTop();
+            LayoutUnit cssRight = box.computedCSSPaddingRight();
+            LayoutUnit cssBottom = box.computedCSSPaddingBottom();
+            LayoutUnit cssLeft = box.computedCSSPaddingLeft();
+            if (box.paddingTop() != cssTop || box.paddingRight() != cssRight || box.paddingBottom() != cssBottom || box.paddingLeft() != cssLeft) {
+                ts << "intrinsic ";
+                if (cssTop || cssRight || cssBottom || cssLeft)
+                    ts << "+ CSS ";
+            }
+            ts << "padding: " << roundToInt(box.paddingTop()) << " " << roundToInt(box.paddingRight()) << " " << roundToInt(box.paddingBottom()) << " " << roundToInt(box.paddingLeft()) << "]";
+        }
+#endif
     }
 
     if (o.isTableCell()) {
diff --git a/Source/core/rendering/mathml/RenderMathMLBlock.cpp b/Source/core/rendering/mathml/RenderMathMLBlock.cpp
new file mode 100644
index 0000000..77543c7
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLBlock.cpp
@@ -0,0 +1,375 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2012 David Barton (dbarton@mathscribe.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+
+#include "core/platform/graphics/GraphicsContext.h"
+#include "core/platform/graphics/GraphicsContextStateSaver.h"
+#include "MathMLNames.h"
+#include "core/rendering/RenderView.h"
+#include <wtf/text/StringBuilder.h>
+
+#if ENABLE(DEBUG_MATH_LAYOUT)
+#include "core/rendering/PaintInfo.h"
+#endif
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+    
+RenderMathMLBlock::RenderMathMLBlock(Element* container)
+    : RenderFlexibleBox(container)
+    , m_ignoreInAccessibilityTree(false)
+    , m_preferredLogicalHeight(preferredLogicalHeightUnset)
+{
+}
+
+bool RenderMathMLBlock::isChildAllowed(RenderObject* child, RenderStyle*) const
+{
+    return child->node() && child->node()->nodeType() == Node::ELEMENT_NODE;
+}
+
+void RenderMathMLBlock::computePreferredLogicalWidths()
+{
+    ASSERT(preferredLogicalWidthsDirty());
+    m_preferredLogicalHeight = preferredLogicalHeightUnset;
+    RenderFlexibleBox::computePreferredLogicalWidths();
+}
+
+RenderMathMLBlock* RenderMathMLBlock::createAnonymousMathMLBlock(EDisplay display)
+{
+    RefPtr<RenderStyle> newStyle = RenderStyle::createAnonymousStyleWithDisplay(style(), display);
+    RenderMathMLBlock* newBlock = new (renderArena()) RenderMathMLBlock(0);
+    newBlock->setDocumentForAnonymous(document());
+    newBlock->setStyle(newStyle.release());
+    return newBlock;
+}
+
+// An arbitrary large value, like RenderBlock.cpp BLOCK_MAX_WIDTH or FixedTableLayout.cpp TABLE_MAX_WIDTH.
+static const int cLargeLogicalWidth = 15000;
+
+void RenderMathMLBlock::computeChildrenPreferredLogicalHeights()
+{
+    ASSERT(needsLayout());
+
+    // This is ugly, but disable fragmentation when computing the preferred heights.
+    FragmentationDisabler fragmentationDisabler(this);
+
+    // Ensure a full repaint will happen after layout finishes.
+    setNeedsLayout(true, MarkOnlyThis);
+
+    RenderView* renderView = view();
+    bool hadLayoutState = renderView->layoutState();
+    if (!hadLayoutState)
+        renderView->pushLayoutState(this);
+    {
+        LayoutStateDisabler layoutStateDisabler(renderView);
+        
+        LayoutUnit oldAvailableLogicalWidth = availableLogicalWidth();
+        setLogicalWidth(cLargeLogicalWidth);
+        
+        for (RenderObject* child = firstChild(); child; child = child->nextSibling()) {
+            if (!child->isBox())
+                continue;
+            
+            // Because our width changed, |child| may need layout.
+            if (child->maxPreferredLogicalWidth() > oldAvailableLogicalWidth)
+                child->setNeedsLayout(true, MarkOnlyThis);
+            
+            RenderMathMLBlock* childMathMLBlock = child->isRenderMathMLBlock() ? toRenderMathMLBlock(child) : 0;
+            if (childMathMLBlock && !childMathMLBlock->isPreferredLogicalHeightDirty())
+                continue;
+            // Layout our child to compute its preferred logical height.
+            child->layoutIfNeeded();
+            if (childMathMLBlock)
+                childMathMLBlock->setPreferredLogicalHeight(childMathMLBlock->logicalHeight());
+        }
+    }
+    if (!hadLayoutState)
+        renderView->popLayoutState(this);
+}
+
+LayoutUnit RenderMathMLBlock::preferredLogicalHeightAfterSizing(RenderObject* child)
+{
+    if (child->isRenderMathMLBlock())
+        return toRenderMathMLBlock(child)->preferredLogicalHeight();
+    if (child->isBox()) {
+        ASSERT(!child->needsLayout());
+        return toRenderBox(child)->logicalHeight();
+    }
+    // This currently ignores -webkit-line-box-contain:
+    return child->style()->fontSize();
+}
+
+int RenderMathMLBlock::baselinePosition(FontBaseline baselineType, bool firstLine, LineDirectionMode direction, LinePositionMode linePositionMode) const
+{
+    // mathml.css sets math { -webkit-line-box-contain: glyphs replaced; line-height: 0; }, so when linePositionMode == PositionOfInteriorLineBoxes we want to
+    // return 0 here to match our line-height. This matters when RootInlineBox::ascentAndDescentForBox is called on a RootInlineBox for an inline-block.
+    if (linePositionMode == PositionOfInteriorLineBoxes)
+        return 0;
+    
+    LayoutUnit baseline = firstLineBoxBaseline(); // FIXME: This may be unnecessary after flex baselines are implemented (https://bugs.webkit.org/show_bug.cgi?id=96188).
+    if (baseline != -1)
+        return baseline;
+    
+    return RenderFlexibleBox::baselinePosition(baselineType, firstLine, direction, linePositionMode);
+}
+
+const char* RenderMathMLBlock::renderName() const
+{
+    EDisplay display = style()->display();
+    if (display == FLEX)
+        return isAnonymous() ? "RenderMathMLBlock (anonymous, flex)" : "RenderMathMLBlock (flex)";
+    if (display == INLINE_FLEX)
+        return isAnonymous() ? "RenderMathMLBlock (anonymous, inline-flex)" : "RenderMathMLBlock (inline-flex)";
+    // |display| should be one of the above.
+    ASSERT_NOT_REACHED();
+    return isAnonymous() ? "RenderMathMLBlock (anonymous)" : "RenderMathMLBlock";
+}
+
+#if ENABLE(DEBUG_MATH_LAYOUT)
+void RenderMathMLBlock::paint(PaintInfo& info, const LayoutPoint& paintOffset)
+{
+    RenderFlexibleBox::paint(info, paintOffset);
+    
+    if (info.context->paintingDisabled() || info.phase != PaintPhaseForeground)
+        return;
+
+    IntPoint adjustedPaintOffset = roundedIntPoint(paintOffset + location());
+
+    GraphicsContextStateSaver stateSaver(*info.context);
+    
+    info.context->setStrokeThickness(1.0f);
+    info.context->setStrokeStyle(SolidStroke);
+    info.context->setStrokeColor(Color(0, 0, 255), ColorSpaceSRGB);
+    
+    info.context->drawLine(adjustedPaintOffset, IntPoint(adjustedPaintOffset.x() + pixelSnappedOffsetWidth(), adjustedPaintOffset.y()));
+    info.context->drawLine(IntPoint(adjustedPaintOffset.x() + pixelSnappedOffsetWidth(), adjustedPaintOffset.y()), IntPoint(adjustedPaintOffset.x() + pixelSnappedOffsetWidth(), adjustedPaintOffset.y() + pixelSnappedOffsetHeight()));
+    info.context->drawLine(IntPoint(adjustedPaintOffset.x(), adjustedPaintOffset.y() + pixelSnappedOffsetHeight()), IntPoint(adjustedPaintOffset.x() + pixelSnappedOffsetWidth(), adjustedPaintOffset.y() + pixelSnappedOffsetHeight()));
+    info.context->drawLine(adjustedPaintOffset, IntPoint(adjustedPaintOffset.x(), adjustedPaintOffset.y() + pixelSnappedOffsetHeight()));
+    
+    int topStart = paddingTop();
+    
+    info.context->setStrokeColor(Color(0, 255, 0), ColorSpaceSRGB);
+    
+    info.context->drawLine(IntPoint(adjustedPaintOffset.x(), adjustedPaintOffset.y() + topStart), IntPoint(adjustedPaintOffset.x() + pixelSnappedOffsetWidth(), adjustedPaintOffset.y() + topStart));
+    
+    int baseline = roundToInt(baselinePosition(AlphabeticBaseline, true, HorizontalLine));
+    
+    info.context->setStrokeColor(Color(255, 0, 0), ColorSpaceSRGB);
+    
+    info.context->drawLine(IntPoint(adjustedPaintOffset.x(), adjustedPaintOffset.y() + baseline), IntPoint(adjustedPaintOffset.x() + pixelSnappedOffsetWidth(), adjustedPaintOffset.y() + baseline));
+}
+#endif // ENABLE(DEBUG_MATH_LAYOUT)
+
+//
+// The MathML specification says:
+// (http://www.w3.org/TR/MathML/chapter2.html#fund.units)
+//
+// "Most presentation elements have attributes that accept values representing
+// lengths to be used for size, spacing or similar properties. The syntax of a
+// length is specified as
+//
+// number | number unit | namedspace
+//
+// There should be no space between the number and the unit of a length."
+// 
+// "A trailing '%' represents a percent of the default value. The default
+// value, or how it is obtained, is listed in the table of attributes for each
+// element. [...] A number without a unit is intepreted as a multiple of the
+// default value."
+//
+// "The possible units in MathML are:
+//  
+// Unit Description
+// em   an em (font-relative unit traditionally used for horizontal lengths)
+// ex   an ex (font-relative unit traditionally used for vertical lengths)
+// px   pixels, or size of a pixel in the current display
+// in   inches (1 inch = 2.54 centimeters)
+// cm   centimeters
+// mm   millimeters
+// pt   points (1 point = 1/72 inch)
+// pc   picas (1 pica = 12 points)
+// %    percentage of default value"
+//
+// The numbers are defined that way:
+// - unsigned-number: "a string of decimal digits with up to one decimal point
+//   (U+002E), representing a non-negative terminating decimal number (a type of
+//   rational number)"
+// - number: "an optional prefix of '-' (U+002D), followed by an unsigned
+//   number, representing a terminating decimal number (a type of rational
+//   number)"
+//
+bool parseMathMLLength(const String& string, LayoutUnit& lengthValue, const RenderStyle* style, bool allowNegative)
+{
+    String s = string.simplifyWhiteSpace();
+
+    int stringLength = s.length();
+    if (!stringLength)
+        return false;
+
+    if (parseMathMLNamedSpace(s, lengthValue, style, allowNegative))
+        return true;
+
+    StringBuilder number;
+    String unit;
+
+    // This verifies whether the negative sign is there.
+    int i = 0;
+    UChar c = s[0];
+    if (c == '-') {
+        number.append(c);
+        i++;
+    }
+
+    // This gathers up characters that make up the number.
+    bool gotDot = false;
+    for ( ; i < stringLength; i++) {
+        c = s[i];
+        // The string is invalid if it contains two dots.
+        if (gotDot && c == '.')
+            return false;
+        if (c == '.')
+            gotDot = true;
+        else if (!isASCIIDigit(c)) {
+            unit = s.substring(i, stringLength - i);
+            // Some authors leave blanks before the unit, but that shouldn't
+            // be allowed, so don't simplifyWhitespace on 'unit'.
+            break;
+        }
+        number.append(c);
+    }
+
+    // Convert number to floating point
+    bool ok;
+    float floatValue = number.toString().toFloat(&ok);
+    if (!ok)
+        return false;
+    if (floatValue < 0 && !allowNegative)
+        return false;
+
+    if (unit.isEmpty()) {
+        // no explicit unit, this is a number that will act as a multiplier
+        lengthValue *= floatValue;
+        return true;
+    }
+    if (unit == "%") {
+        lengthValue *= floatValue / 100;
+        return true;
+    }
+    if (unit == "em") {
+        lengthValue = floatValue * style->font().size();
+        return true;
+    }
+    if (unit == "ex") {
+        lengthValue = floatValue * style->fontMetrics().xHeight();
+        return true;
+    }
+    if (unit == "px") {
+        lengthValue = floatValue;
+        return true;
+    }
+    if (unit == "pt") {
+        lengthValue = 4 * (floatValue / 3);
+        return true;
+    }
+    if (unit == "pc") {
+        lengthValue = 16 * floatValue;
+        return true;
+    }
+    if (unit == "in") {
+        lengthValue = 96 * floatValue;
+        return true;
+    }
+    if (unit == "cm") {
+        lengthValue = 96 * (floatValue / 2.54);
+        return true;
+    }
+    if (unit == "mm") {
+        lengthValue = 96 * (floatValue / 25.4);
+        return true;
+    }
+
+    // unexpected unit
+    return false;
+}
+
+bool parseMathMLNamedSpace(const String& string, LayoutUnit& lengthValue, const RenderStyle* style, bool allowNegative)
+{
+    float length = 0;
+    // See if it is one of the namedspaces (ranging -7/18em, -6/18, ... 7/18em)
+    if (string == "veryverythinmathspace")
+        length = 1;
+    else if (string == "verythinmathspace")
+        length = 2;
+    else if (string == "thinmathspace")
+        length = 3;
+    else if (string == "mediummathspace")
+        length = 4;
+    else if (string == "thickmathspace")
+        length = 5;
+    else if (string == "verythickmathspace")
+        length = 6;
+    else if (string == "veryverythickmathspace")
+        length = 7;
+    else if (allowNegative) {
+        if (string == "negativeveryverythinmathspace")
+            length = -1;
+        else if (string == "negativeverythinmathspace")
+            length = -2;
+        else if (string == "negativethinmathspace")
+            length = -3;
+        else if (string == "negativemediummathspace")
+            length = -4;
+        else if (string == "negativethickmathspace")
+            length = -5;
+        else if (string == "negativeverythickmathspace")
+            length = -6;
+        else if (string == "negativeveryverythickmathspace")
+            length = -7;        
+    }
+    if (length) {
+        lengthValue = length * style->font().size() / 18;
+        return true;
+    }
+    return false;
+}
+
+int RenderMathMLTable::firstLineBoxBaseline() const
+{
+    // In legal MathML, we'll have a MathML parent. That RenderFlexibleBox parent will use our firstLineBoxBaseline() for baseline alignment, per
+    // http://dev.w3.org/csswg/css3-flexbox/#flex-baselines. We want to vertically center an <mtable>, such as a matrix. Essentially the whole <mtable> element fits on a
+    // single line, whose baseline gives this centering. This is different than RenderTable::firstLineBoxBaseline, which returns the baseline of the first row of a <table>.
+    return (logicalHeight() + style()->fontMetrics().xHeight()) / 2;
+}
+
+}    
+
+#endif
diff --git a/Source/core/rendering/mathml/RenderMathMLBlock.h b/Source/core/rendering/mathml/RenderMathMLBlock.h
new file mode 100644
index 0000000..585bbee
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLBlock.h
@@ -0,0 +1,137 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2012 David Barton (dbarton@mathscribe.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLBlock_h
+#define RenderMathMLBlock_h
+
+#if ENABLE(MATHML)
+
+#include "core/rendering/RenderFlexibleBox.h"
+#include "core/rendering/RenderTable.h"
+#include "core/rendering/style/StyleInheritedData.h"
+
+#define ENABLE_DEBUG_MATH_LAYOUT 0
+
+namespace WebCore {
+    
+class RenderMathMLOperator;
+
+class RenderMathMLBlock : public RenderFlexibleBox {
+public:
+    RenderMathMLBlock(Element* container);
+
+    virtual bool isChildAllowed(RenderObject*, RenderStyle*) const;
+    
+    virtual bool isRenderMathMLBlock() const { return true; }
+    virtual bool isRenderMathMLOperator() const { return false; }
+    virtual bool isRenderMathMLRow() const { return false; }
+    virtual bool isRenderMathMLMath() const { return false; }
+    virtual bool isRenderMathMLFenced() const { return false; }
+    virtual bool isRenderMathMLFraction() const { return false; }
+    virtual bool isRenderMathMLRoot() const { return false; }
+    virtual bool isRenderMathMLSpace() const { return false; }
+    virtual bool isRenderMathMLSquareRoot() const { return false; }
+    virtual bool isRenderMathMLSubSup() const { return false; }
+    virtual bool isRenderMathMLUnderOver() const { return false; }
+    
+    // MathML defines an "embellished operator" as roughly an <mo> that may have subscripts,
+    // superscripts, underscripts, overscripts, or a denominator (as in d/dx, where "d" is some
+    // differential operator). The padding, precedence, and stretchiness of the base <mo> should
+    // apply to the embellished operator as a whole. unembellishedOperator() checks for being an
+    // embellished operator, and omits any embellishments.
+    // FIXME: We don't yet handle all the cases in the MathML spec. See
+    // https://bugs.webkit.org/show_bug.cgi?id=78617.
+    virtual RenderMathMLOperator* unembellishedOperator() { return 0; }
+    
+    // A MathML element's preferred logical widths often depend on its children's preferred heights, not just their widths.
+    // This is due to operator stretching and other layout fine tuning. We define an element's preferred height to be its
+    // actual height after layout inside a very wide parent.
+    bool isPreferredLogicalHeightDirty() const { return preferredLogicalWidthsDirty() || m_preferredLogicalHeight < 0; }
+    // The caller must ensure !isPreferredLogicalHeightDirty().
+    LayoutUnit preferredLogicalHeight() const { ASSERT(!isPreferredLogicalHeightDirty()); return m_preferredLogicalHeight; }
+    static const int preferredLogicalHeightUnset = -1;
+    void setPreferredLogicalHeight(LayoutUnit logicalHeight) { m_preferredLogicalHeight = logicalHeight; }
+    // computePreferredLogicalWidths() in derived classes must ensure m_preferredLogicalHeight is set to < 0 or its correct value.
+    virtual void computePreferredLogicalWidths() OVERRIDE;
+    
+    virtual int baselinePosition(FontBaseline, bool firstLine, LineDirectionMode, LinePositionMode = PositionOnContainingLine) const OVERRIDE;
+    
+#if ENABLE(DEBUG_MATH_LAYOUT)
+    virtual void paint(PaintInfo&, const LayoutPoint&);
+#endif
+    
+    // Create a new RenderMathMLBlock, with a new style inheriting from this->style().
+    RenderMathMLBlock* createAnonymousMathMLBlock(EDisplay = FLEX);
+    
+    void setIgnoreInAccessibilityTree(bool flag) { m_ignoreInAccessibilityTree = flag; }
+    bool ignoreInAccessibilityTree() const { return m_ignoreInAccessibilityTree; }
+    
+private:
+    virtual const char* renderName() const OVERRIDE;
+    bool m_ignoreInAccessibilityTree;
+    
+protected:
+    // Set our logical width to a large value, and compute our children's preferred logical heights.
+    void computeChildrenPreferredLogicalHeights();
+    // This can only be called after children have been sized by computeChildrenPreferredLogicalHeights().
+    static LayoutUnit preferredLogicalHeightAfterSizing(RenderObject* child);
+    
+    // m_preferredLogicalHeight is dirty if it's < 0 or preferredLogicalWidthsDirty().
+    LayoutUnit m_preferredLogicalHeight;
+};
+
+inline RenderMathMLBlock* toRenderMathMLBlock(RenderObject* object)
+{ 
+    ASSERT_WITH_SECURITY_IMPLICATION(!object || object->isRenderMathMLBlock());
+    return static_cast<RenderMathMLBlock*>(object);
+}
+
+inline const RenderMathMLBlock* toRenderMathMLBlock(const RenderObject* object)
+{ 
+    ASSERT_WITH_SECURITY_IMPLICATION(!object || object->isRenderMathMLBlock());
+    return static_cast<const RenderMathMLBlock*>(object);
+}
+
+// This will catch anyone doing an unnecessary cast.
+void toRenderMathMLBlock(const RenderMathMLBlock*);
+
+class RenderMathMLTable FINAL : public RenderTable {
+public:
+    explicit RenderMathMLTable(Element* element) : RenderTable(element) { }
+    
+    virtual int firstLineBoxBaseline() const OVERRIDE;
+    
+private:
+    virtual const char* renderName() const OVERRIDE { return "RenderMathMLTable"; }
+};
+
+// Parsing functions for MathML Length values
+bool parseMathMLLength(const String&, LayoutUnit&, const RenderStyle*, bool allowNegative = true);
+bool parseMathMLNamedSpace(const String&, LayoutUnit&, const RenderStyle*, bool allowNegative = true);
+}
+
+#endif // ENABLE(MATHML)
+#endif // RenderMathMLBlock_h
diff --git a/Source/core/rendering/mathml/RenderMathMLFenced.cpp b/Source/core/rendering/mathml/RenderMathMLFenced.cpp
new file mode 100644
index 0000000..e2ba8ce
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLFenced.cpp
@@ -0,0 +1,172 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLFenced.h"
+
+#include "core/platform/graphics/FontSelector.h"
+#include "MathMLNames.h"
+#include "core/rendering/RenderInline.h"
+#include "RenderMathMLOperator.h"
+#include "core/rendering/RenderText.h"
+#include <wtf/text/StringBuilder.h>
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+    
+enum Braces { OpeningBraceChar = 0x28, ClosingBraceChar = 0x29 };
+    
+static const float gSeparatorMarginEndEms = 0.25f;
+static const float gFenceMarginEms = 0.1f;
+
+RenderMathMLFenced::RenderMathMLFenced(Element* element)
+    : RenderMathMLRow(element)
+    , m_open(OpeningBraceChar)
+    , m_close(ClosingBraceChar)
+    , m_closeFenceRenderer(0)
+{
+}
+
+void RenderMathMLFenced::updateFromElement()
+{
+    Element* fenced = toElement(node());
+ 
+    // FIXME: Handle open/close values with more than one character (they should be treated like text).
+    AtomicString openValue = fenced->getAttribute(MathMLNames::openAttr);
+    if (openValue.length() > 0)
+        m_open = openValue[0];
+    AtomicString closeValue = fenced->getAttribute(MathMLNames::closeAttr);
+    if (closeValue.length() > 0)
+        m_close = closeValue[0];
+    
+    AtomicString separators = fenced->getAttribute(MathMLNames::separatorsAttr);
+    if (!separators.isNull()) {
+        StringBuilder characters;
+        for (unsigned int i = 0; i < separators.length(); i++) {
+            if (!isSpaceOrNewline(separators[i]))
+                characters.append(separators[i]);
+        }
+        m_separators = !characters.length() ? 0 : characters.toString().impl();
+    } else {
+        // The separator defaults to a single comma.
+        m_separators = StringImpl::create(",");
+    }
+    
+    if (isEmpty())
+        makeFences();
+}
+
+RenderMathMLOperator* RenderMathMLFenced::createMathMLOperator(UChar uChar, RenderMathMLOperator::OperatorType operatorType)
+{
+    RefPtr<RenderStyle> newStyle = RenderStyle::createAnonymousStyleWithDisplay(style(), FLEX);
+    newStyle->setFlexDirection(FlowColumn);
+    newStyle->setMarginEnd(Length((operatorType == RenderMathMLOperator::Fence ? gFenceMarginEms : gSeparatorMarginEndEms) * style()->fontSize(), Fixed));
+    if (operatorType == RenderMathMLOperator::Fence)
+        newStyle->setMarginStart(Length(gFenceMarginEms * style()->fontSize(), Fixed));
+    RenderMathMLOperator* newOperator = new (renderArena()) RenderMathMLOperator(toElement(node()), uChar);
+    newOperator->setOperatorType(operatorType);
+    newOperator->setStyle(newStyle.release());
+    return newOperator;
+}
+
+void RenderMathMLFenced::makeFences()
+{
+    RenderMathMLRow::addChild(createMathMLOperator(m_open, RenderMathMLOperator::Fence), firstChild());
+    m_closeFenceRenderer = createMathMLOperator(m_close, RenderMathMLOperator::Fence);
+    RenderMathMLRow::addChild(m_closeFenceRenderer);
+}
+
+void RenderMathMLFenced::addChild(RenderObject* child, RenderObject* beforeChild)
+{
+    // make the fences if the render object is empty
+    if (isEmpty())
+        updateFromElement();
+    
+    // FIXME: Adding or removing a child should possibly cause all later separators to shift places if they're different,
+    // as later child positions change by +1 or -1.
+    
+    RenderObject* separatorRenderer = 0;
+    if (m_separators.get()) {
+        unsigned int count = 0;
+        for (Node* position = child->node(); position; position = position->previousSibling()) {
+            if (position->isElementNode())
+                count++;
+        }
+        if (!beforeChild) {
+            // We're adding at the end (before the closing fence), so a new separator would go before the new child, not after it.
+            --count;
+        }
+        // |count| is now the number of element children that will be before our new separator, i.e. it's the 1-based index of the separator.
+        
+        if (count > 0) {
+            UChar separator;
+            
+            // Use the last separator if we've run out of specified separators.
+            if (count > m_separators.get()->length())
+                separator = (*m_separators.get())[m_separators.get()->length() - 1];
+            else
+                separator = (*m_separators.get())[count - 1];
+                
+            separatorRenderer = createMathMLOperator(separator, RenderMathMLOperator::Separator);
+        }
+    }
+    
+    if (beforeChild) {
+        // Adding |x| before an existing |y| e.g. in element (y) - first insert our new child |x|, then its separator, to get (x, y).
+        RenderMathMLRow::addChild(child, beforeChild);
+        if (separatorRenderer)
+            RenderMathMLRow::addChild(separatorRenderer, beforeChild);
+    } else {
+        // Adding |y| at the end of an existing element e.g. (x) - insert the separator first before the closing fence, then |y|, to get (x, y).
+        if (separatorRenderer)
+            RenderMathMLRow::addChild(separatorRenderer, m_closeFenceRenderer);
+        RenderMathMLRow::addChild(child, m_closeFenceRenderer);
+    }
+}
+
+// FIXME: Change createMathMLOperator() above to create an isAnonymous() operator, and remove this styleDidChange() function.
+void RenderMathMLFenced::styleDidChange(StyleDifference diff, const RenderStyle* oldStyle)
+{
+    RenderMathMLBlock::styleDidChange(diff, oldStyle);
+    
+    for (RenderObject* child = firstChild(); child; child = child->nextSibling()) {
+        if (child->node() == node()) {
+            ASSERT(child->style()->refCount() == 1);
+            child->style()->inheritFrom(style());
+            bool isFence = child == firstChild() || child == lastChild();
+            child->style()->setMarginEnd(Length((isFence ? gFenceMarginEms : gSeparatorMarginEndEms) * style()->fontSize(), Fixed));
+            if (isFence)
+                child->style()->setMarginStart(Length(gFenceMarginEms * style()->fontSize(), Fixed));
+        }
+    }
+}
+
+}    
+
+#endif
diff --git a/Source/core/rendering/mathml/RenderMathMLFenced.h b/Source/core/rendering/mathml/RenderMathMLFenced.h
new file mode 100644
index 0000000..a8b73a9
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLFenced.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLFenced_h
+#define RenderMathMLFenced_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLOperator.h"
+#include "RenderMathMLRow.h"
+
+namespace WebCore {
+    
+class RenderMathMLFenced : public RenderMathMLRow {
+public:
+    RenderMathMLFenced(Element*);
+    virtual void addChild(RenderObject* child, RenderObject* beforeChild = 0);
+    virtual void updateFromElement();
+    
+private:
+    virtual bool isRenderMathMLFenced() const { return true; }
+    virtual const char* renderName() const { return "RenderMathMLFenced"; }
+
+    RenderMathMLOperator* createMathMLOperator(UChar, RenderMathMLOperator::OperatorType);
+    void makeFences();
+    
+    virtual void styleDidChange(StyleDifference, const RenderStyle* oldStyle) OVERRIDE;
+
+    UChar m_open;
+    UChar m_close;
+    RefPtr<StringImpl> m_separators;
+    
+    RenderObject* m_closeFenceRenderer;
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+
+#endif // RenderMathMLFenced_h
diff --git a/Source/core/rendering/mathml/RenderMathMLFraction.cpp b/Source/core/rendering/mathml/RenderMathMLFraction.cpp
new file mode 100644
index 0000000..3e2a1e8
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLFraction.cpp
@@ -0,0 +1,174 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 François Sausset (sausset@gmail.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLFraction.h"
+
+#include "core/platform/graphics/GraphicsContext.h"
+#include "core/platform/graphics/GraphicsContextStateSaver.h"
+#include "MathMLNames.h"
+#include "core/rendering/PaintInfo.h"
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+
+static const float gLineThin = 0.33f;
+static const float gLineMedium = 1.f;
+static const float gLineThick = 3.f;
+static const float gFractionBarWidth = 0.05f;
+
+RenderMathMLFraction::RenderMathMLFraction(Element* element)
+    : RenderMathMLBlock(element)
+    , m_lineThickness(gLineMedium)
+{
+}
+
+void RenderMathMLFraction::fixChildStyle(RenderObject* child)
+{
+    ASSERT(child->isAnonymous() && child->style()->refCount() == 1);
+    child->style()->setFlexDirection(FlowColumn);
+}
+
+// FIXME: It's cleaner to only call updateFromElement when an attribute has changed. Move parts
+// of this to fixChildStyle or other methods, and call them when needed.
+void RenderMathMLFraction::updateFromElement()
+{
+    // FIXME: mfrac where bevelled=true will need to reorganize the descendants
+    if (isEmpty()) 
+        return;
+    
+    Element* fraction = toElement(node());
+    
+    RenderObject* numeratorWrapper = firstChild();
+    RenderObject* denominatorWrapper = numeratorWrapper->nextSibling();
+    if (!denominatorWrapper)
+        return;
+    
+    String thickness = fraction->getAttribute(MathMLNames::linethicknessAttr);
+    m_lineThickness = gLineMedium;
+    if (equalIgnoringCase(thickness, "thin"))
+        m_lineThickness = gLineThin;
+    else if (equalIgnoringCase(thickness, "medium"))
+        m_lineThickness = gLineMedium;
+    else if (equalIgnoringCase(thickness, "thick"))
+        m_lineThickness = gLineThick;
+    else {
+        // This function parses the thickness attribute using gLineMedium as
+        // the default value. If the parsing fails, m_lineThickness will not be
+        // modified i.e. the default value will be used.
+        parseMathMLLength(thickness, m_lineThickness, style(), false);
+    }
+
+    // Update the style for the padding of the denominator for the line thickness
+    lastChild()->style()->setPaddingTop(Length(static_cast<int>(m_lineThickness), Fixed));
+}
+
+void RenderMathMLFraction::addChild(RenderObject* child, RenderObject* /* beforeChild */)
+{
+    if (isEmpty()) {
+        RenderMathMLBlock* numeratorWrapper = createAnonymousMathMLBlock();
+        RenderMathMLBlock::addChild(numeratorWrapper);
+        fixChildStyle(numeratorWrapper);
+        
+        RenderMathMLBlock* denominatorWrapper = createAnonymousMathMLBlock();
+        RenderMathMLBlock::addChild(denominatorWrapper);
+        fixChildStyle(denominatorWrapper);
+    }
+    
+    if (firstChild()->isEmpty())
+        firstChild()->addChild(child);
+    else
+        lastChild()->addChild(child);
+    
+    updateFromElement();
+}
+
+void RenderMathMLFraction::styleDidChange(StyleDifference diff, const RenderStyle* oldStyle)
+{
+    RenderMathMLBlock::styleDidChange(diff, oldStyle);
+    
+    for (RenderObject* child = firstChild(); child; child = child->nextSibling())
+        fixChildStyle(child);
+    updateFromElement();
+}
+
+RenderMathMLOperator* RenderMathMLFraction::unembellishedOperator()
+{
+    RenderObject* numeratorWrapper = firstChild();
+    if (!numeratorWrapper)
+        return 0;
+    RenderObject* numerator = numeratorWrapper->firstChild();
+    if (!numerator || !numerator->isRenderMathMLBlock())
+        return 0;
+    return toRenderMathMLBlock(numerator)->unembellishedOperator();
+}
+
+void RenderMathMLFraction::layout()
+{
+    updateFromElement();
+
+    // Adjust the fraction line thickness for the zoom
+    if (lastChild() && lastChild()->isRenderBlock())
+        m_lineThickness *= ceilf(gFractionBarWidth * style()->fontSize());
+
+    RenderMathMLBlock::layout();
+}
+
+void RenderMathMLFraction::paint(PaintInfo& info, const LayoutPoint& paintOffset)
+{
+    RenderMathMLBlock::paint(info, paintOffset);
+    if (info.context->paintingDisabled() || info.phase != PaintPhaseForeground || style()->visibility() != VISIBLE)
+        return;
+    
+    RenderBox* denominatorWrapper = lastChildBox();
+    if (!denominatorWrapper || !m_lineThickness)
+        return;
+
+    IntPoint adjustedPaintOffset = roundedIntPoint(paintOffset + location() + denominatorWrapper->location() + LayoutPoint(0, m_lineThickness / 2));
+    
+    GraphicsContextStateSaver stateSaver(*info.context);
+    
+    info.context->setStrokeThickness(m_lineThickness);
+    info.context->setStrokeStyle(SolidStroke);
+    info.context->setStrokeColor(style()->visitedDependentColor(CSSPropertyColor), ColorSpaceSRGB);
+    
+    info.context->drawLine(adjustedPaintOffset, IntPoint(adjustedPaintOffset.x() + denominatorWrapper->pixelSnappedOffsetWidth(), adjustedPaintOffset.y()));
+}
+
+int RenderMathMLFraction::firstLineBoxBaseline() const
+{
+    if (RenderBox* denominatorWrapper = lastChildBox())
+        return denominatorWrapper->logicalTop() + static_cast<int>(lroundf((m_lineThickness + style()->fontMetrics().xHeight()) / 2));
+    return RenderMathMLBlock::firstLineBoxBaseline();
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/rendering/mathml/RenderMathMLFraction.h b/Source/core/rendering/mathml/RenderMathMLFraction.h
new file mode 100644
index 0000000..df53081
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLFraction.h
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 François Sausset (sausset@gmail.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLFraction_h
+#define RenderMathMLFraction_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+
+namespace WebCore {
+
+class RenderMathMLFraction : public RenderMathMLBlock {
+public:
+    RenderMathMLFraction(Element*);
+    virtual void addChild(RenderObject* child, RenderObject* beforeChild = 0);
+    virtual void updateFromElement();
+    
+    virtual RenderMathMLOperator* unembellishedOperator();
+    
+    virtual int firstLineBoxBaseline() const OVERRIDE;
+    float lineThickness() const { return m_lineThickness; }
+    virtual void paint(PaintInfo&, const LayoutPoint&);
+protected:
+    virtual void layout();
+    
+private:
+    virtual bool isRenderMathMLFraction() const { return true; }
+    void fixChildStyle(RenderObject* child);
+    virtual void styleDidChange(StyleDifference, const RenderStyle* oldStyle) OVERRIDE;
+
+    virtual const char* renderName() const { return "RenderMathMLFraction"; }
+    
+    LayoutUnit m_lineThickness;
+};
+    
+inline RenderMathMLFraction* toRenderMathMLFraction(RenderObject* object)
+{
+    ASSERT_WITH_SECURITY_IMPLICATION(!object || (object->isRenderMathMLBlock() && toRenderMathMLBlock(object)->isRenderMathMLFraction()));
+    return static_cast<RenderMathMLFraction*>(object);
+}
+
+inline const RenderMathMLFraction* toRenderMathMLFraction(const RenderObject* object)
+{
+    ASSERT_WITH_SECURITY_IMPLICATION(!object || (object->isRenderMathMLBlock() && toRenderMathMLBlock(object)->isRenderMathMLFraction()));
+    return static_cast<const RenderMathMLFraction*>(object);
+}
+
+}
+
+#endif // ENABLE(MATHML)
+
+#endif // RenderMathMLFraction_h
diff --git a/Source/core/rendering/mathml/RenderMathMLMath.cpp b/Source/core/rendering/mathml/RenderMathMLMath.cpp
new file mode 100644
index 0000000..15e2bbd
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLMath.cpp
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLMath.h"
+
+#include "MathMLNames.h"
+
+namespace WebCore {
+
+using namespace MathMLNames;
+
+RenderMathMLMath::RenderMathMLMath(Element* element)
+    : RenderMathMLRow(element)
+{
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/rendering/mathml/RenderMathMLMath.h b/Source/core/rendering/mathml/RenderMathMLMath.h
new file mode 100644
index 0000000..aaa2f4f
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLMath.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLMath_h
+#define RenderMathMLMath_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLRow.h"
+
+namespace WebCore {
+    
+class RenderMathMLMath : public RenderMathMLRow {
+public:
+    RenderMathMLMath(Element*);
+    virtual bool isRenderMathMLMath() const { return true; }
+
+private:
+    virtual const char* renderName() const { return "RenderMathMLMath"; }
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+#endif // RenderMathMLMath_h
diff --git a/Source/core/rendering/mathml/RenderMathMLOperator.cpp b/Source/core/rendering/mathml/RenderMathMLOperator.cpp
new file mode 100644
index 0000000..8cde0db
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLOperator.cpp
@@ -0,0 +1,336 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 François Sausset (sausset@gmail.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLOperator.h"
+
+#include "core/platform/graphics/FontCache.h"
+#include "core/platform/graphics/FontSelector.h"
+#include "MathMLNames.h"
+#include "core/rendering/RenderText.h"
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+
+RenderMathMLOperator::RenderMathMLOperator(Element* element)
+    : RenderMathMLBlock(element)
+    , m_stretchHeight(0)
+    , m_operator(0)
+    , m_operatorType(Default)
+{
+}
+
+RenderMathMLOperator::RenderMathMLOperator(Element* element, UChar operatorChar)
+    : RenderMathMLBlock(element)
+    , m_stretchHeight(0)
+    , m_operator(convertHyphenMinusToMinusSign(operatorChar))
+    , m_operatorType(Default)
+{
+}
+
+bool RenderMathMLOperator::isChildAllowed(RenderObject*, RenderStyle*) const
+{
+    return false;
+}
+
+static const float gOperatorExpansion = 1.2f;
+
+void RenderMathMLOperator::stretchToHeight(int height)
+{
+    height *= gOperatorExpansion;
+    if (m_stretchHeight == height)
+        return;
+    m_stretchHeight = height;
+    
+    updateFromElement();
+}
+
+void RenderMathMLOperator::styleDidChange(StyleDifference diff, const RenderStyle* oldStyle)
+{
+    RenderMathMLBlock::styleDidChange(diff, oldStyle);
+    
+    if (firstChild())
+        updateFromElement();
+}
+
+void RenderMathMLOperator::computePreferredLogicalWidths() 
+{
+    ASSERT(preferredLogicalWidthsDirty());
+
+#ifndef NDEBUG
+    // FIXME: Remove this once mathml stops modifying the render tree here.
+    SetLayoutNeededForbiddenScope layoutForbiddenScope(this, false);
+#endif
+    
+    // Check for an uninitialized operator.
+    if (!firstChild())
+        updateFromElement();
+
+    RenderMathMLBlock::computePreferredLogicalWidths();
+}
+
+// This is a table of stretchy characters.
+// FIXME: Should this be read from the unicode characteristics somehow?
+// table:  stretchy operator, top char, extension char, bottom char, middle char
+static struct StretchyCharacter {
+    UChar character;
+    UChar topGlyph;
+    UChar extensionGlyph;
+    UChar bottomGlyph;
+    UChar middleGlyph;
+} stretchyCharacters[13] = {
+    { 0x28  , 0x239b, 0x239c, 0x239d, 0x0    }, // left parenthesis
+    { 0x29  , 0x239e, 0x239f, 0x23a0, 0x0    }, // right parenthesis
+    { 0x5b  , 0x23a1, 0x23a2, 0x23a3, 0x0    }, // left square bracket
+    { 0x2308, 0x23a1, 0x23a2, 0x23a2, 0x0    }, // left ceiling
+    { 0x230a, 0x23a2, 0x23a2, 0x23a3, 0x0    }, // left floor
+    { 0x5d  , 0x23a4, 0x23a5, 0x23a6, 0x0    }, // right square bracket
+    { 0x2309, 0x23a4, 0x23a5, 0x23a5, 0x0    }, // right ceiling
+    { 0x230b, 0x23a5, 0x23a5, 0x23a6, 0x0    }, // right floor
+    { 0x7b  , 0x23a7, 0x23aa, 0x23a9, 0x23a8 }, // left curly bracket
+    { 0x7c  , 0x23aa, 0x23aa, 0x23aa, 0x0    }, // vertical bar
+    { 0x2016, 0x2016, 0x2016, 0x2016, 0x0    }, // double vertical line
+    { 0x7d  , 0x23ab, 0x23aa, 0x23ad, 0x23ac }, // right curly bracket
+    { 0x222b, 0x2320, 0x23ae, 0x2321, 0x0    } // integral sign
+};
+
+// Note glyphHeightForCharacter truncates its result to an int.
+int RenderMathMLOperator::glyphHeightForCharacter(UChar character)
+{
+    GlyphData data = style()->font().glyphDataForCharacter(character, false);
+    FloatRect glyphBounds = data.fontData->boundsForGlyph(data.glyph);
+    return glyphBounds.height();
+}
+
+// FIXME: It's cleaner to only call updateFromElement when an attribute has changed. The body of
+// this method should probably be moved to a private stretchHeightChanged or checkStretchHeight
+// method. Probably at the same time, addChild/removeChild methods should be made to work for
+// dynamic DOM changes.
+void RenderMathMLOperator::updateFromElement()
+{
+    RenderObject* savedRenderer = node()->renderer();
+
+    // Destroy our current children
+    children()->destroyLeftoverChildren();
+
+    // Since we share a node with our children, destroying our children may set our node's
+    // renderer to 0, so we need to restore it.
+    node()->setRenderer(savedRenderer);
+    
+    // If the operator is fixed, it will be contained in m_operator
+    UChar firstChar = m_operator;
+    
+    // This boolean indicates whether stretching is disabled via the markup.
+    bool stretchDisabled = false;
+    
+    // We may need the element later if we can't stretch.
+    if (node()->isElementNode()) {
+        if (Element* mo = toElement(node())) {
+            AtomicString stretchyAttr = mo->getAttribute(MathMLNames::stretchyAttr);
+            stretchDisabled = equalIgnoringCase(stretchyAttr, "false");
+            
+            // If stretching isn't disabled, get the character from the text content.
+            if (!stretchDisabled && !firstChar) {
+                String opText = mo->textContent();
+                for (unsigned int i = 0; !firstChar && i < opText.length(); i++) {
+                    if (!isSpaceOrNewline(opText[i]))
+                        firstChar = opText[i];
+                }
+            }
+        }
+    }
+    
+    // The 'index' holds the stretchable character's glyph information
+    int index = -1;
+    
+    // isStretchy indicates whether the character is streatchable via a number of factors.
+    bool isStretchy = false;
+    
+    // Check for a stretchable character.
+    if (!stretchDisabled && firstChar) {
+        const int maxIndex = WTF_ARRAY_LENGTH(stretchyCharacters);
+        for (index++; index < maxIndex; index++) {
+            if (stretchyCharacters[index].character == firstChar) {
+                isStretchy = true;
+                break;
+            }
+        }
+    }
+    
+    // We only stack glyphs if the stretch height is larger than a minimum size.
+    bool shouldStack = isStretchy && m_stretchHeight > style()->fontSize();
+    struct StretchyCharacter* partsData = 0;
+    int topGlyphHeight = 0;
+    int extensionGlyphHeight = 0;
+    int bottomGlyphHeight = 0;
+    int middleGlyphHeight = 0;
+    if (shouldStack) {
+        partsData = &stretchyCharacters[index];
+        
+        FontCachePurgePreventer fontCachePurgePreventer;
+        
+        topGlyphHeight = glyphHeightForCharacter(partsData->topGlyph);
+        extensionGlyphHeight = glyphHeightForCharacter(partsData->extensionGlyph) - 1;
+        bottomGlyphHeight = glyphHeightForCharacter(partsData->bottomGlyph);
+        if (partsData->middleGlyph)
+            middleGlyphHeight = glyphHeightForCharacter(partsData->middleGlyph) - 1;
+        shouldStack = m_stretchHeight >= topGlyphHeight + middleGlyphHeight + bottomGlyphHeight && extensionGlyphHeight > 0;
+    }
+    
+    // Either stretch is disabled or we don't have a stretchable character over the minimum height
+    if (stretchDisabled || !shouldStack) {
+        m_isStacked = false;
+        RenderBlock* container = new (renderArena()) RenderMathMLBlock(toElement(node()));
+        // This container doesn't offer any useful information to accessibility.
+        toRenderMathMLBlock(container)->setIgnoreInAccessibilityTree(true);
+        
+        RefPtr<RenderStyle> newStyle = RenderStyle::create();
+        newStyle->inheritFrom(style());
+        newStyle->setDisplay(FLEX);
+        
+        // Check for a stretchable character that is under the minimum height.
+        if (!stretchDisabled && isStretchy && m_stretchHeight > style()->fontSize()) {
+            FontDescription desc = style()->fontDescription();
+            desc.setIsAbsoluteSize(true);
+            desc.setSpecifiedSize(m_stretchHeight);
+            desc.setComputedSize(m_stretchHeight);
+            newStyle->setFontDescription(desc);
+            newStyle->font().update(style()->font().fontSelector());
+        }
+
+        container->setStyle(newStyle.release());
+        addChild(container);
+        
+        // Build the text of the operator.
+        RenderText* text = 0;
+        if (m_operator) 
+            text = new (renderArena()) RenderText(node(), StringImpl::create(&m_operator, 1));
+        else if (node()->isElementNode())
+            if (Element* mo = toElement(node()))
+                text = new (renderArena()) RenderText(node(), mo->textContent().replace(hyphenMinus, minusSign).impl());
+        // If we can't figure out the text, leave it blank.
+        if (text) {
+            RefPtr<RenderStyle> textStyle = RenderStyle::create();
+            textStyle->inheritFrom(container->style());
+            text->setStyle(textStyle.release());
+            container->addChild(text);
+        }
+    } else {
+        // Build stretchable characters as a stack of glyphs.
+        m_isStacked = true;
+        
+        // To avoid gaps, we position glyphs after the top glyph upward by 1px. We also truncate
+        // glyph heights to ints, and then reduce all but the top & bottom such heights by 1px.
+        
+        int remaining = m_stretchHeight - topGlyphHeight - bottomGlyphHeight;
+        createGlyph(partsData->topGlyph, topGlyphHeight, 0);
+        if (partsData->middleGlyph) {
+            // We have a middle glyph (e.g. a curly bracket) that requires special processing.
+            remaining -= middleGlyphHeight;
+            int half = (remaining + 1) / 2;
+            remaining -= half;
+            while (remaining > 0) {
+                int height = std::min<int>(remaining, extensionGlyphHeight);
+                createGlyph(partsData->extensionGlyph, height, -1);
+                remaining -= height;
+            }
+            
+            // The middle glyph in the stack.
+            createGlyph(partsData->middleGlyph, middleGlyphHeight, -1);
+            
+            remaining = half;
+            while (remaining > 0) {
+                int height = std::min<int>(remaining, extensionGlyphHeight);
+                createGlyph(partsData->extensionGlyph, height, -1);
+                remaining -= height;
+            }
+        } else {
+            // We do not have a middle glyph and so we just extend from the top to the bottom glyph.
+            while (remaining > 0) {
+                int height = std::min<int>(remaining, extensionGlyphHeight);
+                createGlyph(partsData->extensionGlyph, height, -1);
+                remaining -= height;
+            }
+        }
+        createGlyph(partsData->bottomGlyph, bottomGlyphHeight, -1);
+    }
+    
+    setNeedsLayoutAndPrefWidthsRecalc();
+}
+
+PassRefPtr<RenderStyle> RenderMathMLOperator::createStackableStyle(int maxHeightForRenderer)
+{
+    RefPtr<RenderStyle> newStyle = RenderStyle::create();
+    newStyle->inheritFrom(style());
+    newStyle->setDisplay(FLEX);
+    
+    newStyle->setMaxHeight(Length(maxHeightForRenderer, Fixed));
+    
+    newStyle->setOverflowY(OHIDDEN);
+    newStyle->setOverflowX(OHIDDEN);
+
+    return newStyle.release();
+}
+
+RenderBlock* RenderMathMLOperator::createGlyph(UChar glyph, int maxHeightForRenderer, int charRelative)
+{
+    RenderBlock* container = new (renderArena()) RenderMathMLBlock(toElement(node()));
+    toRenderMathMLBlock(container)->setIgnoreInAccessibilityTree(true);
+    container->setStyle(createStackableStyle(maxHeightForRenderer));
+    addChild(container);
+    RenderBlock* parent = container;
+    if (charRelative) {
+        RenderBlock* charBlock = new (renderArena()) RenderBlock(node());
+        RefPtr<RenderStyle> charStyle = RenderStyle::create();
+        charStyle->inheritFrom(container->style());
+        charStyle->setDisplay(INLINE_BLOCK);
+        charStyle->setTop(Length(charRelative, Fixed));
+        charStyle->setPosition(RelativePosition);
+        charBlock->setStyle(charStyle);
+        parent->addChild(charBlock);
+        parent = charBlock;
+    }
+    
+    RenderText* text = new (renderArena()) RenderText(node(), StringImpl::create(&glyph, 1));
+    text->setStyle(container->style());
+    parent->addChild(text);
+    return container;
+}
+
+int RenderMathMLOperator::firstLineBoxBaseline() const
+{
+    if (m_isStacked)
+        return m_stretchHeight * 2 / 3 - (m_stretchHeight - static_cast<int>(m_stretchHeight / gOperatorExpansion)) / 2;    
+    return RenderMathMLBlock::firstLineBoxBaseline();
+}
+    
+}
+
+#endif
diff --git a/Source/core/rendering/mathml/RenderMathMLOperator.h b/Source/core/rendering/mathml/RenderMathMLOperator.h
new file mode 100644
index 0000000..747f070
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLOperator.h
@@ -0,0 +1,100 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLOperator_h
+#define RenderMathMLOperator_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+#include <wtf/unicode/CharacterNames.h>
+
+namespace WebCore {
+    
+class RenderMathMLOperator : public RenderMathMLBlock {
+public:
+    RenderMathMLOperator(Element*);
+    RenderMathMLOperator(Element*, UChar operatorChar);
+
+    virtual bool isRenderMathMLOperator() const { return true; }
+    
+    virtual bool isChildAllowed(RenderObject*, RenderStyle*) const;
+    virtual void updateFromElement() OVERRIDE;
+    
+    virtual RenderMathMLOperator* unembellishedOperator() OVERRIDE { return this; }
+    void stretchToHeight(int pixelHeight);
+    
+    virtual int firstLineBoxBaseline() const OVERRIDE;
+    
+    enum OperatorType { Default, Separator, Fence };
+    void setOperatorType(OperatorType type) { m_operatorType = type; }
+    OperatorType operatorType() const { return m_operatorType; }
+    
+protected:
+    virtual void computePreferredLogicalWidths() OVERRIDE;
+    PassRefPtr<RenderStyle> createStackableStyle(int maxHeightForRenderer);
+    RenderBlock* createGlyph(UChar glyph, int maxHeightForRenderer, int charRelative);
+    
+private:
+    virtual const char* renderName() const { return isAnonymous() ? "RenderMathMLOperator (anonymous)" : "RenderMathMLOperator"; }
+
+    int glyphHeightForCharacter(UChar);
+
+    virtual void styleDidChange(StyleDifference, const RenderStyle* oldStyle) OVERRIDE;
+
+    int m_stretchHeight;
+    bool m_isStacked;
+    UChar m_operator;
+    OperatorType m_operatorType;
+};
+
+inline RenderMathMLOperator* toRenderMathMLOperator(RenderMathMLBlock* block)
+{ 
+    ASSERT_WITH_SECURITY_IMPLICATION(!block || block->isRenderMathMLOperator());
+    return static_cast<RenderMathMLOperator*>(block);
+}
+
+inline const RenderMathMLOperator* toRenderMathMLOperator(const RenderMathMLBlock* block)
+{ 
+    ASSERT_WITH_SECURITY_IMPLICATION(!block || block->isRenderMathMLOperator());
+    return static_cast<const RenderMathMLOperator*>(block);
+}
+
+// This will catch anyone doing an unnecessary cast.
+void toRenderMathMLOperator(const RenderMathMLOperator*);
+
+inline UChar convertHyphenMinusToMinusSign(UChar glyph)
+{
+    // When rendered as a mathematical operator, minus glyph should be larger.
+    if (glyph == hyphenMinus)
+        return minusSign;
+    
+    return glyph;
+}
+
+}
+
+#endif // ENABLE(MATHML)
+#endif // RenderMathMLOperator_h
diff --git a/Source/core/rendering/mathml/RenderMathMLRoot.cpp b/Source/core/rendering/mathml/RenderMathMLRoot.cpp
new file mode 100644
index 0000000..6b0b37b
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLRoot.cpp
@@ -0,0 +1,322 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 François Sausset (sausset@gmail.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLRoot.h"
+
+#include "core/platform/graphics/GraphicsContext.h"
+#include "core/platform/graphics/GraphicsContextStateSaver.h"
+#include "core/rendering/PaintInfo.h"
+#include "RenderMathMLRow.h"
+
+using namespace std;
+
+namespace WebCore {
+    
+// FIXME: This whole file should be changed to work with various writing modes. See https://bugs.webkit.org/show_bug.cgi?id=48951.
+
+// Threshold above which the radical shape is modified to look nice with big bases (em)
+const float gThresholdBaseHeightEms = 1.5f;
+// Normal width of the front of the radical sign, before the base & overbar (em)
+const float gFrontWidthEms = 0.75f;
+// Gap between the base and overbar (em)
+const float gSpaceAboveEms = 0.2f;
+// Horizontal position of the bottom point of the radical (* frontWidth)
+const float gRadicalBottomPointXFront = 0.5f;
+// Lower the radical sign's bottom point (px)
+const int gRadicalBottomPointLower = 3;
+// Horizontal position of the top left point of the radical "dip" (* frontWidth)
+const float gRadicalDipLeftPointXFront = 0.8f;
+// Vertical position of the top left point of a sqrt radical "dip" (* baseHeight)
+const float gSqrtRadicalDipLeftPointYPos = 0.5f;
+// Vertical position of the top left point of an nth root radical "dip" (* baseHeight)
+const float gRootRadicalDipLeftPointYPos = 0.625f;
+// Vertical shift of the left end point of the radical (em)
+const float gRadicalLeftEndYShiftEms = 0.05f;
+// Additional bottom root padding if baseHeight > threshold (em)
+const float gBigRootBottomPaddingEms = 0.2f;
+
+// Radical line thickness (em)
+const float gRadicalLineThicknessEms = 0.02f;
+// Radical thick line thickness (em)
+const float gRadicalThickLineThicknessEms = 0.1f;
+    
+RenderMathMLRoot::RenderMathMLRoot(Element* element)
+    : RenderMathMLBlock(element)
+    , m_intrinsicPaddingBefore(0)
+    , m_intrinsicPaddingAfter(0)
+    , m_intrinsicPaddingStart(0)
+    , m_intrinsicPaddingEnd(0)
+{
+}
+
+LayoutUnit RenderMathMLRoot::paddingTop() const
+{
+    LayoutUnit result = computedCSSPaddingTop();
+    switch (style()->writingMode()) {
+    case TopToBottomWritingMode:
+        return result + m_intrinsicPaddingBefore;
+    case BottomToTopWritingMode:
+        return result + m_intrinsicPaddingAfter;
+    case LeftToRightWritingMode:
+    case RightToLeftWritingMode:
+        return result + (style()->isLeftToRightDirection() ? m_intrinsicPaddingStart : m_intrinsicPaddingEnd);
+    }
+    ASSERT_NOT_REACHED();
+    return result;
+}
+
+LayoutUnit RenderMathMLRoot::paddingBottom() const
+{
+    LayoutUnit result = computedCSSPaddingBottom();
+    switch (style()->writingMode()) {
+    case TopToBottomWritingMode:
+        return result + m_intrinsicPaddingAfter;
+    case BottomToTopWritingMode:
+        return result + m_intrinsicPaddingBefore;
+    case LeftToRightWritingMode:
+    case RightToLeftWritingMode:
+        return result + (style()->isLeftToRightDirection() ? m_intrinsicPaddingEnd : m_intrinsicPaddingStart);
+    }
+    ASSERT_NOT_REACHED();
+    return result;
+}
+
+LayoutUnit RenderMathMLRoot::paddingLeft() const
+{
+    LayoutUnit result = computedCSSPaddingLeft();
+    switch (style()->writingMode()) {
+    case LeftToRightWritingMode:
+        return result + m_intrinsicPaddingBefore;
+    case RightToLeftWritingMode:
+        return result + m_intrinsicPaddingAfter;
+    case TopToBottomWritingMode:
+    case BottomToTopWritingMode:
+        return result + (style()->isLeftToRightDirection() ? m_intrinsicPaddingStart : m_intrinsicPaddingEnd);
+    }
+    ASSERT_NOT_REACHED();
+    return result;
+}
+
+LayoutUnit RenderMathMLRoot::paddingRight() const
+{
+    LayoutUnit result = computedCSSPaddingRight();
+    switch (style()->writingMode()) {
+    case RightToLeftWritingMode:
+        return result + m_intrinsicPaddingBefore;
+    case LeftToRightWritingMode:
+        return result + m_intrinsicPaddingAfter;
+    case TopToBottomWritingMode:
+    case BottomToTopWritingMode:
+        return result + (style()->isLeftToRightDirection() ? m_intrinsicPaddingEnd : m_intrinsicPaddingStart);
+    }
+    ASSERT_NOT_REACHED();
+    return result;
+}
+
+LayoutUnit RenderMathMLRoot::paddingBefore() const
+{
+    return computedCSSPaddingBefore() + m_intrinsicPaddingBefore;
+}
+
+LayoutUnit RenderMathMLRoot::paddingAfter() const
+{
+    return computedCSSPaddingAfter() + m_intrinsicPaddingAfter;
+}
+
+LayoutUnit RenderMathMLRoot::paddingStart() const
+{
+    return computedCSSPaddingStart() + m_intrinsicPaddingStart;
+}
+
+LayoutUnit RenderMathMLRoot::paddingEnd() const
+{
+    return computedCSSPaddingEnd() + m_intrinsicPaddingEnd;
+}
+
+void RenderMathMLRoot::addChild(RenderObject* newChild, RenderObject* beforeChild)
+{
+    // Insert an implicit <mrow> for <mroot> as well as <msqrt>, to ensure firstChild() will have a box
+    // to measure and store a glyph-based height for preferredLogicalHeightAfterSizing.
+    if (!firstChild())
+        RenderMathMLBlock::addChild(RenderMathMLRow::createAnonymousWithParentRenderer(this));
+    
+    // An <mroot>'s index has { position: absolute }.
+    if (newChild->style()->position() == AbsolutePosition)
+        RenderMathMLBlock::addChild(newChild);
+    else
+        firstChild()->addChild(newChild, beforeChild && beforeChild->parent() == firstChild() ? beforeChild : 0);
+}
+
+RenderBoxModelObject* RenderMathMLRoot::index() const
+{
+    if (!firstChild())
+        return 0;
+    RenderObject* index = firstChild()->nextSibling();
+    if (!index || !index->isBoxModelObject())
+        return 0;
+    return toRenderBoxModelObject(index);
+}
+
+void RenderMathMLRoot::computePreferredLogicalWidths()
+{
+    ASSERT(preferredLogicalWidthsDirty() && needsLayout());
+    
+#ifndef NDEBUG
+    // FIXME: Remove this once mathml stops modifying the render tree here.
+    SetLayoutNeededForbiddenScope layoutForbiddenScope(this, false);
+#endif
+    
+    computeChildrenPreferredLogicalHeights();
+    
+    int baseHeight = firstChild() ? roundToInt(preferredLogicalHeightAfterSizing(firstChild())) : style()->fontSize();
+    
+    int frontWidth = lroundf(gFrontWidthEms * style()->fontSize());
+    
+    // Base height above which the shape of the root changes
+    float thresholdHeight = gThresholdBaseHeightEms * style()->fontSize();
+    if (baseHeight > thresholdHeight && thresholdHeight) {
+        float shift = min<float>((baseHeight - thresholdHeight) / thresholdHeight, 1.0f);
+        m_overbarLeftPointShift = static_cast<int>(shift * gRadicalBottomPointXFront * frontWidth);
+        m_intrinsicPaddingAfter = lroundf(gBigRootBottomPaddingEms * style()->fontSize());
+    } else {
+        m_overbarLeftPointShift = 0;
+        m_intrinsicPaddingAfter = 0;
+    }
+    
+    int rootPad = lroundf(gSpaceAboveEms * style()->fontSize());
+    m_intrinsicPaddingBefore = rootPad;
+    m_indexTop = 0;
+    if (RenderBoxModelObject* index = this->index()) {
+        m_intrinsicPaddingStart = roundToInt(index->maxPreferredLogicalWidth()) + m_overbarLeftPointShift;
+        
+        int indexHeight = roundToInt(preferredLogicalHeightAfterSizing(index));
+        int partDipHeight = lroundf((1 - gRootRadicalDipLeftPointYPos) * baseHeight);
+        int rootExtraTop = partDipHeight + indexHeight - (baseHeight + rootPad);
+        if (rootExtraTop > 0)
+            m_intrinsicPaddingBefore += rootExtraTop;
+        else
+            m_indexTop = - rootExtraTop;
+    } else
+        m_intrinsicPaddingStart = frontWidth;
+
+    RenderMathMLBlock::computePreferredLogicalWidths();
+    
+    // Shrink our logical width to its probable value now without triggering unnecessary relayout of our children.
+    ASSERT(needsLayout() && logicalWidth() >= maxPreferredLogicalWidth());
+    setLogicalWidth(maxPreferredLogicalWidth());
+}
+
+void RenderMathMLRoot::layout()
+{
+    // Our computePreferredLogicalWidths() may change our logical width and then layout our children, which
+    // RenderBlock::layout()'s relayoutChildren logic isn't expecting.
+    if (preferredLogicalWidthsDirty())
+        computePreferredLogicalWidths();
+    
+    RenderMathMLBlock::layout();
+    
+    RenderBoxModelObject* index = this->index();
+    // If |index|, it should be a RenderBlock here, unless the user has overriden its { position: absolute }.
+    if (index && index->isBox())
+        toRenderBox(index)->setLogicalTop(m_indexTop);
+}
+
+void RenderMathMLRoot::paint(PaintInfo& info, const LayoutPoint& paintOffset)
+{
+    RenderMathMLBlock::paint(info, paintOffset);
+    
+    if (info.context->paintingDisabled() || style()->visibility() != VISIBLE)
+        return;
+    
+    IntPoint adjustedPaintOffset = roundedIntPoint(paintOffset + location() + contentBoxRect().location());
+    
+    int startX = adjustedPaintOffset.x();
+    int frontWidth = lroundf(gFrontWidthEms * style()->fontSize());
+    int overbarWidth = roundToInt(contentLogicalWidth()) + m_overbarLeftPointShift;
+    
+    int baseHeight = roundToInt(contentLogicalHeight());
+    int rootPad = lroundf(gSpaceAboveEms * style()->fontSize());
+    adjustedPaintOffset.setY(adjustedPaintOffset.y() - rootPad);
+    
+    float radicalDipLeftPointYPos = (index() ? gRootRadicalDipLeftPointYPos : gSqrtRadicalDipLeftPointYPos) * baseHeight;
+    
+    FloatPoint overbarLeftPoint(startX - m_overbarLeftPointShift, adjustedPaintOffset.y());
+    FloatPoint bottomPoint(startX - gRadicalBottomPointXFront * frontWidth, adjustedPaintOffset.y() + baseHeight + gRadicalBottomPointLower);
+    FloatPoint dipLeftPoint(startX - gRadicalDipLeftPointXFront * frontWidth, adjustedPaintOffset.y() + radicalDipLeftPointYPos);
+    FloatPoint leftEnd(startX - frontWidth, dipLeftPoint.y() + gRadicalLeftEndYShiftEms * style()->fontSize());
+    
+    GraphicsContextStateSaver stateSaver(*info.context);
+    
+    info.context->setStrokeThickness(gRadicalLineThicknessEms * style()->fontSize());
+    info.context->setStrokeStyle(SolidStroke);
+    info.context->setStrokeColor(style()->visitedDependentColor(CSSPropertyColor), ColorSpaceDeviceRGB);
+    info.context->setLineJoin(MiterJoin);
+    info.context->setMiterLimit(style()->fontSize());
+    
+    Path root;
+    
+    root.moveTo(FloatPoint(overbarLeftPoint.x() + overbarWidth, adjustedPaintOffset.y()));
+    // draw top
+    root.addLineTo(overbarLeftPoint);
+    // draw from top left corner to bottom point of radical
+    root.addLineTo(bottomPoint);
+    // draw from bottom point to top of left part of radical base "dip"
+    root.addLineTo(dipLeftPoint);
+    // draw to end
+    root.addLineTo(leftEnd);
+    
+    info.context->strokePath(root);
+    
+    GraphicsContextStateSaver maskStateSaver(*info.context);
+    
+    // Build a mask to draw the thick part of the root.
+    Path mask;
+    
+    mask.moveTo(overbarLeftPoint);
+    mask.addLineTo(bottomPoint);
+    mask.addLineTo(dipLeftPoint);
+    mask.addLineTo(FloatPoint(2 * dipLeftPoint.x() - leftEnd.x(), 2 * dipLeftPoint.y() - leftEnd.y()));
+    
+    info.context->clip(mask);
+    
+    // Draw the thick part of the root.
+    info.context->setStrokeThickness(gRadicalThickLineThicknessEms * style()->fontSize());
+    info.context->setLineCap(SquareCap);
+    
+    Path line;
+    line.moveTo(bottomPoint);
+    line.addLineTo(dipLeftPoint);
+    
+    info.context->strokePath(line);
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/rendering/mathml/RenderMathMLRoot.h b/Source/core/rendering/mathml/RenderMathMLRoot.h
new file mode 100644
index 0000000..f8ecb96
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLRoot.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLRoot_h
+#define RenderMathMLRoot_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+
+namespace WebCore {
+    
+// Render base^(1/index), or sqrt(base) via the derived class RenderMathMLSquareRoot, using radical notation.
+class RenderMathMLRoot : public RenderMathMLBlock {
+public:
+    RenderMathMLRoot(Element*);
+
+    virtual LayoutUnit paddingTop() const OVERRIDE;
+    virtual LayoutUnit paddingBottom() const OVERRIDE;
+    virtual LayoutUnit paddingLeft() const OVERRIDE;
+    virtual LayoutUnit paddingRight() const OVERRIDE;
+    virtual LayoutUnit paddingBefore() const OVERRIDE;
+    virtual LayoutUnit paddingAfter() const OVERRIDE;
+    virtual LayoutUnit paddingStart() const OVERRIDE;
+    virtual LayoutUnit paddingEnd() const OVERRIDE;
+
+    virtual void addChild(RenderObject* newChild, RenderObject* beforeChild = 0) OVERRIDE;
+    
+protected:
+    virtual void layout() OVERRIDE;
+    
+    virtual void paint(PaintInfo&, const LayoutPoint&) OVERRIDE;
+
+private:
+    virtual bool isRenderMathMLRoot() const { return true; }
+    virtual const char* renderName() const { return "RenderMathMLRoot"; }
+    
+    virtual void computePreferredLogicalWidths() OVERRIDE;
+    
+    // This may return 0 for a non-MathML index (which won't occur in valid MathML).
+    RenderBoxModelObject* index() const;
+
+    int m_intrinsicPaddingBefore;
+    int m_intrinsicPaddingAfter;
+    int m_intrinsicPaddingStart;
+    int m_intrinsicPaddingEnd;
+    int m_overbarLeftPointShift;
+    int m_indexTop;
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+
+#endif // RenderMathMLRoot_h
diff --git a/Source/core/rendering/mathml/RenderMathMLRow.cpp b/Source/core/rendering/mathml/RenderMathMLRow.cpp
new file mode 100644
index 0000000..25fb75b
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLRow.cpp
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLRow.h"
+
+#include "MathMLNames.h"
+#include "RenderMathMLOperator.h"
+
+namespace WebCore {
+
+using namespace MathMLNames;
+
+RenderMathMLRow::RenderMathMLRow(Element* element)
+    : RenderMathMLBlock(element)
+{
+}
+
+// FIXME: Change all these createAnonymous... routines to return a PassOwnPtr<>.
+RenderMathMLRow* RenderMathMLRow::createAnonymousWithParentRenderer(const RenderObject* parent)
+{
+    RefPtr<RenderStyle> newStyle = RenderStyle::createAnonymousStyleWithDisplay(parent->style(), FLEX);
+    RenderMathMLRow* newMRow = new (parent->renderArena()) RenderMathMLRow(0);
+    newMRow->setDocumentForAnonymous(parent->document());
+    newMRow->setStyle(newStyle.release());
+    return newMRow;
+}
+
+void RenderMathMLRow::computePreferredLogicalWidths()
+{
+    ASSERT(preferredLogicalWidthsDirty() && needsLayout());
+
+#ifndef NDEBUG
+    // FIXME: Remove this once mathml stops modifying the render tree here.
+    SetLayoutNeededForbiddenScope layoutForbiddenScope(this, false);
+#endif
+
+    computeChildrenPreferredLogicalHeights();
+    int stretchLogicalHeight = 0;
+    for (RenderObject* child = firstChild(); child; child = child->nextSibling()) {
+        if (child->isRenderMathMLBlock()) {
+            RenderMathMLOperator* renderMo = toRenderMathMLBlock(child)->unembellishedOperator();
+            // FIXME: Only skip renderMo if it is stretchy.
+            if (renderMo)
+                continue;
+        }
+        stretchLogicalHeight = max<int>(stretchLogicalHeight, roundToInt(preferredLogicalHeightAfterSizing(child)));
+    }
+    if (!stretchLogicalHeight)
+        stretchLogicalHeight = style()->fontSize();
+    
+    // Set the sizes of (possibly embellished) stretchy operator children.
+    for (RenderObject* child = firstChild(); child; child = child->nextSibling()) {
+        if (child->isRenderMathMLBlock()) {
+            RenderMathMLOperator* renderMo = toRenderMathMLBlock(child)->unembellishedOperator();
+            if (renderMo)
+                renderMo->stretchToHeight(stretchLogicalHeight);
+        }
+    }
+
+    RenderMathMLBlock::computePreferredLogicalWidths();
+    
+    // Shrink our logical width to its probable value now without triggering unnecessary relayout of our children.
+    ASSERT(needsLayout() && logicalWidth() >= maxPreferredLogicalWidth());
+    setLogicalWidth(maxPreferredLogicalWidth());
+}
+
+void RenderMathMLRow::layout()
+{
+    // Our computePreferredLogicalWidths() may change our logical width and then layout our children, which
+    // RenderBlock::layout()'s relayoutChildren logic isn't expecting.
+    if (preferredLogicalWidthsDirty())
+        computePreferredLogicalWidths();
+    
+    RenderMathMLBlock::layout();
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/rendering/mathml/RenderMathMLRow.h b/Source/core/rendering/mathml/RenderMathMLRow.h
new file mode 100644
index 0000000..9c1a1dc
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLRow.h
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLRow_h
+#define RenderMathMLRow_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+
+namespace WebCore {
+    
+class RenderMathMLRow : public RenderMathMLBlock {
+public:
+    RenderMathMLRow(Element*);
+
+    static RenderMathMLRow* createAnonymousWithParentRenderer(const RenderObject*);
+    
+    virtual bool isRenderMathMLRow() const { return true; }
+    
+protected:
+    // This also sets our stretchy embellished operator children to their correct sizes.
+    virtual void computePreferredLogicalWidths() OVERRIDE;
+    
+    virtual void layout();
+
+private:
+    virtual const char* renderName() const { return isAnonymous() ? "RenderMathMLRow (anonymous)" : "RenderMathMLRow"; }
+};
+
+}
+
+#endif // ENABLE(MATHML)
+#endif // RenderMathMLRow_h
diff --git a/Source/core/rendering/mathml/RenderMathMLSpace.cpp b/Source/core/rendering/mathml/RenderMathMLSpace.cpp
new file mode 100644
index 0000000..7250b44
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLSpace.cpp
@@ -0,0 +1,102 @@
+/*
+ * Copyright (C) 2013 The MathJax Consortium. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "RenderMathMLSpace.h"
+
+#if ENABLE(MATHML)
+
+#include "core/platform/graphics/GraphicsContext.h"
+#include "core/platform/graphics/GraphicsContextStateSaver.h"
+#include "MathMLNames.h"
+#include "core/rendering/PaintInfo.h"
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+
+RenderMathMLSpace::RenderMathMLSpace(Element* element)
+    : RenderMathMLBlock(element)
+    , m_width(0)
+    , m_height(0)
+    , m_depth(0)
+{
+}
+
+void RenderMathMLSpace::computeIntrinsicLogicalWidths(LayoutUnit& minLogicalWidth, LayoutUnit& maxLogicalWidth) const
+{
+    minLogicalWidth = m_width;
+    maxLogicalWidth = m_width;
+}
+
+void RenderMathMLSpace::updateFromElement()
+{
+    Element* space = toElement(node());
+
+    // This parses the mspace attributes, using 0 as the default values.
+    m_width = 0;
+    m_height = 0;
+    m_depth = 0;
+    parseMathMLLength(space->getAttribute(MathMLNames::widthAttr), m_width, style());
+    parseMathMLLength(space->getAttribute(MathMLNames::heightAttr), m_height, style());
+    parseMathMLLength(space->getAttribute(MathMLNames::depthAttr), m_depth, style());
+
+    // FIXME: Negative width values should be accepted.
+    if (m_width < 0)
+        m_width = 0;
+
+    // If the total height is negative, set vertical dimensions to 0.
+    if (m_height + m_depth < 0) {
+        m_height = 0;
+        m_depth = 0;
+    }
+
+    setNeedsLayoutAndPrefWidthsRecalc();
+}
+
+void RenderMathMLSpace::updateLogicalWidth()
+{
+    setLogicalWidth(m_width);
+}
+
+void RenderMathMLSpace::updateLogicalHeight()
+{
+    setLogicalHeight(m_height + m_depth);
+}
+
+void RenderMathMLSpace::styleDidChange(StyleDifference diff, const RenderStyle* oldStyle)
+{
+    RenderMathMLBlock::styleDidChange(diff, oldStyle);
+    updateFromElement();
+}
+
+int RenderMathMLSpace::firstLineBoxBaseline() const
+{
+    return m_height;
+}
+
+}
+
+#endif
diff --git a/Source/core/rendering/mathml/RenderMathMLSpace.h b/Source/core/rendering/mathml/RenderMathMLSpace.h
new file mode 100644
index 0000000..46e6a04
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLSpace.h
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2013 The MathJax Consortium. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLSpace_h
+#define RenderMathMLSpace_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+
+namespace WebCore {
+    
+class RenderMathMLSpace : public RenderMathMLBlock {
+public:
+    explicit RenderMathMLSpace(Element*);
+
+    virtual int firstLineBoxBaseline() const OVERRIDE;
+    virtual void updateLogicalWidth() OVERRIDE;
+    virtual void updateLogicalHeight() OVERRIDE;
+
+private:
+    virtual void styleDidChange(StyleDifference, const RenderStyle* oldStyle) OVERRIDE;
+    virtual const char* renderName() const OVERRIDE { return isAnonymous() ? "RenderMathMLSpace (anonymous)" : "RenderMathMLSpace"; }
+
+    virtual bool isRenderMathMLSpace() const OVERRIDE { return true; }
+
+    virtual bool isChildAllowed(RenderObject*, RenderStyle*) const OVERRIDE { return false; } 
+    virtual void computeIntrinsicLogicalWidths(LayoutUnit& minLogicalWidth, LayoutUnit& maxLogicalWidth) const OVERRIDE;
+
+    virtual void updateFromElement() OVERRIDE;
+
+    LayoutUnit m_width;
+    LayoutUnit m_height;
+    LayoutUnit m_depth;
+};
+
+inline RenderMathMLSpace* toRenderMathMLSpace(RenderMathMLBlock* block)
+{ 
+    ASSERT_WITH_SECURITY_IMPLICATION(!block || block->isRenderMathMLSpace());
+    return static_cast<RenderMathMLSpace*>(block);
+}
+
+inline const RenderMathMLSpace* toRenderMathMLSpace(const RenderMathMLBlock* block)
+{ 
+    ASSERT_WITH_SECURITY_IMPLICATION(!block || block->isRenderMathMLSpace());
+    return static_cast<const RenderMathMLSpace*>(block);
+}
+
+// This will catch anyone doing an unnecessary cast.
+void toRenderMathMLSpace(const RenderMathMLSpace*);
+}
+
+#endif // ENABLE(MATHML)
+#endif // RenderMathMLSpace_h
diff --git a/Source/core/rendering/mathml/RenderMathMLSquareRoot.cpp b/Source/core/rendering/mathml/RenderMathMLSquareRoot.cpp
new file mode 100644
index 0000000..da75045
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLSquareRoot.cpp
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ * Copyright (C) 2010 François Sausset (sausset@gmail.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLSquareRoot.h"
+
+namespace WebCore {
+    
+RenderMathMLSquareRoot::RenderMathMLSquareRoot(Element* element)
+    : RenderMathMLRoot(element)
+{
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/rendering/mathml/RenderMathMLSquareRoot.h b/Source/core/rendering/mathml/RenderMathMLSquareRoot.h
new file mode 100644
index 0000000..39e0aa7
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLSquareRoot.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+ 
+#ifndef RenderMathMLSquareRoot_h
+#define RenderMathMLSquareRoot_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLRoot.h"
+
+namespace WebCore {
+    
+// Render sqrt(base), using radical notation.
+class RenderMathMLSquareRoot : public RenderMathMLRoot {
+public:
+    RenderMathMLSquareRoot(Element*);
+    
+private:
+    virtual bool isRenderMathMLSquareRoot() const { return true; }
+    virtual const char* renderName() const { return "RenderMathMLSquareRoot"; }
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+
+#endif // RenderMathMLSquareRoot_h
diff --git a/Source/core/rendering/mathml/RenderMathMLSubSup.cpp b/Source/core/rendering/mathml/RenderMathMLSubSup.cpp
new file mode 100644
index 0000000..d07fc8b
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLSubSup.cpp
@@ -0,0 +1,182 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLSubSup.h"
+
+#include "MathMLNames.h"
+
+namespace WebCore {
+    
+using namespace MathMLNames;
+
+RenderMathMLSubSup::RenderMathMLSubSup(Element* element) 
+    : RenderMathMLBlock(element)
+    , m_scripts(0)
+{
+    // Determine what kind of sub/sup expression we have by element name
+    if (element->hasLocalName(MathMLNames::msubTag))
+        m_kind = Sub;
+    else if (element->hasLocalName(MathMLNames::msupTag))
+        m_kind = Super;
+    else {
+        ASSERT(element->hasLocalName(MathMLNames::msubsupTag));
+        m_kind = SubSup;
+    }
+}
+
+RenderBoxModelObject* RenderMathMLSubSup::base() const
+{
+    RenderObject* baseWrapper = firstChild();
+    if (!baseWrapper)
+        return 0;
+    RenderObject* base = baseWrapper->firstChild();
+    if (!base || !base->isBoxModelObject())
+        return 0;
+    return toRenderBoxModelObject(base);
+}
+
+void RenderMathMLSubSup::fixAnonymousStyles()
+{
+    // Set the base wrapper's style so that baseHeight in layout() will be an unstretched height.
+    ASSERT(firstChild() && firstChild()->style()->refCount() == 1);
+    firstChild()->style()->setAlignSelf(AlignFlexStart);
+    
+    ASSERT(m_scripts && m_scripts->style()->refCount() == 1);
+    RenderStyle* scriptsStyle = m_scripts->style();
+    scriptsStyle->setFlexDirection(FlowColumn);
+    scriptsStyle->setJustifyContent(m_kind == Sub ? JustifyFlexEnd : m_kind == Super ? JustifyFlexStart : JustifySpaceBetween);
+    // Set this wrapper's font-size for its line-height & baseline position, for its children.
+    scriptsStyle->setFontSize(static_cast<int>(0.75 * style()->fontSize()));
+}
+
+// FIXME: Handle arbitrary addChild/removeChild correctly throughout MathML.
+void RenderMathMLSubSup::addChild(RenderObject* child, RenderObject* beforeChild)
+{
+    if (isEmpty()) {
+        RenderMathMLBlock* baseWrapper = createAnonymousMathMLBlock();
+        RenderMathMLBlock::addChild(baseWrapper);
+        
+        m_scripts = createAnonymousMathMLBlock();
+        RenderMathMLBlock::addChild(m_scripts);
+        
+        fixAnonymousStyles();
+    }
+    
+    if (firstChild()->isEmpty())
+        firstChild()->addChild(child);
+    else
+        m_scripts->addChild(child, beforeChild && beforeChild->parent() == m_scripts ? beforeChild : 0);
+}
+
+void RenderMathMLSubSup::styleDidChange(StyleDifference diff, const RenderStyle* oldStyle)
+{
+    RenderMathMLBlock::styleDidChange(diff, oldStyle);
+    
+    if (!isEmpty())
+        fixAnonymousStyles();
+}
+
+RenderMathMLOperator* RenderMathMLSubSup::unembellishedOperator()
+{
+    RenderBoxModelObject* base = this->base();
+    if (!base || !base->isRenderMathMLBlock())
+        return 0;
+    return toRenderMathMLBlock(base)->unembellishedOperator();
+}
+
+void RenderMathMLSubSup::layout()
+{
+    RenderMathMLBlock::layout();
+
+    RenderMathMLBlock* baseWrapper = toRenderMathMLBlock(firstChild());
+    if (!baseWrapper || !m_scripts)
+        return;
+    RenderBox* base = baseWrapper->firstChildBox();
+    if (!base)
+        return;
+
+    // Our layout rules include: Don't let the superscript go below the "axis" (half x-height above the
+    // baseline), or the subscript above the axis. Also, don't let the superscript's top edge be
+    // below the base's top edge, or the subscript's bottom edge above the base's bottom edge.
+    //
+    // FIXME: Check any subscriptshift or superscriptshift attributes, and maybe use more sophisticated
+    // heuristics from TeX or elsewhere. See https://bugs.webkit.org/show_bug.cgi?id=79274#c5.
+
+    LayoutUnit baseHeight = base->logicalHeight();
+    LayoutUnit baseBaseline = base->firstLineBoxBaseline();
+    if (baseBaseline == -1)
+        baseBaseline = baseHeight;
+    LayoutUnit axis = style()->fontMetrics().xHeight() / 2;
+    int fontSize = style()->fontSize();
+
+    ASSERT(baseWrapper->style()->hasOneRef());
+    bool needsSecondLayout = false;
+
+    if (RenderBox* superscript = m_kind == Sub ? 0 : m_scripts->lastChildBox()) {
+        LayoutUnit superscriptHeight = superscript->logicalHeight();
+        LayoutUnit superscriptBaseline = superscript->firstLineBoxBaseline();
+        if (superscriptBaseline == -1)
+            superscriptBaseline = superscriptHeight;
+        LayoutUnit minBaseline = max<LayoutUnit>(fontSize / 3 + 1 + superscriptBaseline, superscriptHeight + axis);
+
+        Length newPadding = Length(max<LayoutUnit>(minBaseline - baseBaseline, 0), Fixed);
+        if (newPadding != baseWrapper->style()->paddingTop()) {
+            baseWrapper->style()->setPaddingTop(newPadding);
+            needsSecondLayout = true;
+        }
+    }
+
+    if (RenderBox* subscript = m_kind == Super ? 0 : m_scripts->firstChildBox()) {
+        LayoutUnit subscriptHeight = subscript->logicalHeight();
+        LayoutUnit subscriptBaseline = subscript->firstLineBoxBaseline();
+        if (subscriptBaseline == -1)
+            subscriptBaseline = subscriptHeight;
+        LayoutUnit baseExtendUnderBaseline = baseHeight - baseBaseline;
+        LayoutUnit subscriptUnderItsBaseline = subscriptHeight - subscriptBaseline;
+        LayoutUnit minExtendUnderBaseline = max<LayoutUnit>(fontSize / 5 + 1 + subscriptUnderItsBaseline, subscriptHeight - axis);
+
+        Length newPadding = Length(max<LayoutUnit>(minExtendUnderBaseline - baseExtendUnderBaseline, 0), Fixed);
+        if (newPadding != baseWrapper->style()->paddingBottom()) {
+            baseWrapper->style()->setPaddingBottom(newPadding);
+            needsSecondLayout = true;
+        }
+    }
+
+    if (!needsSecondLayout)
+        return;
+
+    setNeedsLayout(true, MarkOnlyThis);
+    baseWrapper->setChildNeedsLayout(true, MarkOnlyThis);
+
+    RenderMathMLBlock::layout();
+}
+
+}    
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/rendering/mathml/RenderMathMLSubSup.h b/Source/core/rendering/mathml/RenderMathMLSubSup.h
new file mode 100644
index 0000000..082f1a3
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLSubSup.h
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2010 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLSubSup_h
+#define RenderMathMLSubSup_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+
+namespace WebCore {
+    
+// Render a base with a subscript and/or a superscript.
+class RenderMathMLSubSup : public RenderMathMLBlock {
+public:
+    RenderMathMLSubSup(Element*);
+    virtual void addChild(RenderObject* child, RenderObject* beforeChild = 0);
+    
+    virtual RenderMathMLOperator* unembellishedOperator();
+
+protected:
+    virtual void layout();
+    
+private:
+    virtual bool isRenderMathMLSubSup() const { return true; }
+    void fixAnonymousStyles();
+
+    virtual void styleDidChange(StyleDifference, const RenderStyle* oldStyle) OVERRIDE;
+
+    virtual const char* renderName() const { return "RenderMathMLSubSup"; }
+
+    // Omit our subscript and/or superscript. This may return 0 for a non-MathML base (which
+    // won't occur in valid MathML).
+    RenderBoxModelObject* base() const;
+    
+    enum SubSupType { Sub, Super, SubSup };
+    SubSupType m_kind;
+    RenderMathMLBlock* m_scripts;
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+
+#endif // RenderMathMLSubSup_h
diff --git a/Source/core/rendering/mathml/RenderMathMLUnderOver.cpp b/Source/core/rendering/mathml/RenderMathMLUnderOver.cpp
new file mode 100644
index 0000000..c658051
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLUnderOver.cpp
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLUnderOver.h"
+
+#include "MathMLNames.h"
+
+namespace WebCore {
+
+using namespace MathMLNames;
+    
+RenderMathMLUnderOver::RenderMathMLUnderOver(Element* element)
+    : RenderMathMLBlock(element)
+{
+    // Determine what kind of under/over expression we have by element name
+    if (element->hasLocalName(MathMLNames::munderTag))
+        m_kind = Under;
+    else if (element->hasLocalName(MathMLNames::moverTag))
+        m_kind = Over;
+    else {
+        ASSERT(element->hasLocalName(MathMLNames::munderoverTag));
+        m_kind = UnderOver;
+    }
+}
+
+RenderMathMLOperator* RenderMathMLUnderOver::unembellishedOperator()
+{
+    RenderObject* base = firstChild();
+    if (!base || !base->isRenderMathMLBlock())
+        return 0;
+    return toRenderMathMLBlock(base)->unembellishedOperator();
+}
+
+int RenderMathMLUnderOver::firstLineBoxBaseline() const
+{
+    RenderBox* base = firstChildBox();
+    if (!base)
+        return -1;
+    LayoutUnit baseline = base->firstLineBoxBaseline();
+    if (baseline != -1)
+        baseline += base->logicalTop();
+    return baseline;
+}
+
+}
+
+#endif // ENABLE(MATHML)
diff --git a/Source/core/rendering/mathml/RenderMathMLUnderOver.h b/Source/core/rendering/mathml/RenderMathMLUnderOver.h
new file mode 100644
index 0000000..4608145
--- /dev/null
+++ b/Source/core/rendering/mathml/RenderMathMLUnderOver.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2009 Alex Milowski (alex@milowski.com). All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RenderMathMLUnderOver_h
+#define RenderMathMLUnderOver_h
+
+#if ENABLE(MATHML)
+
+#include "RenderMathMLBlock.h"
+
+namespace WebCore {
+    
+class RenderMathMLUnderOver : public RenderMathMLBlock {
+public:
+    RenderMathMLUnderOver(Element*);
+    
+    virtual RenderMathMLOperator* unembellishedOperator();
+
+    virtual int firstLineBoxBaseline() const OVERRIDE;
+    
+private:
+    virtual bool isRenderMathMLUnderOver() const { return true; }
+    virtual const char* renderName() const { return "RenderMathMLUnderOver"; }
+
+    enum UnderOverType { Under, Over, UnderOver };
+    UnderOverType m_kind;
+};
+    
+}
+
+#endif // ENABLE(MATHML)
+
+#endif // RenderMathMLUnderOver_h
